{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# E Deviser - OBE Mastery Hub\n\n## Overview\n\nE Deviser is an Outcome-Based Education (OBE) management system designed to track and manage learning outcomes across educational institutions. The platform provides role-based access for administrators, coordinators, teachers, and students to create, map, and track Institutional Learning Outcomes (ILO), Program Learning Outcomes (PLO), and Course Learning Outcomes (CLO). The system includes comprehensive gamification features, visual outcome mapping, evidence collection through student submissions, and analytics dashboards for educational assessment and accreditation purposes.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript, using Vite as the build tool\n- **Routing**: Wouter for client-side routing with protected route implementation\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables\n- **State Management**: TanStack Query (React Query) for server state management\n- **Form Handling**: React Hook Form with Zod validation for type-safe form schemas\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Authentication**: Passport.js with local strategy and session-based auth\n- **Session Storage**: Express sessions with PostgreSQL store\n- **API Design**: RESTful endpoints with role-based access control (RBAC)\n- **Validation**: Shared Zod schemas between client and server\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Neon serverless deployment\n- **ORM**: Drizzle ORM with type-safe database operations\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Connection Pooling**: Neon serverless connection pooling with WebSocket support\n\n### Authentication and Authorization\n- **Authentication Method**: Session-based with encrypted passwords using scrypt\n- **Role-Based Access Control**: Four distinct roles (admin, coordinator, teacher, student)\n- **Permission Structure**: Hierarchical permissions with primary and secondary ownership concepts\n- **Session Management**: Server-side sessions with PostgreSQL store for persistence\n\n### Core Business Logic\n- **Outcome Hierarchy**: Three-tier learning outcome structure (ILO → PLO → CLO)\n- **Bloom's Taxonomy Integration**: Six cognitive levels mapped to learning outcomes\n- **Visual Outcome Mapping**: Interactive canvas for mapping outcome relationships\n- **Evidence Collection**: Automated evidence aggregation through student submissions\n- **Gamification System**: XP points, levels, badges, and streak tracking for student engagement\n- **Analytics Engine**: Performance tracking and institutional reporting capabilities\n\n### Role-Based Permissions\n- **Admin**: Manages ILOs, can override PLOs, system-wide access\n- **Coordinator**: Manages PLOs within assigned programs, can override CLOs\n- **Teacher**: Manages CLOs within assigned courses, creates assignments and rubrics\n- **Student**: Submits assignments, tracks personal progress and achievements\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **WebSocket Support**: Real-time database connections via ws library\n\n### Authentication & Session Management\n- **Passport.js**: Authentication middleware with local strategy\n- **Connect-PG-Simple**: PostgreSQL session store for Express sessions\n- **Crypto**: Node.js built-in module for password hashing with scrypt\n\n### UI Component Libraries\n- **Radix UI**: Headless UI components for accessibility and functionality\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Utility for component variant management\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n\n### Development Tools\n- **Vite**: Fast build tool with hot module replacement\n- **ESBuild**: JavaScript bundler for production builds\n- **TypeScript**: Type-safe development with shared schemas\n- **Replit Plugins**: Development environment integration for runtime errors and debugging\n\n### Form and Validation\n- **React Hook Form**: Performant form library with minimal re-renders\n- **Zod**: TypeScript-first schema validation library\n- **Hookform Resolvers**: Integration between React Hook Form and Zod\n\n### Date and Utility Libraries\n- **Date-fns**: Date utility library for formatting and manipulation\n- **Nanoid**: URL-safe unique string ID generator\n- **CLSX & Tailwind Merge**: Utility for conditional CSS class management","size_bytes":4673},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          \"0%\": {\n            opacity: \"0\",\n            transform: \"translateY(10px)\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"slide-in-right\": {\n          \"0%\": {\n            opacity: \"0\",\n            transform: \"translateX(20px)\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n            transform: \"translateX(0)\",\n          },\n        },\n        \"bounce-in\": {\n          \"0%\": {\n            transform: \"scale(0.3)\",\n            opacity: \"0\",\n          },\n          \"50%\": {\n            transform: \"scale(1.05)\",\n          },\n          \"70%\": {\n            transform: \"scale(0.9)\",\n          },\n          \"100%\": {\n            transform: \"scale(1)\",\n            opacity: \"1\",\n          },\n        },\n        \"pulse-ring\": {\n          \"0%\": {\n            transform: \"scale(1)\",\n            opacity: \"1\",\n          },\n          \"80%, 100%\": {\n            transform: \"scale(1.1)\",\n            opacity: \"0\",\n          },\n        },\n        \"shimmer\": {\n          \"0%\": {\n            backgroundPosition: \"-200% 0\",\n          },\n          \"100%\": {\n            backgroundPosition: \"200% 0\",\n          },\n        },\n        \"flicker\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n            transform: \"scale(1)\",\n          },\n          \"50%\": {\n            opacity: \"0.8\",\n            transform: \"scale(1.05)\",\n          },\n        },\n        \"badge-glow\": {\n          \"0%\": {\n            boxShadow: \"0 0 20px hsl(var(--accent) / 0.3)\",\n          },\n          \"100%\": {\n            boxShadow: \"0 0 30px hsl(var(--accent) / 0.5)\",\n          },\n        },\n        \"float\": {\n          \"0%, 100%\": {\n            transform: \"translateY(0px)\",\n          },\n          \"50%\": {\n            transform: \"translateY(-10px)\",\n          },\n        },\n        \"spin-slow\": {\n          \"0%\": {\n            transform: \"rotate(0deg)\",\n          },\n          \"100%\": {\n            transform: \"rotate(360deg)\",\n          },\n        },\n        \"wiggle\": {\n          \"0%, 100%\": {\n            transform: \"rotate(-3deg)\",\n          },\n          \"50%\": {\n            transform: \"rotate(3deg)\",\n          },\n        },\n        \"scale-in\": {\n          \"0%\": {\n            transform: \"scale(0)\",\n            opacity: \"0\",\n          },\n          \"100%\": {\n            transform: \"scale(1)\",\n            opacity: \"1\",\n          },\n        },\n        \"slide-up\": {\n          \"0%\": {\n            transform: \"translateY(100%)\",\n            opacity: \"0\",\n          },\n          \"100%\": {\n            transform: \"translateY(0)\",\n            opacity: \"1\",\n          },\n        },\n        \"slide-down\": {\n          \"0%\": {\n            transform: \"translateY(-100%)\",\n            opacity: \"0\",\n          },\n          \"100%\": {\n            transform: \"translateY(0)\",\n            opacity: \"1\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-out\",\n        \"slide-in-right\": \"slide-in-right 0.3s ease-out\",\n        \"bounce-in\": \"bounce-in 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55)\",\n        \"pulse-ring\": \"pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite\",\n        \"shimmer\": \"shimmer 1.5s infinite\",\n        \"flicker\": \"flicker 1.5s infinite alternate\",\n        \"badge-glow\": \"badge-glow 2s ease-in-out infinite alternate\",\n        \"float\": \"float 3s ease-in-out infinite\",\n        \"spin-slow\": \"spin-slow 3s linear infinite\",\n        \"wiggle\": \"wiggle 1s ease-in-out infinite\",\n        \"scale-in\": \"scale-in 0.3s ease-out\",\n        \"slide-up\": \"slide-up 0.3s ease-out\",\n        \"slide-down\": \"slide-down 0.3s ease-out\",\n      },\n      spacing: {\n        \"18\": \"4.5rem\",\n        \"88\": \"22rem\",\n        \"128\": \"32rem\",\n      },\n      screens: {\n        \"xs\": \"475px\",\n        \"3xl\": \"1600px\",\n      },\n      boxShadow: {\n        \"glow\": \"0 0 20px hsl(var(--primary) / 0.3)\",\n        \"glow-lg\": \"0 0 40px hsl(var(--primary) / 0.4)\",\n        \"inner-glow\": \"inset 0 0 20px hsl(var(--accent) / 0.2)\",\n      },\n      backdropBlur: {\n        \"xs\": \"2px\",\n      },\n      backgroundImage: {\n        \"gradient-radial\": \"radial-gradient(var(--tw-gradient-stops))\",\n        \"gradient-conic\": \"conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))\",\n        \"gradient-hero\": \"linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--secondary)) 100%)\",\n        \"gradient-card\": \"linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--muted)) 100%)\",\n        \"xp-gradient\": \"linear-gradient(135deg, hsl(var(--accent)) 0%, #ff6b35 100%)\",\n      },\n      gridTemplateColumns: {\n        \"13\": \"repeat(13, minmax(0, 1fr))\",\n        \"14\": \"repeat(14, minmax(0, 1fr))\",\n        \"15\": \"repeat(15, minmax(0, 1fr))\",\n        \"16\": \"repeat(16, minmax(0, 1fr))\",\n      },\n      gridTemplateRows: {\n        \"7\": \"repeat(7, minmax(0, 1fr))\",\n        \"8\": \"repeat(8, minmax(0, 1fr))\",\n        \"9\": \"repeat(9, minmax(0, 1fr))\",\n        \"10\": \"repeat(10, minmax(0, 1fr))\",\n      },\n      zIndex: {\n        \"60\": \"60\",\n        \"70\": \"70\",\n        \"80\": \"80\",\n        \"90\": \"90\",\n        \"100\": \"100\",\n      },\n      aspectRatio: {\n        \"4/3\": \"4 / 3\",\n        \"3/2\": \"3 / 2\",\n        \"2/3\": \"2 / 3\",\n        \"9/16\": \"9 / 16\",\n      },\n      scale: {\n        \"102\": \"1.02\",\n        \"103\": \"1.03\",\n        \"97\": \"0.97\",\n        \"98\": \"0.98\",\n      },\n      rotate: {\n        \"1\": \"1deg\",\n        \"2\": \"2deg\",\n        \"3\": \"3deg\",\n      },\n      blur: {\n        \"xs\": \"2px\",\n      },\n      brightness: {\n        \"25\": \".25\",\n        \"175\": \"1.75\",\n      },\n      contrast: {\n        \"25\": \".25\",\n        \"175\": \"1.75\",\n      },\n      saturate: {\n        \"25\": \".25\",\n        \"175\": \"1.75\",\n      },\n      sepia: {\n        \"25\": \".25\",\n        \"75\": \".75\",\n      },\n      grayscale: {\n        \"25\": \".25\",\n        \"75\": \".75\",\n      },\n      invert: {\n        \"25\": \".25\",\n        \"75\": \".75\",\n      },\n      hueRotate: {\n        \"15\": \"15deg\",\n        \"30\": \"30deg\",\n        \"60\": \"60deg\",\n        \"90\": \"90deg\",\n        \"270\": \"270deg\",\n      },\n      dropShadow: {\n        \"glow\": [\n          \"0 0px 20px hsl(var(--primary) / 0.35)\",\n          \"0 0px 65px hsl(var(--primary) / 0.2)\"\n        ],\n        \"glow-sm\": \"0 0px 10px hsl(var(--primary) / 0.3)\",\n        \"glow-lg\": \"0 0px 40px hsl(var(--primary) / 0.4)\",\n      },\n      transitionProperty: {\n        \"height\": \"height\",\n        \"spacing\": \"margin, padding\",\n      },\n      transitionTimingFunction: {\n        \"bounce-in\": \"cubic-bezier(0.68, -0.55, 0.265, 1.55)\",\n        \"bounce-out\": \"cubic-bezier(0.34, 1.56, 0.64, 1)\",\n      },\n      transformOrigin: {\n        \"center-top\": \"center top\",\n        \"center-bottom\": \"center bottom\",\n        \"left-center\": \"left center\",\n        \"right-center\": \"right center\",\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"), \n    require(\"@tailwindcss/typography\"),\n    // Custom plugin for utility classes\n    function({ addUtilities }: { addUtilities: any }) {\n      const newUtilities = {\n        '.text-shadow': {\n          textShadow: '2px 2px 4px rgba(0,0,0,0.1)',\n        },\n        '.text-shadow-md': {\n          textShadow: '4px 4px 8px rgba(0,0,0,0.12), 2px 2px 4px rgba(0,0,0,0.08)',\n        },\n        '.text-shadow-lg': {\n          textShadow: '15px 15px 30px rgba(0,0,0,0.11), 5px 5px 15px rgba(0,0,0,0.08)',\n        },\n        '.text-shadow-none': {\n          textShadow: 'none',\n        },\n        '.scrollbar-thin': {\n          scrollbarWidth: 'thin',\n        },\n        '.scrollbar-none': {\n          scrollbarWidth: 'none',\n          '&::-webkit-scrollbar': {\n            display: 'none',\n          },\n        },\n        '.glass': {\n          background: 'rgba(255, 255, 255, 0.1)',\n          backdropFilter: 'blur(10px)',\n          border: '1px solid rgba(255, 255, 255, 0.2)',\n        },\n        '.glass-dark': {\n          background: 'rgba(0, 0, 0, 0.1)',\n          backdropFilter: 'blur(10px)',\n          border: '1px solid rgba(0, 0, 0, 0.2)',\n        },\n        '.gradient-text': {\n          background: 'linear-gradient(135deg, hsl(var(--primary)), hsl(var(--secondary)))',\n          WebkitBackgroundClip: 'text',\n          WebkitTextFillColor: 'transparent',\n          backgroundClip: 'text',\n        },\n        '.writing-vertical': {\n          writingMode: 'vertical-rl',\n          textOrientation: 'mixed',\n        },\n        '.writing-vertical-lr': {\n          writingMode: 'vertical-lr',\n          textOrientation: 'mixed',\n        },\n      }\n      addUtilities(newUtilities)\n    }\n  ],\n} satisfies Config;\n","size_bytes":11195},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser, insertUserSchema } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\n// Production-ready session configuration for autoscale deployment\nconst isProduction = process.env.NODE_ENV === 'production' || process.env.REPLIT_DEPLOYMENT === '1';\n\nconst sessionSettings: session.SessionOptions = {\n  secret: process.env.SESSION_SECRET!,\n  resave: false,\n  saveUninitialized: false,\n  store: storage.sessionStore,\n  cookie: {\n    secure: isProduction, // Require HTTPS in production\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    sameSite: isProduction ? 'none' : 'lax', // Allow cross-origin cookies in production for autoscale\n  },\n};\n\n// Export session middleware for WebSocket authentication\nexport const sessionParser = session(sessionSettings);\n\nexport function setupAuth(app: Express) {\n\n  app.set(\"trust proxy\", 1); // Required for autoscale behind proxy\n  app.use(sessionParser);\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      const user = await storage.getUserByUsername(username);\n      if (!user || !(await comparePasswords(password, user.password))) {\n        return done(null, false);\n      } else {\n        return done(null, user);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      // Security: Force role to student for public registration - only admins can assign other roles\n      const validatedData = insertUserSchema.parse({\n        ...req.body,\n        role: \"student\", // Security: Prevent privilege escalation via public registration\n        password: await hashPassword(req.body.password),\n      });\n\n      const existingUser = await storage.getUserByUsername(validatedData.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const existingEmail = await storage.getUserByEmail(validatedData.email);\n      if (existingEmail) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      const user = await storage.createUser(validatedData);\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        // Remove password from response\n        const { password, ...safeUser } = user;\n        res.status(201).json(safeUser);\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid registration data\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    // Remove password from response\n    const { password, ...safeUser } = req.user!;\n    res.status(200).json(safeUser);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    // Remove password from response\n    const { password, ...safeUser } = req.user!;\n    res.json(safeUser);\n  });\n}\n","size_bytes":4190},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport \"./alert-generator\"; // Initialize alert generation system\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// Environment variable validation for production deployment only\nfunction validateEnvironment() {\n  // Only validate in production environments\n  if (process.env.NODE_ENV !== 'production' && process.env.REPLIT_DEPLOYMENT !== '1') {\n    return;\n  }\n  \n  console.log('Production environment detected, validating configuration...');\n  \n  const requiredEnvVars = ['DATABASE_URL'];\n  const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);\n  \n  if (missingVars.length > 0) {\n    console.error('Missing required environment variables:', missingVars.join(', '));\n    console.error('Please ensure all required environment variables are set before starting the server.');\n    process.exit(1);\n  }\n  \n  // Ensure PORT is properly set for autoscale deployment\n  const port = process.env.PORT;\n  if (!port || isNaN(parseInt(port))) {\n    console.error('PORT environment variable must be set to a valid number in production');\n    process.exit(1);\n  }\n  \n  console.log('Environment validation passed');\n}\n\n// Graceful startup with proper error handling\n(async () => {\n  try {\n    // Validate environment before starting\n    validateEnvironment();\n    \n    console.log('Starting server initialization...');\n    \n    // Register routes and setup server\n    const server = await registerRoutes(app);\n    console.log('Routes registered successfully');\n\n    // Global error handler for express\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n      \n      console.error('Express error:', err);\n      res.status(status).json({ message });\n    });\n\n    // Setup development or production environment\n    if (app.get(\"env\") === \"development\" && process.env.REPLIT_DEPLOYMENT !== '1') {\n      console.log('Setting up development environment with Vite...');\n      await setupVite(app, server);\n    } else {\n      console.log('Setting up production environment...');\n      serveStatic(app);\n    }\n\n    // Configure server for production deployment\n    const port = parseInt(process.env.PORT || '5000', 10);\n    \n    // Production-ready server configuration\n    server.listen({\n      port,\n      host: \"0.0.0.0\", // Required for autoscale deployment accessibility\n      reusePort: true,\n    }, () => {\n      console.log(`✅ Server successfully started on port ${port}`);\n      console.log(`🌐 Server is accessible at http://0.0.0.0:${port}`);\n      \n      if (process.env.REPLIT_DEPLOYMENT === '1') {\n        console.log('🚀 Production deployment detected - server ready for autoscaling');\n      }\n    });\n\n    // Process-level error handlers for production\n    process.on('unhandledRejection', (reason, promise) => {\n      console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n      if (process.env.NODE_ENV === 'production' || process.env.REPLIT_DEPLOYMENT === '1') {\n        console.error('Shutting down due to unhandled rejection in production');\n        server.close(() => process.exit(1));\n      }\n    });\n\n    process.on('uncaughtException', (error) => {\n      console.error('Uncaught Exception:', error);\n      if (process.env.NODE_ENV === 'production' || process.env.REPLIT_DEPLOYMENT === '1') {\n        console.error('Shutting down due to uncaught exception in production');\n        server.close(() => process.exit(1));\n      }\n    });\n\n    // Graceful shutdown handling\n    process.on('SIGTERM', () => {\n      console.log('SIGTERM received, shutting down gracefully...');\n      server.close(() => {\n        console.log('Server closed');\n        process.exit(0);\n      });\n    });\n\n    process.on('SIGINT', () => {\n      console.log('SIGINT received, shutting down gracefully...');\n      server.close(() => {\n        console.log('Server closed');\n        process.exit(0);\n      });\n    });\n    \n  } catch (error) {\n    console.error('❌ Failed to start server:', error);\n    console.error('Server initialization failed. Check the error above and ensure all dependencies are available.');\n    process.exit(1);\n  }\n})();\n","size_bytes":5205},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { setupAuth, sessionParser } from \"./auth\";\nimport { storage } from \"./storage\";\nimport { \n  insertProgramSchema, insertCourseSchema, insertLearningOutcomeSchema,\n  insertOutcomeMappingSchema, insertAssignmentSchema, insertStudentSubmissionSchema,\n  insertBadgeTemplateSchema, insertLearningModuleSchema,\n  insertStudentOnboardingSchema, insertStudentMascotSchema, insertStudyStreaksSchema,\n  insertStudyBuddyInteractionsSchema, insertAcademicAlertsSchema, insertAlertNotificationsSchema,\n  insertUserSessionsSchema, type Role, type AlertType, type AlertPriority, type AlertStatus\n} from \"@shared/schema\";\n\nexport function registerRoutes(app: Express): Server {\n  // Setup authentication routes\n  setupAuth(app);\n\n  // Middleware to check authentication\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    next();\n  };\n\n  // Middleware to check role permissions\n  const requireRole = (roles: Role[]) => (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated() || !roles.includes(req.user.role)) {\n      return res.status(403).json({ message: \"Insufficient permissions\" });\n    }\n    next();\n  };\n\n  // User routes\n  app.get(\"/api/users\", requireRole([\"admin\"]), async (req, res) => {\n    try {\n      // Admin can get all users or filter by role\n      let users;\n      if (req.query.role) {\n        users = await storage.getUsersByRole(req.query.role as Role);\n      } else {\n        // Get all users for admin - add this to storage interface\n        users = await storage.getAllUsers();\n      }\n      // Remove passwords from all users\n      const safeUsers = users.map(user => {\n        const { password, ...safeUser } = user;\n        return safeUser;\n      });\n      res.json(safeUsers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", requireAuth, async (req, res) => {\n    try {\n      const targetUserId = req.params.id;\n      const currentUser = req.user!;\n      \n      // Only admin can update other users, users can only update themselves\n      if (currentUser.id !== targetUserId && currentUser.role !== \"admin\") {\n        return res.status(403).json({ message: \"Can only update your own profile\" });\n      }\n      \n      // Filter allowed fields based on role\n      const allowedFields = currentUser.role === \"admin\" \n        ? [\"firstName\", \"lastName\", \"email\", \"profileImage\", \"isActive\", \"role\"] // Admin can update role\n        : [\"firstName\", \"lastName\", \"email\", \"profileImage\"]; // Users cannot update role\n      \n      const filteredUpdates = Object.fromEntries(\n        Object.entries(req.body).filter(([key]) => allowedFields.includes(key))\n      );\n      \n      if (Object.keys(filteredUpdates).length === 0) {\n        return res.status(400).json({ message: \"No valid fields to update\" });\n      }\n      \n      const user = await storage.updateUser(targetUserId, filteredUpdates);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Remove sensitive fields before returning\n      const { password, ...safeUser } = user;\n      res.json(safeUser);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Program routes\n  app.get(\"/api/programs\", requireAuth, async (req, res) => {\n    try {\n      const programs = await storage.getPrograms();\n      res.json(programs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch programs\" });\n    }\n  });\n\n  app.get(\"/api/programs/:id\", requireAuth, async (req, res) => {\n    try {\n      const program = await storage.getProgram(req.params.id);\n      if (!program) {\n        return res.status(404).json({ message: \"Program not found\" });\n      }\n      res.json(program);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch program\" });\n    }\n  });\n\n  app.post(\"/api/programs\", requireRole([\"admin\", \"coordinator\"]), async (req, res) => {\n    try {\n      const data = insertProgramSchema.parse(req.body);\n      const program = await storage.createProgram(data);\n      res.status(201).json(program);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid program data\" });\n    }\n  });\n\n  app.put(\"/api/programs/:id\", requireRole([\"admin\", \"coordinator\"]), async (req, res) => {\n    try {\n      const program = await storage.updateProgram(req.params.id, req.body);\n      if (!program) {\n        return res.status(404).json({ message: \"Program not found\" });\n      }\n      res.json(program);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update program\" });\n    }\n  });\n\n  app.get(\"/api/programs/coordinator/:coordinatorId\", requireAuth, async (req, res) => {\n    try {\n      const programs = await storage.getProgramsByCoordinator(req.params.coordinatorId);\n      res.json(programs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch coordinator programs\" });\n    }\n  });\n\n  // Course routes\n  app.get(\"/api/courses\", requireAuth, async (req, res) => {\n    try {\n      const courses = await storage.getCourses();\n      res.json(courses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch courses\" });\n    }\n  });\n\n  app.get(\"/api/courses/:id\", requireAuth, async (req, res) => {\n    try {\n      const course = await storage.getCourse(req.params.id);\n      if (!course) {\n        return res.status(404).json({ message: \"Course not found\" });\n      }\n      res.json(course);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch course\" });\n    }\n  });\n\n  app.post(\"/api/courses\", requireRole([\"admin\", \"coordinator\"]), async (req, res) => {\n    try {\n      const data = insertCourseSchema.parse(req.body);\n      const course = await storage.createCourse(data);\n      res.status(201).json(course);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid course data\" });\n    }\n  });\n\n  app.put(\"/api/courses/:id\", requireRole([\"admin\", \"coordinator\", \"teacher\"]), async (req, res) => {\n    try {\n      const course = await storage.updateCourse(req.params.id, req.body);\n      if (!course) {\n        return res.status(404).json({ message: \"Course not found\" });\n      }\n      res.json(course);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update course\" });\n    }\n  });\n\n  app.get(\"/api/courses/program/:programId\", requireAuth, async (req, res) => {\n    try {\n      const courses = await storage.getCoursesByProgram(req.params.programId);\n      res.json(courses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch program courses\" });\n    }\n  });\n\n  app.get(\"/api/courses/teacher/:teacherId\", requireAuth, async (req, res) => {\n    try {\n      const courses = await storage.getCoursesByTeacher(req.params.teacherId);\n      res.json(courses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch teacher courses\" });\n    }\n  });\n\n  // Learning Outcomes routes with enhanced role-based filtering for cross-profile synchronization\n  app.get(\"/api/learning-outcomes\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      let outcomes;\n      \n      if (req.query.type) {\n        outcomes = await storage.getLearningOutcomesByType(req.query.type as string);\n      } else if (req.query.programId) {\n        outcomes = await storage.getLearningOutcomesByProgram(req.query.programId as string);\n      } else if (req.query.courseId) {\n        outcomes = await storage.getLearningOutcomesByCourse(req.query.courseId as string);\n      } else {\n        outcomes = await storage.getLearningOutcomes();\n      }\n      \n      // Cross-profile data filtering based on role and ownership\n      const filteredOutcomes = outcomes.filter(outcome => {\n        // Admin can see all outcomes\n        if (currentUser.role === 'admin') return true;\n        \n        // Users can see their own outcomes\n        if (outcome.ownerId === currentUser.id) return true;\n        \n        // Role-based visibility for outcomes they can potentially edit\n        switch (outcome.type) {\n          case 'ILO': \n            return currentUser.role === 'coordinator'; // Coordinators need to see ILOs for PLO→ILO mappings\n          case 'PLO': \n            return currentUser.role === 'coordinator'; // Coordinators can see PLOs to potentially override\n          case 'CLO': \n            return ['coordinator', 'teacher'].includes(currentUser.role); // Coordinators/Teachers can see CLOs\n          default: \n            return false;\n        }\n      });\n      \n      res.json(filteredOutcomes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch learning outcomes\" });\n    }\n  });\n\n  app.get(\"/api/learning-outcomes/:id\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const outcome = await storage.getLearningOutcome(req.params.id);\n      \n      if (!outcome) {\n        return res.status(404).json({ message: \"Learning outcome not found\" });\n      }\n      \n      // Apply same role-based filtering as list endpoint to prevent IDOR vulnerability\n      const canViewOutcome = (): boolean => {\n        // Admin can see all outcomes\n        if (currentUser.role === 'admin') return true;\n        \n        // Users can see their own outcomes\n        if (outcome.ownerId === currentUser.id) return true;\n        \n        // Role-based visibility for outcomes they can potentially edit\n        switch (outcome.type) {\n          case 'ILO': \n            return currentUser.role === 'coordinator'; // Coordinators need to see ILOs for PLO→ILO mappings\n          case 'PLO': \n            return currentUser.role === 'coordinator'; // Coordinators can see PLOs to potentially override\n          case 'CLO': \n            return ['coordinator', 'teacher'].includes(currentUser.role); // Coordinators/Teachers can see CLOs\n          default: \n            return false;\n        }\n      };\n      \n      if (!canViewOutcome()) {\n        return res.status(403).json({ message: \"Insufficient permissions to view this outcome\" });\n      }\n      \n      res.json(outcome);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch learning outcome\" });\n    }\n  });\n\n  app.post(\"/api/learning-outcomes\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const outcomeType = req.body.type;\n      \n      // Enhanced role-based permission enforcement for cross-profile synchronization\n      const canCreateOutcome = (userRole: Role, type: string): boolean => {\n        switch (type) {\n          case 'ILO': return userRole === 'admin';\n          case 'PLO': return userRole === 'coordinator';\n          case 'CLO': return ['coordinator', 'teacher'].includes(userRole);\n          default: return false;\n        }\n      };\n      \n      if (!canCreateOutcome(currentUser.role, outcomeType)) {\n        return res.status(403).json({ \n          message: `${currentUser.role} role cannot create ${outcomeType} outcomes` \n        });\n      }\n      \n      const data = insertLearningOutcomeSchema.parse({\n        ...req.body,\n        ownerId: req.user!.id,\n        lastEditedBy: req.user!.id,\n      });\n      const outcome = await storage.createLearningOutcome(data);\n      res.status(201).json(outcome);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid learning outcome data\" });\n    }\n  });\n\n  app.put(\"/api/learning-outcomes/:id\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const existingOutcome = await storage.getLearningOutcome(req.params.id);\n      \n      if (!existingOutcome) {\n        return res.status(404).json({ message: \"Learning outcome not found\" });\n      }\n      \n      // Enhanced hierarchical permission validation for cross-profile synchronization\n      const canUpdateOutcome = (userRole: Role, outcomeType: string, ownerId: string): boolean => {\n        // Users can always update their own outcomes if role permits\n        if (ownerId === currentUser.id) {\n          switch (outcomeType) {\n            case 'ILO': return userRole === 'admin';\n            case 'PLO': return ['admin', 'coordinator'].includes(userRole);\n            case 'CLO': return ['admin', 'coordinator', 'teacher'].includes(userRole);\n            default: return false;\n          }\n        }\n        \n        // Hierarchical overrides: Admin can override PLOs, Coordinator can override CLOs\n        switch (outcomeType) {\n          case 'PLO': return userRole === 'admin'; // Admin can override PLOs\n          case 'CLO': return ['admin', 'coordinator'].includes(userRole); // Admin/Coordinator can override CLOs\n          default: return false; // No overrides for ILOs\n        }\n      };\n      \n      if (!canUpdateOutcome(currentUser.role, existingOutcome.type, existingOutcome.ownerId)) {\n        return res.status(403).json({ \n          message: `${currentUser.role} role cannot update this ${existingOutcome.type} outcome` \n        });\n      }\n      \n      const outcome = await storage.updateLearningOutcome(req.params.id, {\n        ...req.body,\n        lastEditedBy: req.user!.id,\n      });\n      res.json(outcome);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update learning outcome\" });\n    }\n  });\n\n  // Outcome Mapping routes with role-based filtering for cross-profile synchronization\n  app.get(\"/api/outcome-mappings\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      let mappings;\n      \n      if (req.query.sourceId) {\n        mappings = await storage.getOutcomeMappingsBySource(req.query.sourceId as string);\n      } else if (req.query.targetId) {\n        mappings = await storage.getOutcomeMappingsByTarget(req.query.targetId as string);\n      } else {\n        mappings = await storage.getOutcomeMappings();\n      }\n      \n      // Role-based filtering to prevent excessive data exposure\n      const filteredMappings = [];\n      for (const mapping of mappings) {\n        const sourceOutcome = await storage.getLearningOutcome(mapping.sourceOutcomeId);\n        const targetOutcome = await storage.getLearningOutcome(mapping.targetOutcomeId);\n        \n        if (!sourceOutcome || !targetOutcome) continue;\n        \n        // Apply visibility rules based on user role and outcome access\n        const canViewMapping = (): boolean => {\n          // Admin can see all mappings\n          if (currentUser.role === 'admin') return true;\n          \n          // Users can see mappings they created\n          if (mapping.createdBy === currentUser.id) return true;\n          \n          // Check if user can see both source and target outcomes\n          const canViewSource = currentUser.id === sourceOutcome.ownerId || \n            (sourceOutcome.type === 'ILO' && currentUser.role === 'coordinator') ||\n            (sourceOutcome.type === 'PLO' && currentUser.role === 'coordinator') ||\n            (sourceOutcome.type === 'CLO' && ['coordinator', 'teacher'].includes(currentUser.role));\n            \n          const canViewTarget = currentUser.id === targetOutcome.ownerId ||\n            (targetOutcome.type === 'ILO' && currentUser.role === 'coordinator') ||\n            (targetOutcome.type === 'PLO' && currentUser.role === 'coordinator') ||\n            (targetOutcome.type === 'CLO' && ['coordinator', 'teacher'].includes(currentUser.role));\n          \n          return canViewSource && canViewTarget;\n        };\n        \n        if (canViewMapping()) {\n          filteredMappings.push(mapping);\n        }\n      }\n      \n      res.json(filteredMappings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch outcome mappings\" });\n    }\n  });\n\n  app.post(\"/api/outcome-mappings\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const { sourceId, targetId } = req.body;\n      \n      // Enhanced permission validation for outcome mapping based on cross-profile synchronization\n      const sourceOutcome = await storage.getLearningOutcome(sourceId);\n      const targetOutcome = await storage.getLearningOutcome(targetId);\n      \n      if (!sourceOutcome || !targetOutcome) {\n        return res.status(400).json({ message: \"Invalid source or target outcome\" });\n      }\n      \n      // Validate mapping hierarchy and permissions\n      const canCreateMapping = (): boolean => {\n        // Admin can create any mapping\n        if (currentUser.role === 'admin') return true;\n        \n        // Coordinators can create PLO mappings and manage their program outcomes\n        if (currentUser.role === 'coordinator') {\n          return ['PLO', 'CLO'].includes(sourceOutcome.type) && ['ILO', 'PLO'].includes(targetOutcome.type);\n        }\n        \n        // Teachers can only create CLO mappings for outcomes they own/teach\n        if (currentUser.role === 'teacher') {\n          return sourceOutcome.type === 'CLO' && \n                 targetOutcome.type === 'PLO' && \n                 sourceOutcome.ownerId === currentUser.id;\n        }\n        \n        return false;\n      };\n      \n      if (!canCreateMapping()) {\n        return res.status(403).json({ \n          message: `${currentUser.role} role cannot create ${sourceOutcome.type}→${targetOutcome.type} mappings` \n        });\n      }\n      \n      const data = insertOutcomeMappingSchema.parse({\n        ...req.body,\n        createdBy: req.user!.id,\n      });\n      const mapping = await storage.createOutcomeMapping(data);\n      res.status(201).json(mapping);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid mapping data\" });\n    }\n  });\n\n  // Assignment routes\n  app.get(\"/api/assignments\", requireAuth, async (req, res) => {\n    try {\n      let assignments;\n      if (req.query.courseId) {\n        assignments = await storage.getAssignmentsByCourse(req.query.courseId as string);\n      } else {\n        assignments = await storage.getAssignments();\n      }\n      res.json(assignments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch assignments\" });\n    }\n  });\n\n  app.get(\"/api/assignments/:id\", requireAuth, async (req, res) => {\n    try {\n      const assignment = await storage.getAssignment(req.params.id);\n      if (!assignment) {\n        return res.status(404).json({ message: \"Assignment not found\" });\n      }\n      res.json(assignment);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch assignment\" });\n    }\n  });\n\n  app.post(\"/api/assignments\", requireRole([\"teacher\", \"coordinator\", \"admin\"]), async (req, res) => {\n    try {\n      const data = insertAssignmentSchema.parse({\n        ...req.body,\n        teacherId: req.user!.id,\n      });\n      const assignment = await storage.createAssignment(data);\n      res.status(201).json(assignment);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid assignment data\" });\n    }\n  });\n\n  app.put(\"/api/assignments/:id\", requireRole([\"teacher\", \"coordinator\", \"admin\"]), async (req, res) => {\n    try {\n      const assignment = await storage.updateAssignment(req.params.id, req.body);\n      if (!assignment) {\n        return res.status(404).json({ message: \"Assignment not found\" });\n      }\n      res.json(assignment);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update assignment\" });\n    }\n  });\n\n  // Student Submission routes\n  app.get(\"/api/student-submissions\", requireAuth, async (req, res) => {\n    try {\n      let submissions;\n      if (req.query.studentId) {\n        submissions = await storage.getSubmissionsByStudent(req.query.studentId as string);\n      } else if (req.query.assignmentId) {\n        submissions = await storage.getSubmissionsByAssignment(req.query.assignmentId as string);\n      } else {\n        submissions = await storage.getStudentSubmissions();\n      }\n      res.json(submissions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch submissions\" });\n    }\n  });\n\n  app.get(\"/api/student-submissions/:id\", requireAuth, async (req, res) => {\n    try {\n      const submission = await storage.getStudentSubmission(req.params.id);\n      if (!submission) {\n        return res.status(404).json({ message: \"Submission not found\" });\n      }\n      res.json(submission);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch submission\" });\n    }\n  });\n\n  app.post(\"/api/student-submissions\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!; // Safe because of requireAuth middleware\n      const data = insertStudentSubmissionSchema.parse({\n        ...req.body,\n        studentId: user.role === \"student\" ? user.id : req.body.studentId,\n      });\n      const submission = await storage.createStudentSubmission(data);\n      res.status(201).json(submission);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid submission data\" });\n    }\n  });\n\n  app.put(\"/api/student-submissions/:id\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!; // Safe because of requireAuth middleware\n      const updates = {\n        ...req.body,\n        gradedBy: user.role !== \"student\" ? user.id : undefined,\n        gradedAt: req.body.totalScore !== undefined ? new Date() : undefined,\n      };\n      const submission = await storage.updateStudentSubmission(req.params.id, updates);\n      if (!submission) {\n        return res.status(404).json({ message: \"Submission not found\" });\n      }\n      res.json(submission);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update submission\" });\n    }\n  });\n\n  // Student Progress routes\n  app.get(\"/api/student-progress/:studentId\", requireAuth, async (req, res) => {\n    try {\n      let progress = await storage.getStudentProgress(req.params.studentId);\n      if (!progress) {\n        progress = await storage.createStudentProgress(req.params.studentId);\n      }\n      res.json(progress);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch student progress\" });\n    }\n  });\n\n  app.put(\"/api/student-progress/:studentId\", requireAuth, async (req, res) => {\n    try {\n      const progress = await storage.updateStudentProgress(req.params.studentId, req.body);\n      if (!progress) {\n        return res.status(404).json({ message: \"Student progress not found\" });\n      }\n      res.json(progress);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update student progress\" });\n    }\n  });\n\n  // Badge Template routes\n  app.get(\"/api/badge-templates\", requireAuth, async (req, res) => {\n    try {\n      const templates = await storage.getBadgeTemplates();\n      res.json(templates);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch badge templates\" });\n    }\n  });\n\n  app.post(\"/api/badge-templates\", requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const data = insertBadgeTemplateSchema.parse(req.body);\n      const template = await storage.createBadgeTemplate(data);\n      res.status(201).json(template);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid badge template data\" });\n    }\n  });\n\n  // Learning Module routes\n  app.get(\"/api/learning-modules\", requireAuth, async (req, res) => {\n    try {\n      let modules;\n      if (req.query.courseId) {\n        modules = await storage.getLearningModulesByCourse(req.query.courseId as string);\n      } else {\n        modules = await storage.getLearningModules();\n      }\n      res.json(modules);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch learning modules\" });\n    }\n  });\n\n  app.post(\"/api/learning-modules\", requireRole([\"teacher\", \"coordinator\", \"admin\"]), async (req, res) => {\n    try {\n      const data = insertLearningModuleSchema.parse(req.body);\n      const module = await storage.createLearningModule(data);\n      res.status(201).json(module);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid learning module data\" });\n    }\n  });\n\n  // Statistics endpoints for role-specific dashboard\n  app.get(\"/api/stats/admin\", requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const programs = await storage.getPrograms();\n      const users = await storage.getAllUsers();\n      \n      res.json({\n        totalPrograms: programs.length,\n        systemUsers: users.length,\n        systemHealth: 98 // Can be calculated based on various metrics\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch admin statistics\" });\n    }\n  });\n\n  app.get(\"/api/stats/coordinator/:coordinatorId\", requireAuth, async (req, res) => {\n    try {\n      if (req.user!.role !== 'coordinator' && req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const programs = await storage.getProgramsByCoordinator(req.params.coordinatorId);\n      const outcomes = await storage.getLearningOutcomesByType('PLO');\n      const mappings = await storage.getOutcomeMappings();\n      \n      // Calculate students in coordinator's programs\n      let totalStudents = 0;\n      for (const program of programs) {\n        const courses = await storage.getCoursesByProgram(program.id);\n        const studentSet = new Set();\n        for (const course of courses) {\n          const enrollments = await storage.getStudentEnrollmentsByCourse(course.id);\n          enrollments.forEach(e => studentSet.add(e.studentId));\n        }\n        totalStudents += studentSet.size;\n      }\n      \n      // Calculate outcomes mapped percentage\n      const coordinatorOutcomes = outcomes.filter(o => o.ownerId === req.params.coordinatorId);\n      const mappedOutcomes = coordinatorOutcomes.filter(o => \n        mappings.some(m => m.sourceId === o.id || m.targetId === o.id)\n      );\n      const mappedPercentage = coordinatorOutcomes.length > 0 \n        ? Math.round((mappedOutcomes.length / coordinatorOutcomes.length) * 100)\n        : 0;\n      \n      res.json({\n        programsManaged: programs.length,\n        studentsTracked: totalStudents,\n        outcomesMapped: mappedPercentage\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch coordinator statistics\" });\n    }\n  });\n\n  app.get(\"/api/stats/teacher/:teacherId\", requireAuth, async (req, res) => {\n    try {\n      if (req.user!.role !== 'teacher' && req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const courses = await storage.getCoursesByTeacher(req.params.teacherId);\n      const assignments = await storage.getAssignments();\n      \n      // Calculate active students\n      const studentSet = new Set();\n      for (const course of courses) {\n        const enrollments = await storage.getStudentEnrollmentsByCourse(course.id);\n        enrollments.forEach(e => studentSet.add(e.studentId));\n      }\n      \n      // Count teacher's assignments\n      const teacherAssignments = assignments.filter(a => \n        courses.some(c => c.id === a.courseId)\n      );\n      \n      res.json({\n        coursesTeaching: courses.length,\n        activeStudents: studentSet.size,\n        assignmentsCreated: teacherAssignments.length\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch teacher statistics\" });\n    }\n  });\n\n  // Analytics routes\n  app.get(\"/api/analytics/program/:programId\", requireRole([\"admin\", \"coordinator\"]), async (req, res) => {\n    try {\n      const analytics = await storage.getProgramAnalytics(req.params.programId);\n      res.json(analytics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch program analytics\" });\n    }\n  });\n\n  app.get(\"/api/analytics/blooms-distribution\", requireAuth, async (req, res) => {\n    try {\n      const distribution = await storage.getBloomsTaxonomyDistribution(req.query.programId as string);\n      res.json(distribution);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch Bloom's taxonomy distribution\" });\n    }\n  });\n\n  app.get(\"/api/analytics/outcome-performance/:outcomeId\", requireAuth, async (req, res) => {\n    try {\n      const performance = await storage.getStudentPerformanceByOutcome(req.params.outcomeId);\n      res.json(performance);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch outcome performance\" });\n    }\n  });\n\n  // Student Onboarding routes\n  app.get(\"/api/student/onboarding\", requireRole([\"student\"]), async (req, res) => {\n    try {\n      const onboarding = await storage.getStudentOnboarding(req.user!.id);\n      res.json(onboarding);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch onboarding data\" });\n    }\n  });\n\n  app.post(\"/api/student/onboarding\", requireRole([\"student\"]), async (req, res) => {\n    try {\n      console.log(\"Onboarding request body:\", JSON.stringify(req.body, null, 2));\n      const parsed = insertStudentOnboardingSchema.parse(req.body);\n      console.log(\"Validation passed, parsed data:\", JSON.stringify(parsed, null, 2));\n      \n      // Check if onboarding data already exists for this student\n      const existingOnboarding = await storage.getStudentOnboarding(req.user!.id);\n      \n      let onboarding;\n      if (existingOnboarding) {\n        // Update existing onboarding data\n        console.log('Updating existing onboarding data for student:', req.user!.id);\n        onboarding = await storage.updateStudentOnboarding(req.user!.id, parsed);\n      } else {\n        // Create new onboarding data\n        console.log('Creating new onboarding data for student:', req.user!.id);\n        onboarding = await storage.createStudentOnboarding({\n          ...parsed,\n          studentId: req.user!.id,\n        });\n      }\n      \n      res.status(existingOnboarding ? 200 : 201).json(onboarding);\n    } catch (error) {\n      console.error(\"Student onboarding error:\", error);\n      if (error instanceof Error) {\n        console.error(\"Error details:\", error.message);\n      }\n      res.status(400).json({ message: \"Invalid onboarding data\" });\n    }\n  });\n\n  app.put(\"/api/student/onboarding\", requireRole([\"student\"]), async (req, res) => {\n    try {\n      const parsed = insertStudentOnboardingSchema.partial().parse(req.body);\n      const onboarding = await storage.updateStudentOnboarding(req.user!.id, parsed);\n      if (!onboarding) {\n        return res.status(404).json({ message: \"Onboarding data not found\" });\n      }\n      res.json(onboarding);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid onboarding data\" });\n    }\n  });\n\n  // Student Mascot routes\n  app.get(\"/api/student/mascot\", requireRole([\"student\"]), async (req, res) => {\n    try {\n      const mascot = await storage.getStudentMascot(req.user!.id);\n      res.json(mascot);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch mascot data\" });\n    }\n  });\n\n  app.post(\"/api/student/mascot\", requireRole([\"student\"]), async (req, res) => {\n    try {\n      const parsed = insertStudentMascotSchema.parse(req.body);\n      \n      // Check if mascot data already exists for this student\n      const existingMascot = await storage.getStudentMascot(req.user!.id);\n      \n      let mascot;\n      if (existingMascot) {\n        // Update existing mascot data\n        console.log('Updating existing mascot data for student:', req.user!.id);\n        mascot = await storage.updateStudentMascot(req.user!.id, parsed);\n      } else {\n        // Create new mascot data\n        console.log('Creating new mascot data for student:', req.user!.id);\n        mascot = await storage.createStudentMascot({\n          ...parsed,\n          studentId: req.user!.id,\n        });\n      }\n      \n      res.status(existingMascot ? 200 : 201).json(mascot);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid mascot data\" });\n    }\n  });\n\n  app.put(\"/api/student/mascot\", requireRole([\"student\"]), async (req, res) => {\n    try {\n      const parsed = insertStudentMascotSchema.partial().parse(req.body);\n      const mascot = await storage.updateStudentMascot(req.user!.id, parsed);\n      if (!mascot) {\n        return res.status(404).json({ message: \"Mascot data not found\" });\n      }\n      res.json(mascot);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid mascot data\" });\n    }\n  });\n\n  // Study Streaks routes\n  app.get(\"/api/student/streaks\", requireRole([\"student\"]), async (req, res) => {\n    try {\n      const streaks = await storage.getStudyStreaks(req.user!.id);\n      res.json(streaks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch streak data\" });\n    }\n  });\n\n  app.post(\"/api/student/streaks\", requireRole([\"student\"]), async (req, res) => {\n    try {\n      const parsed = insertStudyStreaksSchema.parse(req.body);\n      const streaks = await storage.createStudyStreaks({\n        ...parsed,\n        studentId: req.user!.id,\n      });\n      res.json(streaks);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid streak data\" });\n    }\n  });\n\n  app.put(\"/api/student/streaks\", requireRole([\"student\"]), async (req, res) => {\n    try {\n      const parsed = insertStudyStreaksSchema.partial().parse(req.body);\n      const streaks = await storage.updateStudyStreaks(req.user!.id, parsed);\n      if (!streaks) {\n        return res.status(404).json({ message: \"Streak data not found\" });\n      }\n      res.json(streaks);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid streak data\" });\n    }\n  });\n\n  // Study Buddy Interactions routes\n  app.get(\"/api/student/buddy-interactions\", requireRole([\"student\"]), async (req, res) => {\n    try {\n      const interactions = await storage.getStudyBuddyInteractions(req.user!.id);\n      res.json(interactions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch interactions\" });\n    }\n  });\n\n  app.get(\"/api/student/buddy-interactions/unread\", requireRole([\"student\"]), async (req, res) => {\n    try {\n      const interactions = await storage.getUnreadInteractions(req.user!.id);\n      res.json(interactions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch unread interactions\" });\n    }\n  });\n\n  app.post(\"/api/student/buddy-interactions\", requireRole([\"student\"]), async (req, res) => {\n    try {\n      const parsed = insertStudyBuddyInteractionsSchema.parse(req.body);\n      const interaction = await storage.createStudyBuddyInteraction({\n        ...parsed,\n        studentId: req.user!.id,\n      });\n      res.json(interaction);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid interaction data\" });\n    }\n  });\n\n  app.put(\"/api/student/buddy-interactions/:id/read\", requireRole([\"student\"]), async (req, res) => {\n    try {\n      const interaction = await storage.markInteractionAsRead(req.params.id);\n      if (!interaction) {\n        return res.status(404).json({ message: \"Interaction not found\" });\n      }\n      res.json(interaction);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark interaction as read\" });\n    }\n  });\n\n  // Academic Alerts routes\n  app.get(\"/api/alerts\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      let alerts;\n\n      // Role-based alert access\n      if (currentUser.role === \"admin\") {\n        alerts = await storage.getAcademicAlerts();\n      } else if (currentUser.role === \"coordinator\" || currentUser.role === \"teacher\") {\n        alerts = await storage.getAlertsByAssignedUser(currentUser.id);\n      } else {\n        alerts = await storage.getAlertsByStudent(currentUser.id);\n      }\n\n      res.json(alerts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch alerts\" });\n    }\n  });\n\n  app.get(\"/api/alerts/status/:status\", requireAuth, async (req, res) => {\n    try {\n      const status = req.params.status as AlertStatus;\n      const alerts = await storage.getAlertsByStatus(status);\n      res.json(alerts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch alerts by status\" });\n    }\n  });\n\n  app.get(\"/api/alerts/type/:type\", requireAuth, async (req, res) => {\n    try {\n      const type = req.params.type as AlertType;\n      const alerts = await storage.getAlertsByType(type);\n      res.json(alerts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch alerts by type\" });\n    }\n  });\n\n  app.post(\"/api/alerts\", requireRole([\"admin\", \"coordinator\", \"teacher\"]), async (req, res) => {\n    try {\n      const parsed = insertAcademicAlertsSchema.parse(req.body);\n      const alert = await storage.createAcademicAlert({\n        ...parsed,\n        triggeredBy: req.user!.id,\n      });\n      \n      // Create notifications for relevant users\n      const notificationTargets = await getAlertNotificationTargets(alert, req.user!);\n      const createdNotifications = [];\n      \n      for (const targetUserId of notificationTargets) {\n        const notification = await storage.createAlertNotification({\n          alertId: alert.id,\n          userId: targetUserId,\n          notificationType: 'in_app',\n        });\n        createdNotifications.push(notification);\n      }\n\n      // Broadcast real-time notification\n      if (typeof (global as any).broadcastNotification === 'function') {\n        (global as any).broadcastNotification(notificationTargets, {\n          id: alert.id,\n          type: 'new_alert',\n          title: alert.title,\n          message: alert.message,\n          priority: alert.priority,\n          alertType: alert.alertType,\n          createdAt: alert.createdAt,\n        });\n      }\n\n      res.json(alert);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid alert data\" });\n    }\n  });\n\n  app.put(\"/api/alerts/:id\", requireAuth, async (req, res) => {\n    try {\n      const alertId = req.params.id;\n      const updates = req.body;\n      const alert = await storage.updateAcademicAlert(alertId, updates);\n      \n      if (!alert) {\n        return res.status(404).json({ message: \"Alert not found\" });\n      }\n      \n      res.json(alert);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update alert\" });\n    }\n  });\n\n  app.put(\"/api/alerts/:id/acknowledge\", requireAuth, async (req, res) => {\n    try {\n      const alertId = req.params.id;\n      const alert = await storage.acknowledgeAlert(alertId, req.user!.id);\n      \n      if (!alert) {\n        return res.status(404).json({ message: \"Alert not found\" });\n      }\n      \n      res.json(alert);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to acknowledge alert\" });\n    }\n  });\n\n  app.put(\"/api/alerts/:id/resolve\", requireAuth, async (req, res) => {\n    try {\n      const alertId = req.params.id;\n      const { resolutionNotes } = req.body;\n      const alert = await storage.resolveAlert(alertId, req.user!.id, resolutionNotes);\n      \n      if (!alert) {\n        return res.status(404).json({ message: \"Alert not found\" });\n      }\n      \n      res.json(alert);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to resolve alert\" });\n    }\n  });\n\n  // Unified Notifications API with role-based access control\n  app.get(\"/api/notifications\", requireAuth, async (req, res) => {\n    try {\n      const { unread, type, priority } = req.query;\n      const userId = req.user!.id;\n      const userRole = req.user!.role;\n      \n      // Get notifications with role-based filtering\n      const notifications = await storage.getNotifications(userId, { \n        unread: unread === 'true',\n        type: type as string,\n        priority: priority as string\n      });\n      \n      res.json(notifications);\n    } catch (error) {\n      console.error('Failed to fetch notifications:', error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.get(\"/api/notifications/unread\", requireAuth, async (req, res) => {\n    try {\n      const notifications = await storage.getUnreadNotifications(req.user!.id);\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch unread notifications\" });\n    }\n  });\n\n  app.put(\"/api/notifications/:id/read\", requireAuth, async (req, res) => {\n    try {\n      const notificationId = req.params.id;\n      const notification = await storage.markNotificationAsRead(notificationId);\n      \n      if (!notification) {\n        return res.status(404).json({ message: \"Notification not found\" });\n      }\n      \n      res.json(notification);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.put(\"/api/notifications/mark-all-read\", requireAuth, async (req, res) => {\n    try {\n      await storage.markAllNotificationsAsRead(req.user!.id);\n      res.json({ message: \"All notifications marked as read\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n  // Helper function to determine notification targets based on alert and user role\n  async function getAlertNotificationTargets(alert: any, triggeredBy: any): Promise<string[]> {\n    const targets: string[] = [];\n    \n    // Always notify the student involved\n    targets.push(alert.studentId);\n    \n    // Notify assigned user if specified\n    if (alert.assignedTo) {\n      targets.push(alert.assignedTo);\n    }\n    \n    // Role-based notifications\n    switch (triggeredBy.role) {\n      case \"student\":\n        // When student needs help, notify teachers and coordinators\n        const teachersAndCoords = await storage.getUsersByRole(\"teacher\");\n        const coordinators = await storage.getUsersByRole(\"coordinator\");\n        targets.push(...teachersAndCoords.map(u => u.id));\n        targets.push(...coordinators.map(u => u.id));\n        break;\n      \n      case \"teacher\":\n        // When teacher creates alert, notify coordinators and admins\n        const coords = await storage.getUsersByRole(\"coordinator\");\n        const admins = await storage.getUsersByRole(\"admin\");\n        targets.push(...coords.map(u => u.id));\n        targets.push(...admins.map(u => u.id));\n        break;\n      \n      case \"coordinator\":\n        // When coordinator creates alert, notify admins\n        const adminUsers = await storage.getUsersByRole(\"admin\");\n        targets.push(...adminUsers.map(u => u.id));\n        break;\n    }\n    \n    // Remove duplicates and the person who triggered the alert\n    return Array.from(new Set(targets)).filter(id => id !== triggeredBy.id);\n  }\n\n  const httpServer = createServer(app);\n  \n  // WebSocket server for real-time notifications with session-based authentication\n  const wss = new WebSocketServer({ noServer: true });\n  \n  // Store active WebSocket connections with user info and role-based channels\n  const activeConnections = new Map<string, { ws: WebSocket, userId: string, userRole: string, channels: string[] }>();\n  \n  // Role-based channel management\n  const roleChannels = new Map<string, Set<string>>(); // channel -> set of connectionIds\n  const userChannels = new Map<string, Set<string>>(); // userId -> set of connectionIds\n  \n  // Handle WebSocket upgrade with session-based authentication\n  httpServer.on('upgrade', (request, socket, head) => {\n    const url = new URL(request.url!, 'http://localhost');\n    \n    // Only handle our WebSocket path\n    if (url.pathname !== '/ws') {\n      socket.destroy();\n      return;\n    }\n    \n    console.log('WebSocket upgrade requested - checking session authentication');\n    \n    // Parse session from cookie\n    sessionParser(request as any, {} as any, () => {\n      const session = (request as any).session;\n      const user = session?.passport?.user;\n      \n      if (!user) {\n        console.log('WebSocket authentication failed - no valid session');\n        socket.write('HTTP/1.1 401 Unauthorized\\r\\n\\r\\n');\n        socket.destroy();\n        return;\n      }\n      \n      console.log(`WebSocket authentication successful for user: ${user.id} (${user.role})`);\n      wss.handleUpgrade(request, socket, head, (ws) => {\n        wss.emit('connection', ws, request, user);\n      });\n    });\n  });\n  \n  wss.on('connection', async (ws, req, user) => {\n    console.log(`WebSocket connection established for user: ${user.id} (${user.role})`);\n    \n    const socketId = Date.now().toString() + '-' + user.id;\n    const channels = [\n      `user:${user.id}`,\n      `role:${user.role}`\n    ];\n    \n    // Add program/course specific channels based on role\n    if (user.role === 'coordinator') {\n      // Get coordinator's programs and add program channels\n      try {\n        const programs = await storage.getProgramsByCoordinator(user.id);\n        programs.forEach(program => {\n          channels.push(`program:${program.id}`);\n        });\n      } catch (error) {\n        console.error('Error fetching coordinator programs:', error);\n      }\n    } else if (user.role === 'teacher') {\n      // Get teacher's courses and add course channels\n      try {\n        const courses = await storage.getCoursesByTeacher(user.id);\n        courses.forEach(course => {\n          channels.push(`course:${course.id}`);\n          if (course.programId) {\n            channels.push(`program:${course.programId}`);\n          }\n        });\n      } catch (error) {\n        console.error('Error fetching teacher courses:', error);\n      }\n    }\n    \n    // Store connection with role-based channels\n    activeConnections.set(socketId, { \n      ws, \n      userId: user.id, \n      userRole: user.role, \n      channels: channels \n    });\n    \n    // Register connection to role-based channel maps\n    channels.forEach(channel => {\n      if (!roleChannels.has(channel)) {\n        roleChannels.set(channel, new Set());\n      }\n      roleChannels.get(channel)!.add(socketId);\n    });\n    \n    // Send authentication confirmation with channel info\n    ws.send(JSON.stringify({\n      type: 'auth_success',\n      socketId,\n      userId: user.id,\n      userRole: user.role,\n      channels: channels,\n      message: 'WebSocket connected successfully'\n    }));\n    \n    console.log(`WebSocket authenticated for ${user.role}: ${user.id} with channels: ${channels.join(', ')}`);\n    \n    // Handle incoming messages\n    ws.on('message', async (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'ack_notification') {\n          // Client acknowledges receiving a notification\n          const notificationId = message.notificationId;\n          if (notificationId) {\n            await storage.markNotificationAsDelivered(notificationId);\n          }\n        }\n        \n        if (message.type === 'ping') {\n          // Handle ping-pong for connection keep-alive\n          ws.send(JSON.stringify({ type: 'pong' }));\n        }\n        \n        if (message.type === 'subscribe_channel') {\n          // Allow dynamic channel subscription based on role permissions\n          const channel = message.channel;\n          if (isChannelAllowedForUser(channel, user)) {\n            if (!roleChannels.has(channel)) {\n              roleChannels.set(channel, new Set());\n            }\n            roleChannels.get(channel)!.add(socketId);\n            \n            ws.send(JSON.stringify({\n              type: 'channel_subscribed',\n              channel\n            }));\n          }\n        }\n        \n      } catch (error) {\n        console.error('WebSocket message error:', error);\n        ws.send(JSON.stringify({\n          type: 'error',\n          message: 'Invalid message format'\n        }));\n      }\n    });\n    \n    ws.on('close', async () => {\n      // Remove connection and clean up channels\n      const entries = Array.from(activeConnections.entries());\n      for (const [socketId, connection] of entries) {\n        if (connection.ws === ws) {\n          // Remove from all role channels\n          connection.channels.forEach(channel => {\n            const channelConnections = roleChannels.get(channel);\n            if (channelConnections) {\n              channelConnections.delete(socketId);\n              if (channelConnections.size === 0) {\n                roleChannels.delete(channel);\n              }\n            }\n          });\n          \n          // Remove from active connections\n          activeConnections.delete(socketId);\n          console.log(`WebSocket disconnected: ${connection.userId} (${connection.userRole})`);\n          break;\n        }\n      }\n    });\n  });\n  \n  // Helper function to check if user can access a specific channel\n  function isChannelAllowedForUser(channel: string, user: any): boolean {\n    const [channelType, channelId] = channel.split(':');\n    \n    switch (channelType) {\n      case 'user':\n        return channelId === user.id;\n      case 'role':\n        return channelId === user.role;\n      case 'program':\n        // Check if user has access to this program\n        return user.role === 'admin' || user.role === 'coordinator';\n      case 'course':\n        // Check if user has access to this course\n        return user.role === 'admin' || user.role === 'coordinator' || user.role === 'teacher';\n      default:\n        return false;\n    }\n  }\n  \n  // Enhanced notification broadcasting with role-based channels\n  function broadcastNotification(notification: any, channels: string[] = []) {\n    const message = JSON.stringify({\n      type: 'notification',\n      data: notification\n    });\n    \n    const targetConnections = new Set<string>();\n    \n    // Add connections from specified channels\n    channels.forEach(channel => {\n      const channelConnections = roleChannels.get(channel);\n      if (channelConnections) {\n        channelConnections.forEach(connectionId => {\n          targetConnections.add(connectionId);\n        });\n      }\n    });\n    \n    // If no specific channels, broadcast to user's personal channel\n    if (channels.length === 0 && notification.userId) {\n      const userChannel = roleChannels.get(`user:${notification.userId}`);\n      if (userChannel) {\n        userChannel.forEach(connectionId => {\n          targetConnections.add(connectionId);\n        });\n      }\n    }\n    \n    // Send to all target connections\n    targetConnections.forEach(connectionId => {\n      const connection = activeConnections.get(connectionId);\n      if (connection && connection.ws.readyState === WebSocket.OPEN) {\n        connection.ws.send(message);\n      }\n    });\n    \n    console.log(`Notification broadcast to ${targetConnections.size} connections across ${channels.length} channels`);\n  }\n  \n  function broadcastAlert(alert: any) {\n    const message = JSON.stringify({\n      type: 'alert',\n      data: alert\n    });\n    \n    // Determine broadcast channels based on alert type and scope\n    const channels: string[] = [];\n    \n    // Always add to role-based channels\n    channels.push('role:admin', 'role:coordinator', 'role:teacher');\n    \n    // Add specific program/course channels if available\n    if (alert.programId) {\n      channels.push(`program:${alert.programId}`);\n    }\n    if (alert.courseId) {\n      channels.push(`course:${alert.courseId}`);\n    }\n    \n    const targetConnections = new Set<string>();\n    channels.forEach(channel => {\n      const channelConnections = roleChannels.get(channel);\n      if (channelConnections) {\n        channelConnections.forEach(connectionId => {\n          targetConnections.add(connectionId);\n        });\n      }\n    });\n    \n    targetConnections.forEach(connectionId => {\n      const connection = activeConnections.get(connectionId);\n      if (connection && connection.ws.readyState === WebSocket.OPEN) {\n        connection.ws.send(message);\n      }\n    });\n    \n    console.log(`Alert broadcast to ${targetConnections.size} connections`);\n  }\n  \n  // Helper function to generate unique socket IDs\n  function generateSocketId(): string {\n    return `ws_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n  \n  // Cleanup inactive sessions periodically\n  setInterval(async () => {\n    await storage.cleanupInactiveSessions();\n  }, 5 * 60 * 1000); // Every 5 minutes\n  \n  // Export broadcast functions for use in other modules\n  (global as any).broadcastNotification = broadcastNotification;\n  (global as any).broadcastAlert = broadcastAlert;\n  \n  return httpServer;\n}\n","size_bytes":52500},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { storage } from \"./storage\";\nimport { users, programs, courses, learningOutcomes, studentProgress, badgeTemplates } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport { scrypt, randomBytes } from \"crypto\";\nimport { promisify } from \"util\";\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nexport async function seedDatabase() {\n  console.log(\"Starting database seed...\");\n  \n  try {\n    // Check if data already exists\n    const existingUsers = await db.select().from(users).limit(1);\n    if (existingUsers.length > 0) {\n      console.log(\"Database already seeded. Skipping seed process.\");\n      return;\n    }\n\n    console.log(\"Creating seed users...\");\n    \n    // Create Admin User\n    const adminUser = await storage.createUser({\n      username: \"admin\",\n      password: await hashPassword(\"admin123\"),\n      email: \"admin@edeviser.com\",\n      firstName: \"Admin\",\n      lastName: \"User\",\n      role: \"admin\",\n      profileImage: null\n    });\n\n    // Create Coordinator User\n    const coordinatorUser = await storage.createUser({\n      username: \"coordinator\",\n      password: await hashPassword(\"coord123\"),\n      email: \"coordinator@edeviser.com\",\n      firstName: \"Program\",\n      lastName: \"Coordinator\",\n      role: \"coordinator\",\n      profileImage: null\n    });\n\n    // Create Teacher User\n    const teacherUser = await storage.createUser({\n      username: \"teacher\",\n      password: await hashPassword(\"teacher123\"),\n      email: \"teacher@edeviser.com\",\n      firstName: \"Course\",\n      lastName: \"Teacher\",\n      role: \"teacher\",\n      profileImage: null\n    });\n\n    // Create Student User\n    const studentUser = await storage.createUser({\n      username: \"student\",\n      password: await hashPassword(\"student123\"),\n      email: \"student@edeviser.com\",\n      firstName: \"John\",\n      lastName: \"Student\",\n      role: \"student\",\n      profileImage: null\n    });\n\n    console.log(\"Creating programs...\");\n\n    // Create a Program\n    const program = await storage.createProgram({\n      name: \"Bachelor of Science in Computer Science\",\n      description: \"A comprehensive program focused on software development and computer systems\",\n      code: \"BSCS2024\",\n      level: \"Bachelor's\",\n      coordinatorId: coordinatorUser.id,\n      isActive: true\n    });\n\n    console.log(\"Creating courses...\");\n\n    // Create Courses\n    const course1 = await storage.createCourse({\n      name: \"Programming Fundamentals\",\n      description: \"Introduction to programming concepts and software development\",\n      code: \"CS101\",\n      credits: 3,\n      programId: program.id,\n      teacherId: teacherUser.id,\n      isActive: true\n    });\n\n    const course2 = await storage.createCourse({\n      name: \"Data Structures and Algorithms\",\n      description: \"Study of fundamental data structures and algorithmic problem solving\",\n      code: \"CS201\",\n      credits: 4,\n      programId: program.id,\n      teacherId: teacherUser.id,\n      isActive: true\n    });\n\n    console.log(\"Creating learning outcomes...\");\n\n    // Create Learning Outcomes (ILOs)\n    const ilo1 = await storage.createLearningOutcome({\n      code: \"ILO-1\",\n      title: \"Problem Solving and Critical Thinking\",\n      description: \"Students will demonstrate advanced problem-solving and critical thinking skills\",\n      type: \"ILO\",\n      bloomsLevel: \"analyze\",\n      programId: program.id,\n      ownerId: coordinatorUser.id,\n      lastEditedBy: coordinatorUser.id,\n      version: 1,\n      isActive: true\n    });\n\n    const ilo2 = await storage.createLearningOutcome({\n      code: \"ILO-2\", \n      title: \"Technical Competency\",\n      description: \"Students will demonstrate technical competency in software development\",\n      type: \"ILO\",\n      bloomsLevel: \"apply\",\n      programId: program.id,\n      ownerId: coordinatorUser.id,\n      lastEditedBy: coordinatorUser.id,\n      version: 1,\n      isActive: true\n    });\n\n    // Create PLOs\n    const plo1 = await storage.createLearningOutcome({\n      code: \"PLO-1\",\n      title: \"Programming Proficiency\",\n      description: \"Students will demonstrate proficiency in multiple programming languages\",\n      type: \"PLO\",\n      bloomsLevel: \"create\",\n      programId: program.id,\n      ownerId: coordinatorUser.id,\n      lastEditedBy: coordinatorUser.id,\n      version: 1,\n      isActive: true\n    });\n\n    // Create CLOs\n    const clo1 = await storage.createLearningOutcome({\n      code: \"CLO-1\",\n      title: \"Basic Programming Concepts\",\n      description: \"Students will understand and apply basic programming concepts\",\n      type: \"CLO\",\n      bloomsLevel: \"understand\",\n      programId: program.id,\n      courseId: course1.id,\n      ownerId: teacherUser.id,\n      lastEditedBy: teacherUser.id,\n      version: 1,\n      isActive: true\n    });\n\n    const clo2 = await storage.createLearningOutcome({\n      code: \"CLO-2\",\n      title: \"Algorithm Implementation\",\n      description: \"Students will implement and analyze fundamental algorithms\",\n      type: \"CLO\",\n      bloomsLevel: \"evaluate\",\n      programId: program.id,\n      courseId: course2.id,\n      ownerId: teacherUser.id,\n      lastEditedBy: teacherUser.id,\n      version: 1,\n      isActive: true\n    });\n\n    console.log(\"Creating student progress...\");\n\n    // Create Student Progress for gamification\n    await storage.createStudentProgress(studentUser.id);\n\n    console.log(\"Creating badge templates...\");\n\n    // Create Badge Templates\n    await storage.createBadgeTemplate({\n      name: \"First Steps\",\n      description: \"Complete your first assignment\",\n      type: \"achievement\",\n      iconUrl: null,\n      requirements: { type: \"assignment_completion\", count: 1 },\n      xpReward: 50,\n      isActive: true\n    });\n\n    await storage.createBadgeTemplate({\n      name: \"Programming Master\",\n      description: \"Complete 5 programming assignments\",\n      type: \"mastery\",\n      iconUrl: null,\n      requirements: { type: \"assignment_completion\", count: 5, category: \"programming\" },\n      xpReward: 200,\n      isActive: true\n    });\n\n    await storage.createBadgeTemplate({\n      name: \"Week Warrior\",\n      description: \"Maintain a 7-day streak\",\n      type: \"streak\",\n      iconUrl: null,\n      requirements: { type: \"daily_streak\", count: 7 },\n      xpReward: 100,\n      isActive: true\n    });\n\n    console.log(\"Database seeded successfully!\");\n    console.log(\"Test accounts created:\");\n    console.log(\"Admin: admin / admin123\");\n    console.log(\"Coordinator: coordinator / coord123\");\n    console.log(\"Teacher: teacher / teacher123\");\n    console.log(\"Student: student / student123\");\n\n  } catch (error) {\n    console.error(\"Failed to seed database:\", error);\n    throw error;\n  }\n}\n\n// Run seed if this file is executed directly\nif (process.argv[1]?.endsWith('seed.ts') || process.argv[1]?.endsWith('seed.js')) {\n  seedDatabase().then(() => {\n    console.log(\"Seed completed\");\n    process.exit(0);\n  }).catch((error) => {\n    console.error(\"Seed failed:\", error);\n    process.exit(1);\n  });\n}","size_bytes":7224},"server/storage.ts":{"content":"import { \n  users, programs, courses, learningOutcomes, outcomeMappings, assignments, \n  studentSubmissions, studentPerformance, studentProgress, badgeTemplates, \n  studentBadges, learningModules, studentModuleProgress, rubricCriteria,\n  studentOnboarding, studentMascot, studyStreaks, studyBuddyInteractions,\n  academicAlerts, alertNotifications, userSessions,\n  type User, type InsertUser, type Program, type InsertProgram, type Course, \n  type InsertCourse, type LearningOutcome, type InsertLearningOutcome,\n  type OutcomeMapping, type InsertOutcomeMapping, type Assignment, type InsertAssignment,\n  type StudentSubmission, type InsertStudentSubmission, type StudentProgress,\n  type BadgeTemplate, type InsertBadgeTemplate, type LearningModule, \n  type InsertLearningModule, type Role, type StudentOnboarding, type InsertStudentOnboarding,\n  type StudentMascot, type InsertStudentMascot, type StudyStreaks, type InsertStudyStreaks,\n  type StudyBuddyInteractions, type InsertStudyBuddyInteractions,\n  type AcademicAlerts, type InsertAcademicAlerts, type AlertNotifications, \n  type InsertAlertNotifications, type UserSessions, type InsertUserSessions,\n  type AlertType, type AlertPriority, type AlertStatus\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, or, desc, asc, count, avg, sum, inArray } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\nconst PostgresSessionStore = connectPgSimple(session);\n\nexport interface IStorage {\n  sessionStore: session.Store;\n  \n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  getUsersByRole(role: Role): Promise<User[]>;\n\n  // Program operations\n  getPrograms(): Promise<Program[]>;\n  getProgram(id: string): Promise<Program | undefined>;\n  createProgram(program: InsertProgram): Promise<Program>;\n  updateProgram(id: string, updates: Partial<Program>): Promise<Program | undefined>;\n  getProgramsByCoordinator(coordinatorId: string): Promise<Program[]>;\n\n  // Course operations\n  getCourses(): Promise<Course[]>;\n  getCourse(id: string): Promise<Course | undefined>;\n  createCourse(course: InsertCourse): Promise<Course>;\n  updateCourse(id: string, updates: Partial<Course>): Promise<Course | undefined>;\n  getCoursesByProgram(programId: string): Promise<Course[]>;\n  getCoursesByTeacher(teacherId: string): Promise<Course[]>;\n\n  // Learning Outcome operations\n  getLearningOutcomes(): Promise<LearningOutcome[]>;\n  getLearningOutcome(id: string): Promise<LearningOutcome | undefined>;\n  createLearningOutcome(outcome: InsertLearningOutcome): Promise<LearningOutcome>;\n  updateLearningOutcome(id: string, updates: Partial<LearningOutcome>): Promise<LearningOutcome | undefined>;\n  getLearningOutcomesByType(type: string): Promise<LearningOutcome[]>;\n  getLearningOutcomesByProgram(programId: string): Promise<LearningOutcome[]>;\n  getLearningOutcomesByCourse(courseId: string): Promise<LearningOutcome[]>;\n\n  // Outcome Mapping operations\n  getOutcomeMappings(): Promise<OutcomeMapping[]>;\n  createOutcomeMapping(mapping: InsertOutcomeMapping): Promise<OutcomeMapping>;\n  getOutcomeMappingsBySource(sourceId: string): Promise<OutcomeMapping[]>;\n  getOutcomeMappingsByTarget(targetId: string): Promise<OutcomeMapping[]>;\n\n  // Assignment operations\n  getAssignments(): Promise<Assignment[]>;\n  getAssignment(id: string): Promise<Assignment | undefined>;\n  createAssignment(assignment: InsertAssignment): Promise<Assignment>;\n  updateAssignment(id: string, updates: Partial<Assignment>): Promise<Assignment | undefined>;\n  getAssignmentsByCourse(courseId: string): Promise<Assignment[]>;\n\n  // Student Submission operations\n  getStudentSubmissions(): Promise<StudentSubmission[]>;\n  getStudentSubmission(id: string): Promise<StudentSubmission | undefined>;\n  createStudentSubmission(submission: InsertStudentSubmission): Promise<StudentSubmission>;\n  updateStudentSubmission(id: string, updates: Partial<StudentSubmission>): Promise<StudentSubmission | undefined>;\n  getSubmissionsByStudent(studentId: string): Promise<StudentSubmission[]>;\n  getSubmissionsByAssignment(assignmentId: string): Promise<StudentSubmission[]>;\n\n  // Student Progress operations\n  getStudentProgress(studentId: string): Promise<StudentProgress | undefined>;\n  createStudentProgress(studentId: string): Promise<StudentProgress>;\n  updateStudentProgress(studentId: string, updates: Partial<StudentProgress>): Promise<StudentProgress | undefined>;\n\n  // Badge operations\n  getBadgeTemplates(): Promise<BadgeTemplate[]>;\n  getBadgeTemplate(id: string): Promise<BadgeTemplate | undefined>;\n  createBadgeTemplate(template: InsertBadgeTemplate): Promise<BadgeTemplate>;\n\n  // Learning Module operations\n  getLearningModules(): Promise<LearningModule[]>;\n  getLearningModule(id: string): Promise<LearningModule | undefined>;\n  createLearningModule(module: InsertLearningModule): Promise<LearningModule>;\n  getLearningModulesByCourse(courseId: string): Promise<LearningModule[]>;\n\n  // Analytics operations\n  getStudentPerformanceByOutcome(outcomeId: string): Promise<any[]>;\n  getProgramAnalytics(programId: string): Promise<any>;\n  getBloomsTaxonomyDistribution(programId?: string): Promise<any[]>;\n\n  // Student Onboarding operations\n  getStudentOnboarding(studentId: string): Promise<StudentOnboarding | undefined>;\n  createStudentOnboarding(data: InsertStudentOnboarding & { studentId: string }): Promise<StudentOnboarding>;\n  updateStudentOnboarding(studentId: string, updates: Partial<StudentOnboarding>): Promise<StudentOnboarding | undefined>;\n\n  // Student Mascot operations\n  getStudentMascot(studentId: string): Promise<StudentMascot | undefined>;\n  createStudentMascot(data: InsertStudentMascot & { studentId: string }): Promise<StudentMascot>;\n  updateStudentMascot(studentId: string, updates: Partial<StudentMascot>): Promise<StudentMascot | undefined>;\n\n  // Study Streaks operations\n  getStudyStreaks(studentId: string): Promise<StudyStreaks | undefined>;\n  createStudyStreaks(streaks: InsertStudyStreaks): Promise<StudyStreaks>;\n  updateStudyStreaks(studentId: string, updates: Partial<StudyStreaks>): Promise<StudyStreaks | undefined>;\n\n  // Study Buddy Interactions operations\n  getStudyBuddyInteractions(studentId: string): Promise<StudyBuddyInteractions[]>;\n  createStudyBuddyInteraction(interaction: InsertStudyBuddyInteractions): Promise<StudyBuddyInteractions>;\n  markInteractionAsRead(interactionId: string): Promise<StudyBuddyInteractions | undefined>;\n  getUnreadInteractions(studentId: string): Promise<StudyBuddyInteractions[]>;\n\n  // Academic Alerts operations\n  getAcademicAlerts(): Promise<AcademicAlerts[]>;\n  getAcademicAlert(id: string): Promise<AcademicAlerts | undefined>;\n  createAcademicAlert(alert: InsertAcademicAlerts): Promise<AcademicAlerts>;\n  updateAcademicAlert(id: string, updates: Partial<AcademicAlerts>): Promise<AcademicAlerts | undefined>;\n  getAlertsByStudent(studentId: string): Promise<AcademicAlerts[]>;\n  getAlertsByAssignedUser(userId: string): Promise<AcademicAlerts[]>;\n  getAlertsByStatus(status: AlertStatus): Promise<AcademicAlerts[]>;\n  getAlertsByType(type: AlertType): Promise<AcademicAlerts[]>;\n  acknowledgeAlert(alertId: string, userId: string): Promise<AcademicAlerts | undefined>;\n  resolveAlert(alertId: string, userId: string, resolutionNotes?: string): Promise<AcademicAlerts | undefined>;\n\n  // Unified Notification operations\n  getNotifications(userId: string, filters?: { unread?: boolean; type?: string; priority?: string }): Promise<AlertNotifications[]>;\n  createNotification(notification: InsertAlertNotifications): Promise<AlertNotifications>;\n  markNotificationAsRead(notificationId: string): Promise<AlertNotifications | undefined>;\n  markNotificationAsDelivered(notificationId: string): Promise<AlertNotifications | undefined>;\n  markAllNotificationsAsRead(userId: string): Promise<void>;\n  getUnreadNotifications(userId: string): Promise<AlertNotifications[]>;\n  getNotificationsByRole(userRole: string, scope?: { programId?: string; courseId?: string }): Promise<AlertNotifications[]>;\n\n  // User Sessions operations (for WebSocket management)\n  getUserSession(socketId: string): Promise<UserSessions | undefined>;\n  createUserSession(session: InsertUserSessions): Promise<UserSessions>;\n  updateUserSession(socketId: string, updates: Partial<UserSessions>): Promise<UserSessions | undefined>;\n  removeUserSession(socketId: string): Promise<void>;\n  getUserActiveSessions(userId: string): Promise<UserSessions[]>;\n  cleanupInactiveSessions(): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: session.Store;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    });\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(asc(users.createdAt));\n  }\n\n  async getUsersByRole(role: Role): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.role, role));\n  }\n\n  // Program operations\n  async getPrograms(): Promise<Program[]> {\n    return await db.select().from(programs).where(eq(programs.isActive, true));\n  }\n\n  async getProgram(id: string): Promise<Program | undefined> {\n    const [program] = await db.select().from(programs).where(eq(programs.id, id));\n    return program || undefined;\n  }\n\n  async createProgram(insertProgram: InsertProgram): Promise<Program> {\n    const [program] = await db\n      .insert(programs)\n      .values(insertProgram)\n      .returning();\n    return program;\n  }\n\n  async updateProgram(id: string, updates: Partial<Program>): Promise<Program | undefined> {\n    const [program] = await db\n      .update(programs)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(programs.id, id))\n      .returning();\n    return program || undefined;\n  }\n\n  async getProgramsByCoordinator(coordinatorId: string): Promise<Program[]> {\n    return await db\n      .select()\n      .from(programs)\n      .where(and(eq(programs.coordinatorId, coordinatorId), eq(programs.isActive, true)));\n  }\n\n  // Course operations\n  async getCourses(): Promise<Course[]> {\n    return await db.select().from(courses).where(eq(courses.isActive, true));\n  }\n\n  async getCourse(id: string): Promise<Course | undefined> {\n    const [course] = await db.select().from(courses).where(eq(courses.id, id));\n    return course || undefined;\n  }\n\n  async createCourse(insertCourse: InsertCourse): Promise<Course> {\n    const [course] = await db\n      .insert(courses)\n      .values(insertCourse)\n      .returning();\n    return course;\n  }\n\n  async updateCourse(id: string, updates: Partial<Course>): Promise<Course | undefined> {\n    const [course] = await db\n      .update(courses)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(courses.id, id))\n      .returning();\n    return course || undefined;\n  }\n\n  async getCoursesByProgram(programId: string): Promise<Course[]> {\n    return await db\n      .select()\n      .from(courses)\n      .where(and(eq(courses.programId, programId), eq(courses.isActive, true)));\n  }\n\n  async getCoursesByTeacher(teacherId: string): Promise<Course[]> {\n    return await db\n      .select()\n      .from(courses)\n      .where(and(eq(courses.teacherId, teacherId), eq(courses.isActive, true)));\n  }\n\n  // Learning Outcome operations\n  async getLearningOutcomes(): Promise<LearningOutcome[]> {\n    return await db.select().from(learningOutcomes).where(eq(learningOutcomes.isActive, true));\n  }\n\n  async getLearningOutcome(id: string): Promise<LearningOutcome | undefined> {\n    const [outcome] = await db.select().from(learningOutcomes).where(eq(learningOutcomes.id, id));\n    return outcome || undefined;\n  }\n\n  async createLearningOutcome(insertOutcome: InsertLearningOutcome): Promise<LearningOutcome> {\n    const [outcome] = await db\n      .insert(learningOutcomes)\n      .values(insertOutcome)\n      .returning();\n    return outcome;\n  }\n\n  async updateLearningOutcome(id: string, updates: Partial<LearningOutcome>): Promise<LearningOutcome | undefined> {\n    const [outcome] = await db\n      .update(learningOutcomes)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(learningOutcomes.id, id))\n      .returning();\n    return outcome || undefined;\n  }\n\n  async getLearningOutcomesByType(type: string): Promise<LearningOutcome[]> {\n    return await db\n      .select()\n      .from(learningOutcomes)\n      .where(and(eq(learningOutcomes.type, type as any), eq(learningOutcomes.isActive, true)));\n  }\n\n  async getLearningOutcomesByProgram(programId: string): Promise<LearningOutcome[]> {\n    return await db\n      .select()\n      .from(learningOutcomes)\n      .where(and(eq(learningOutcomes.programId, programId), eq(learningOutcomes.isActive, true)));\n  }\n\n  async getLearningOutcomesByCourse(courseId: string): Promise<LearningOutcome[]> {\n    return await db\n      .select()\n      .from(learningOutcomes)\n      .where(and(eq(learningOutcomes.courseId, courseId), eq(learningOutcomes.isActive, true)));\n  }\n\n  // Outcome Mapping operations\n  async getOutcomeMappings(): Promise<OutcomeMapping[]> {\n    return await db.select().from(outcomeMappings);\n  }\n\n  async createOutcomeMapping(insertMapping: InsertOutcomeMapping): Promise<OutcomeMapping> {\n    const [mapping] = await db\n      .insert(outcomeMappings)\n      .values(insertMapping)\n      .returning();\n    return mapping;\n  }\n\n  async getOutcomeMappingsBySource(sourceId: string): Promise<OutcomeMapping[]> {\n    return await db\n      .select()\n      .from(outcomeMappings)\n      .where(eq(outcomeMappings.sourceOutcomeId, sourceId));\n  }\n\n  async getOutcomeMappingsByTarget(targetId: string): Promise<OutcomeMapping[]> {\n    return await db\n      .select()\n      .from(outcomeMappings)\n      .where(eq(outcomeMappings.targetOutcomeId, targetId));\n  }\n\n  // Assignment operations\n  async getAssignments(): Promise<Assignment[]> {\n    return await db.select().from(assignments).where(eq(assignments.isActive, true));\n  }\n\n  async getAssignment(id: string): Promise<Assignment | undefined> {\n    const [assignment] = await db.select().from(assignments).where(eq(assignments.id, id));\n    return assignment || undefined;\n  }\n\n  async createAssignment(insertAssignment: InsertAssignment): Promise<Assignment> {\n    const [assignment] = await db\n      .insert(assignments)\n      .values(insertAssignment)\n      .returning();\n    return assignment;\n  }\n\n  async updateAssignment(id: string, updates: Partial<Assignment>): Promise<Assignment | undefined> {\n    const [assignment] = await db\n      .update(assignments)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(assignments.id, id))\n      .returning();\n    return assignment || undefined;\n  }\n\n  async getAssignmentsByCourse(courseId: string): Promise<Assignment[]> {\n    return await db\n      .select()\n      .from(assignments)\n      .where(and(eq(assignments.courseId, courseId), eq(assignments.isActive, true)));\n  }\n\n  // Student Submission operations\n  async getStudentSubmissions(): Promise<StudentSubmission[]> {\n    return await db.select().from(studentSubmissions);\n  }\n\n  async getStudentSubmission(id: string): Promise<StudentSubmission | undefined> {\n    const [submission] = await db.select().from(studentSubmissions).where(eq(studentSubmissions.id, id));\n    return submission || undefined;\n  }\n\n  async createStudentSubmission(insertSubmission: InsertStudentSubmission): Promise<StudentSubmission> {\n    const [submission] = await db\n      .insert(studentSubmissions)\n      .values(insertSubmission)\n      .returning();\n    return submission;\n  }\n\n  async updateStudentSubmission(id: string, updates: Partial<StudentSubmission>): Promise<StudentSubmission | undefined> {\n    const [submission] = await db\n      .update(studentSubmissions)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(studentSubmissions.id, id))\n      .returning();\n    return submission || undefined;\n  }\n\n  async getSubmissionsByStudent(studentId: string): Promise<StudentSubmission[]> {\n    return await db\n      .select()\n      .from(studentSubmissions)\n      .where(eq(studentSubmissions.studentId, studentId));\n  }\n\n  async getSubmissionsByAssignment(assignmentId: string): Promise<StudentSubmission[]> {\n    return await db\n      .select()\n      .from(studentSubmissions)\n      .where(eq(studentSubmissions.assignmentId, assignmentId));\n  }\n\n  // Student Progress operations\n  async getStudentProgress(studentId: string): Promise<StudentProgress | undefined> {\n    const [progress] = await db\n      .select()\n      .from(studentProgress)\n      .where(eq(studentProgress.studentId, studentId));\n    return progress || undefined;\n  }\n\n  async createStudentProgress(studentId: string): Promise<StudentProgress> {\n    const [progress] = await db\n      .insert(studentProgress)\n      .values({ studentId })\n      .returning();\n    return progress;\n  }\n\n  async updateStudentProgress(studentId: string, updates: Partial<StudentProgress>): Promise<StudentProgress | undefined> {\n    const [progress] = await db\n      .update(studentProgress)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(studentProgress.studentId, studentId))\n      .returning();\n    return progress || undefined;\n  }\n\n  // Badge operations\n  async getBadgeTemplates(): Promise<BadgeTemplate[]> {\n    return await db.select().from(badgeTemplates).where(eq(badgeTemplates.isActive, true));\n  }\n\n  async getBadgeTemplate(id: string): Promise<BadgeTemplate | undefined> {\n    const [template] = await db.select().from(badgeTemplates).where(eq(badgeTemplates.id, id));\n    return template || undefined;\n  }\n\n  async createBadgeTemplate(insertTemplate: InsertBadgeTemplate): Promise<BadgeTemplate> {\n    const [template] = await db\n      .insert(badgeTemplates)\n      .values(insertTemplate)\n      .returning();\n    return template;\n  }\n\n  // Learning Module operations\n  async getLearningModules(): Promise<LearningModule[]> {\n    return await db.select().from(learningModules);\n  }\n\n  async getLearningModule(id: string): Promise<LearningModule | undefined> {\n    const [module] = await db.select().from(learningModules).where(eq(learningModules.id, id));\n    return module || undefined;\n  }\n\n  async createLearningModule(insertModule: InsertLearningModule): Promise<LearningModule> {\n    const [module] = await db\n      .insert(learningModules)\n      .values(insertModule)\n      .returning();\n    return module;\n  }\n\n  async getLearningModulesByCourse(courseId: string): Promise<LearningModule[]> {\n    return await db\n      .select()\n      .from(learningModules)\n      .where(eq(learningModules.courseId, courseId))\n      .orderBy(asc(learningModules.order));\n  }\n\n  // Analytics operations\n  async getStudentPerformanceByOutcome(outcomeId: string): Promise<any[]> {\n    return await db\n      .select({\n        studentId: studentPerformance.studentId,\n        averageScore: studentPerformance.averageScore,\n        totalSubmissions: studentPerformance.totalSubmissions,\n      })\n      .from(studentPerformance)\n      .where(eq(studentPerformance.outcomeId, outcomeId));\n  }\n\n  async getProgramAnalytics(programId: string): Promise<any> {\n    const courseCount = await db\n      .select({ count: count() })\n      .from(courses)\n      .where(and(eq(courses.programId, programId), eq(courses.isActive, true)));\n\n    const outcomeCount = await db\n      .select({ count: count() })\n      .from(learningOutcomes)\n      .where(and(eq(learningOutcomes.programId, programId), eq(learningOutcomes.isActive, true)));\n\n    return {\n      totalCourses: courseCount[0]?.count || 0,\n      totalOutcomes: outcomeCount[0]?.count || 0,\n    };\n  }\n\n  async getBloomsTaxonomyDistribution(programId?: string): Promise<any[]> {\n    const whereConditions = [eq(learningOutcomes.isActive, true)];\n    if (programId) {\n      whereConditions.push(eq(learningOutcomes.programId, programId));\n    }\n\n    return await db\n      .select({\n        level: learningOutcomes.bloomsLevel,\n        count: count(),\n      })\n      .from(learningOutcomes)\n      .where(and(...whereConditions))\n      .groupBy(learningOutcomes.bloomsLevel);\n  }\n\n  // Student Onboarding implementations\n  async getStudentOnboarding(studentId: string): Promise<StudentOnboarding | undefined> {\n    const [onboarding] = await db\n      .select()\n      .from(studentOnboarding)\n      .where(eq(studentOnboarding.studentId, studentId));\n    return onboarding || undefined;\n  }\n\n  async createStudentOnboarding(data: InsertStudentOnboarding & { studentId: string }): Promise<StudentOnboarding> {\n    const [onboarding] = await db\n      .insert(studentOnboarding)\n      .values(data)\n      .returning();\n    return onboarding;\n  }\n\n  async updateStudentOnboarding(studentId: string, updates: Partial<StudentOnboarding>): Promise<StudentOnboarding | undefined> {\n    const [onboarding] = await db\n      .update(studentOnboarding)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(studentOnboarding.studentId, studentId))\n      .returning();\n    return onboarding || undefined;\n  }\n\n  // Student Mascot implementations\n  async getStudentMascot(studentId: string): Promise<StudentMascot | undefined> {\n    const [mascot] = await db\n      .select()\n      .from(studentMascot)\n      .where(eq(studentMascot.studentId, studentId));\n    return mascot || undefined;\n  }\n\n  async createStudentMascot(data: InsertStudentMascot & { studentId: string }): Promise<StudentMascot> {\n    const [mascot] = await db\n      .insert(studentMascot)\n      .values(data)\n      .returning();\n    return mascot;\n  }\n\n  async updateStudentMascot(studentId: string, updates: Partial<StudentMascot>): Promise<StudentMascot | undefined> {\n    const [mascot] = await db\n      .update(studentMascot)\n      .set(updates)\n      .where(eq(studentMascot.studentId, studentId))\n      .returning();\n    return mascot || undefined;\n  }\n\n  // Study Streaks implementations\n  async getStudyStreaks(studentId: string): Promise<StudyStreaks | undefined> {\n    const [streaks] = await db\n      .select()\n      .from(studyStreaks)\n      .where(eq(studyStreaks.studentId, studentId));\n    return streaks || undefined;\n  }\n\n  async createStudyStreaks(insertStreaks: InsertStudyStreaks): Promise<StudyStreaks> {\n    const [streaks] = await db\n      .insert(studyStreaks)\n      .values(insertStreaks)\n      .returning();\n    return streaks;\n  }\n\n  async updateStudyStreaks(studentId: string, updates: Partial<StudyStreaks>): Promise<StudyStreaks | undefined> {\n    const [streaks] = await db\n      .update(studyStreaks)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(studyStreaks.studentId, studentId))\n      .returning();\n    return streaks || undefined;\n  }\n\n  // Study Buddy Interactions implementations\n  async getStudyBuddyInteractions(studentId: string): Promise<StudyBuddyInteractions[]> {\n    const interactions = await db\n      .select()\n      .from(studyBuddyInteractions)\n      .where(eq(studyBuddyInteractions.studentId, studentId))\n      .orderBy(desc(studyBuddyInteractions.createdAt));\n    return interactions;\n  }\n\n  async createStudyBuddyInteraction(insertInteraction: InsertStudyBuddyInteractions): Promise<StudyBuddyInteractions> {\n    const [interaction] = await db\n      .insert(studyBuddyInteractions)\n      .values(insertInteraction)\n      .returning();\n    return interaction;\n  }\n\n  async markInteractionAsRead(interactionId: string): Promise<StudyBuddyInteractions | undefined> {\n    const [interaction] = await db\n      .update(studyBuddyInteractions)\n      .set({ isRead: true, readAt: new Date() })\n      .where(eq(studyBuddyInteractions.id, interactionId))\n      .returning();\n    return interaction || undefined;\n  }\n\n  async getUnreadInteractions(studentId: string): Promise<StudyBuddyInteractions[]> {\n    const interactions = await db\n      .select()\n      .from(studyBuddyInteractions)\n      .where(\n        and(\n          eq(studyBuddyInteractions.studentId, studentId),\n          eq(studyBuddyInteractions.isRead, false)\n        )\n      )\n      .orderBy(desc(studyBuddyInteractions.createdAt));\n    return interactions;\n  }\n\n  // Academic Alerts implementations\n  async getAcademicAlerts(): Promise<AcademicAlerts[]> {\n    const alerts = await db\n      .select()\n      .from(academicAlerts)\n      .orderBy(desc(academicAlerts.createdAt));\n    return alerts;\n  }\n\n  async getAcademicAlert(id: string): Promise<AcademicAlerts | undefined> {\n    const [alert] = await db\n      .select()\n      .from(academicAlerts)\n      .where(eq(academicAlerts.id, id));\n    return alert || undefined;\n  }\n\n  async createAcademicAlert(insertAlert: InsertAcademicAlerts): Promise<AcademicAlerts> {\n    const [alert] = await db\n      .insert(academicAlerts)\n      .values(insertAlert)\n      .returning();\n    return alert;\n  }\n\n  async updateAcademicAlert(id: string, updates: Partial<AcademicAlerts>): Promise<AcademicAlerts | undefined> {\n    const [alert] = await db\n      .update(academicAlerts)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(academicAlerts.id, id))\n      .returning();\n    return alert || undefined;\n  }\n\n  async getAlertsByStudent(studentId: string): Promise<AcademicAlerts[]> {\n    const alerts = await db\n      .select()\n      .from(academicAlerts)\n      .where(eq(academicAlerts.studentId, studentId))\n      .orderBy(desc(academicAlerts.createdAt));\n    return alerts;\n  }\n\n  async getAlertsByAssignedUser(userId: string): Promise<AcademicAlerts[]> {\n    const alerts = await db\n      .select()\n      .from(academicAlerts)\n      .where(eq(academicAlerts.assignedTo, userId))\n      .orderBy(desc(academicAlerts.createdAt));\n    return alerts;\n  }\n\n  async getAlertsByStatus(status: AlertStatus): Promise<AcademicAlerts[]> {\n    const alerts = await db\n      .select()\n      .from(academicAlerts)\n      .where(eq(academicAlerts.status, status))\n      .orderBy(desc(academicAlerts.createdAt));\n    return alerts;\n  }\n\n  async getAlertsByType(type: AlertType): Promise<AcademicAlerts[]> {\n    const alerts = await db\n      .select()\n      .from(academicAlerts)\n      .where(eq(academicAlerts.alertType, type))\n      .orderBy(desc(academicAlerts.createdAt));\n    return alerts;\n  }\n\n  async acknowledgeAlert(alertId: string, userId: string): Promise<AcademicAlerts | undefined> {\n    const [alert] = await db\n      .update(academicAlerts)\n      .set({ \n        status: 'acknowledged',\n        acknowledgedBy: userId, \n        acknowledgedAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(academicAlerts.id, alertId))\n      .returning();\n    return alert || undefined;\n  }\n\n  async resolveAlert(alertId: string, userId: string, resolutionNotes?: string): Promise<AcademicAlerts | undefined> {\n    const [alert] = await db\n      .update(academicAlerts)\n      .set({ \n        status: 'resolved',\n        resolvedBy: userId, \n        resolvedAt: new Date(),\n        resolutionNotes,\n        updatedAt: new Date()\n      })\n      .where(eq(academicAlerts.id, alertId))\n      .returning();\n    return alert || undefined;\n  }\n\n  // Alert Notifications implementations\n  async getNotifications(userId: string, filters: { unread?: boolean; type?: string; priority?: string } = {}): Promise<AlertNotifications[]> {\n    let whereConditions = [eq(alertNotifications.userId, userId)];\n    \n    if (filters.unread) {\n      whereConditions.push(eq(alertNotifications.isRead, false));\n    }\n    \n    const notifications = await db\n      .select()\n      .from(alertNotifications)\n      .where(and(...whereConditions))\n      .orderBy(desc(alertNotifications.createdAt));\n    return notifications;\n  }\n\n  async createNotification(insertNotification: InsertAlertNotifications): Promise<AlertNotifications> {\n    const [notification] = await db\n      .insert(alertNotifications)\n      .values(insertNotification)\n      .returning();\n    return notification;\n  }\n  \n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    await db\n      .update(alertNotifications)\n      .set({ isRead: true, readAt: new Date() })\n      .where(and(\n        eq(alertNotifications.userId, userId),\n        eq(alertNotifications.isRead, false)\n      ));\n  }\n  \n  async getNotificationsByRole(userRole: string, scope: { programId?: string; courseId?: string } = {}): Promise<AlertNotifications[]> {\n    // Role-based notification filtering - for future expansion\n    return await db\n      .select()\n      .from(alertNotifications)\n      .orderBy(desc(alertNotifications.createdAt));\n  }\n\n  async markNotificationAsRead(notificationId: string): Promise<AlertNotifications | undefined> {\n    const [notification] = await db\n      .update(alertNotifications)\n      .set({ isRead: true, readAt: new Date() })\n      .where(eq(alertNotifications.id, notificationId))\n      .returning();\n    return notification || undefined;\n  }\n\n  async markNotificationAsDelivered(notificationId: string): Promise<AlertNotifications | undefined> {\n    const [notification] = await db\n      .update(alertNotifications)\n      .set({ isDelivered: true, deliveredAt: new Date() })\n      .where(eq(alertNotifications.id, notificationId))\n      .returning();\n    return notification || undefined;\n  }\n\n  async getUnreadNotifications(userId: string): Promise<AlertNotifications[]> {\n    const notifications = await db\n      .select()\n      .from(alertNotifications)\n      .where(\n        and(\n          eq(alertNotifications.userId, userId),\n          eq(alertNotifications.isRead, false)\n        )\n      )\n      .orderBy(desc(alertNotifications.createdAt));\n    return notifications;\n  }\n\n  // User Sessions implementations (for WebSocket management)\n  async getUserSession(socketId: string): Promise<UserSessions | undefined> {\n    const [session] = await db\n      .select()\n      .from(userSessions)\n      .where(eq(userSessions.socketId, socketId));\n    return session || undefined;\n  }\n\n  async createUserSession(insertSession: InsertUserSessions): Promise<UserSessions> {\n    const [session] = await db\n      .insert(userSessions)\n      .values(insertSession)\n      .returning();\n    return session;\n  }\n\n  async updateUserSession(socketId: string, updates: Partial<UserSessions>): Promise<UserSessions | undefined> {\n    const [session] = await db\n      .update(userSessions)\n      .set({ ...updates, lastActivity: new Date() })\n      .where(eq(userSessions.socketId, socketId))\n      .returning();\n    return session || undefined;\n  }\n\n  async removeUserSession(socketId: string): Promise<void> {\n    await db\n      .delete(userSessions)\n      .where(eq(userSessions.socketId, socketId));\n  }\n\n  async getUserActiveSessions(userId: string): Promise<UserSessions[]> {\n    const sessions = await db\n      .select()\n      .from(userSessions)\n      .where(\n        and(\n          eq(userSessions.userId, userId),\n          eq(userSessions.isActive, true)\n        )\n      )\n      .orderBy(desc(userSessions.lastActivity));\n    return sessions;\n  }\n\n  async cleanupInactiveSessions(): Promise<void> {\n    // Remove sessions inactive for more than 24 hours\n    const cutoffTime = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    await db\n      .delete(userSessions)\n      .where(\n        or(\n          eq(userSessions.isActive, false),\n          // Note: SQL comparison for timestamp - convert to ISO string for comparison\n          eq(userSessions.lastActivity, cutoffTime)\n        )\n      );\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":32746},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, jsonb, decimal, pgEnum } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const roleEnum = pgEnum(\"role\", [\"admin\", \"coordinator\", \"teacher\", \"student\"]);\nexport const bloomsLevelEnum = pgEnum(\"blooms_level\", [\"remember\", \"understand\", \"apply\", \"analyze\", \"evaluate\", \"create\"]);\nexport const outcomeTypeEnum = pgEnum(\"outcome_type\", [\"ILO\", \"PLO\", \"CLO\"]);\nexport const badgeTypeEnum = pgEnum(\"badge_type\", [\"achievement\", \"mastery\", \"streak\", \"special\"]);\nexport const mascotTypeEnum = pgEnum(\"mascot_type\", [\"fox\", \"owl\", \"penguin\"]);\nexport const alertTypeEnum = pgEnum(\"alert_type\", [\"low_performance\", \"inactivity\", \"missed_deadline\", \"help_request\", \"achievement\", \"streak_break\"]);\nexport const alertPriorityEnum = pgEnum(\"alert_priority\", [\"low\", \"medium\", \"high\", \"critical\"]);\nexport const alertStatusEnum = pgEnum(\"alert_status\", [\"active\", \"acknowledged\", \"resolved\", \"dismissed\"]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  role: roleEnum(\"role\").notNull().default(\"student\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  profileImage: text(\"profile_image\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Programs table\nexport const programs = pgTable(\"programs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  code: varchar(\"code\", { length: 10 }).notNull().unique(),\n  level: text(\"level\").notNull(), // Bachelor's, Master's, etc.\n  coordinatorId: varchar(\"coordinator_id\").references(() => users.id),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Courses table\nexport const courses = pgTable(\"courses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  code: varchar(\"code\", { length: 10 }).notNull().unique(),\n  credits: integer(\"credits\").notNull().default(3),\n  programId: varchar(\"program_id\").notNull().references(() => programs.id),\n  teacherId: varchar(\"teacher_id\").references(() => users.id),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Learning Outcomes table (ILO, PLO, CLO)\nexport const learningOutcomes = pgTable(\"learning_outcomes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\", { length: 20 }).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  type: outcomeTypeEnum(\"type\").notNull(),\n  bloomsLevel: bloomsLevelEnum(\"blooms_level\").notNull(),\n  programId: varchar(\"program_id\").references(() => programs.id),\n  courseId: varchar(\"course_id\").references(() => courses.id),\n  ownerId: varchar(\"owner_id\").notNull().references(() => users.id),\n  lastEditedBy: varchar(\"last_edited_by\").notNull().references(() => users.id),\n  version: integer(\"version\").notNull().default(1),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Outcome Mappings table (CLO -> PLO -> ILO)\nexport const outcomeMappings = pgTable(\"outcome_mappings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sourceOutcomeId: varchar(\"source_outcome_id\").notNull().references(() => learningOutcomes.id),\n  targetOutcomeId: varchar(\"target_outcome_id\").notNull().references(() => learningOutcomes.id),\n  weight: decimal(\"weight\", { precision: 5, scale: 2 }).notNull().default(\"1.00\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Assignments table\nexport const assignments = pgTable(\"assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  courseId: varchar(\"course_id\").notNull().references(() => courses.id),\n  teacherId: varchar(\"teacher_id\").notNull().references(() => users.id),\n  totalPoints: integer(\"total_points\").notNull().default(100),\n  dueDate: timestamp(\"due_date\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  rubricData: jsonb(\"rubric_data\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Rubric Criteria table\nexport const rubricCriteria = pgTable(\"rubric_criteria\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  assignmentId: varchar(\"assignment_id\").notNull().references(() => assignments.id),\n  outcomeId: varchar(\"outcome_id\").notNull().references(() => learningOutcomes.id),\n  description: text(\"description\").notNull(),\n  maxPoints: integer(\"max_points\").notNull(),\n  weight: decimal(\"weight\", { precision: 5, scale: 2 }).notNull().default(\"1.00\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Student Submissions table\nexport const studentSubmissions = pgTable(\"student_submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  assignmentId: varchar(\"assignment_id\").notNull().references(() => assignments.id),\n  studentId: varchar(\"student_id\").notNull().references(() => users.id),\n  submissionData: jsonb(\"submission_data\"),\n  totalScore: decimal(\"total_score\", { precision: 5, scale: 2 }),\n  feedback: text(\"feedback\"),\n  submittedAt: timestamp(\"submitted_at\"),\n  gradedAt: timestamp(\"graded_at\"),\n  gradedBy: varchar(\"graded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Student Performance table (Evidence aggregation)\nexport const studentPerformance = pgTable(\"student_performance\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => users.id),\n  outcomeId: varchar(\"outcome_id\").notNull().references(() => learningOutcomes.id),\n  averageScore: decimal(\"average_score\", { precision: 5, scale: 2 }),\n  totalSubmissions: integer(\"total_submissions\").notNull().default(0),\n  lastUpdated: timestamp(\"last_updated\").notNull().defaultNow(),\n});\n\n// Gamification - Student Progress\nexport const studentProgress = pgTable(\"student_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => users.id).unique(),\n  totalXP: integer(\"total_xp\").notNull().default(0),\n  currentLevel: integer(\"current_level\").notNull().default(1),\n  currentStreak: integer(\"current_streak\").notNull().default(0),\n  longestStreak: integer(\"longest_streak\").notNull().default(0),\n  lastActivityDate: timestamp(\"last_activity_date\"),\n  totalBadges: integer(\"total_badges\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Badge Templates\nexport const badgeTemplates = pgTable(\"badge_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  type: badgeTypeEnum(\"type\").notNull(),\n  iconUrl: text(\"icon_url\"),\n  requirements: jsonb(\"requirements\").notNull(),\n  xpReward: integer(\"xp_reward\").notNull().default(0),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Student Badges\nexport const studentBadges = pgTable(\"student_badges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => users.id),\n  badgeTemplateId: varchar(\"badge_template_id\").notNull().references(() => badgeTemplates.id),\n  earnedAt: timestamp(\"earned_at\").notNull().defaultNow(),\n  metadata: jsonb(\"metadata\"),\n});\n\n// Learning Modules (Gamified content)\nexport const learningModules = pgTable(\"learning_modules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  courseId: varchar(\"course_id\").notNull().references(() => courses.id),\n  order: integer(\"order\").notNull(),\n  xpReward: integer(\"xp_reward\").notNull().default(50),\n  isLocked: boolean(\"is_locked\").notNull().default(false),\n  requirements: jsonb(\"requirements\"),\n  content: jsonb(\"content\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Student Module Progress\nexport const studentModuleProgress = pgTable(\"student_module_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => users.id),\n  moduleId: varchar(\"module_id\").notNull().references(() => learningModules.id),\n  isCompleted: boolean(\"is_completed\").notNull().default(false),\n  completionPercentage: integer(\"completion_percentage\").notNull().default(0),\n  xpEarned: integer(\"xp_earned\").notNull().default(0),\n  startedAt: timestamp(\"started_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// Student Onboarding table\nexport const studentOnboarding = pgTable(\"student_onboarding\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => users.id).unique(),\n  learningStyle: text(\"learning_style\"), // visual, auditory, kinesthetic\n  studyTimePreference: text(\"study_time_preference\"), // morning, afternoon, evening, night\n  motivationGoals: text(\"motivation_goals\").array(), // career, grades, knowledge, etc.\n  currentEducationLevel: text(\"current_education_level\"), // undergraduate, graduate, postgraduate\n  fieldOfStudy: text(\"field_of_study\"),\n  weeklyStudyHours: integer(\"weekly_study_hours\"),\n  preferredLanguage: text(\"preferred_language\").default(\"english\"),\n  isCompleted: boolean(\"is_completed\").notNull().default(false),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Mascot Selection table\nexport const studentMascot = pgTable(\"student_mascot\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => users.id).unique(),\n  mascotType: mascotTypeEnum(\"mascot_type\").notNull(),\n  mascotName: text(\"mascot_name\").notNull(),\n  mascotImagePath: text(\"mascot_image_path\").notNull(),\n  selectedAt: timestamp(\"selected_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Study Streaks table\nexport const studyStreaks = pgTable(\"study_streaks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => users.id).unique(),\n  currentStreak: integer(\"current_streak\").notNull().default(0),\n  longestStreak: integer(\"longest_streak\").notNull().default(0),\n  lastActivityDate: timestamp(\"last_activity_date\"),\n  streakStartDate: timestamp(\"streak_start_date\"),\n  totalActiveDays: integer(\"total_active_days\").notNull().default(0),\n  weeklyGoal: integer(\"weekly_goal\").notNull().default(5), // days per week\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Study Buddy Interactions table\nexport const studyBuddyInteractions = pgTable(\"study_buddy_interactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => users.id),\n  interactionType: text(\"interaction_type\").notNull(), // motivation, reminder, celebration, encouragement\n  message: text(\"message\").notNull(),\n  triggerReason: text(\"trigger_reason\"), // streak_break, milestone, inactivity, completion\n  isRead: boolean(\"is_read\").notNull().default(false),\n  readAt: timestamp(\"read_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Academic Support Alerts table\nexport const academicAlerts = pgTable(\"academic_alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => users.id),\n  alertType: alertTypeEnum(\"alert_type\").notNull(),\n  priority: alertPriorityEnum(\"priority\").notNull().default(\"medium\"),\n  status: alertStatusEnum(\"status\").notNull().default(\"active\"),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  contextData: jsonb(\"context_data\"), // Additional data like assignment ID, course ID, scores, etc.\n  triggeredBy: varchar(\"triggered_by\").references(() => users.id), // Who/what triggered this alert\n  assignedTo: varchar(\"assigned_to\").references(() => users.id), // Who should handle this alert\n  acknowledgedBy: varchar(\"acknowledged_by\").references(() => users.id),\n  acknowledgedAt: timestamp(\"acknowledged_at\"),\n  resolvedBy: varchar(\"resolved_by\").references(() => users.id),\n  resolvedAt: timestamp(\"resolved_at\"),\n  resolutionNotes: text(\"resolution_notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Alert Notifications table (tracks who should be notified about alerts)\nexport const alertNotifications = pgTable(\"alert_notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  alertId: varchar(\"alert_id\").notNull().references(() => academicAlerts.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  notificationType: text(\"notification_type\").notNull(), // email, push, in_app, sms\n  isRead: boolean(\"is_read\").notNull().default(false),\n  isDelivered: boolean(\"is_delivered\").notNull().default(false),\n  readAt: timestamp(\"read_at\"),\n  deliveredAt: timestamp(\"delivered_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Real-time User Sessions table (for WebSocket connections)\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  socketId: text(\"socket_id\").notNull().unique(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  lastActivity: timestamp(\"last_activity\").notNull().defaultNow(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many, one }) => ({\n  coordinatedPrograms: many(programs, { relationName: \"coordinator\" }),\n  taughtCourses: many(courses, { relationName: \"teacher\" }),\n  ownedOutcomes: many(learningOutcomes, { relationName: \"owner\" }),\n  editedOutcomes: many(learningOutcomes, { relationName: \"editor\" }),\n  assignments: many(assignments),\n  submissions: many(studentSubmissions),\n  progress: one(studentProgress),\n  badges: many(studentBadges),\n  moduleProgress: many(studentModuleProgress),\n}));\n\nexport const programsRelations = relations(programs, ({ one, many }) => ({\n  coordinator: one(users, {\n    fields: [programs.coordinatorId],\n    references: [users.id],\n    relationName: \"coordinator\",\n  }),\n  courses: many(courses),\n  outcomes: many(learningOutcomes),\n}));\n\nexport const coursesRelations = relations(courses, ({ one, many }) => ({\n  program: one(programs, {\n    fields: [courses.programId],\n    references: [programs.id],\n  }),\n  teacher: one(users, {\n    fields: [courses.teacherId],\n    references: [users.id],\n    relationName: \"teacher\",\n  }),\n  outcomes: many(learningOutcomes),\n  assignments: many(assignments),\n  modules: many(learningModules),\n}));\n\nexport const learningOutcomesRelations = relations(learningOutcomes, ({ one, many }) => ({\n  program: one(programs, {\n    fields: [learningOutcomes.programId],\n    references: [programs.id],\n  }),\n  course: one(courses, {\n    fields: [learningOutcomes.courseId],\n    references: [courses.id],\n  }),\n  owner: one(users, {\n    fields: [learningOutcomes.ownerId],\n    references: [users.id],\n    relationName: \"owner\",\n  }),\n  lastEditor: one(users, {\n    fields: [learningOutcomes.lastEditedBy],\n    references: [users.id],\n    relationName: \"editor\",\n  }),\n  sourceMappings: many(outcomeMappings, { relationName: \"source\" }),\n  targetMappings: many(outcomeMappings, { relationName: \"target\" }),\n  rubricCriteria: many(rubricCriteria),\n  performance: many(studentPerformance),\n}));\n\nexport const outcomeMappingsRelations = relations(outcomeMappings, ({ one }) => ({\n  sourceOutcome: one(learningOutcomes, {\n    fields: [outcomeMappings.sourceOutcomeId],\n    references: [learningOutcomes.id],\n    relationName: \"source\",\n  }),\n  targetOutcome: one(learningOutcomes, {\n    fields: [outcomeMappings.targetOutcomeId],\n    references: [learningOutcomes.id],\n    relationName: \"target\",\n  }),\n  createdBy: one(users, {\n    fields: [outcomeMappings.createdBy],\n    references: [users.id],\n  }),\n}));\n\nexport const assignmentsRelations = relations(assignments, ({ one, many }) => ({\n  course: one(courses, {\n    fields: [assignments.courseId],\n    references: [courses.id],\n  }),\n  teacher: one(users, {\n    fields: [assignments.teacherId],\n    references: [users.id],\n  }),\n  rubricCriteria: many(rubricCriteria),\n  submissions: many(studentSubmissions),\n}));\n\nexport const studentProgressRelations = relations(studentProgress, ({ one }) => ({\n  student: one(users, {\n    fields: [studentProgress.studentId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProgramSchema = createInsertSchema(programs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLearningOutcomeSchema = createInsertSchema(learningOutcomes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOutcomeMappingSchema = createInsertSchema(outcomeMappings).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAssignmentSchema = createInsertSchema(assignments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStudentSubmissionSchema = createInsertSchema(studentSubmissions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBadgeTemplateSchema = createInsertSchema(badgeTemplates).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLearningModuleSchema = createInsertSchema(learningModules).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStudentOnboardingSchema = createInsertSchema(studentOnboarding).omit({\n  id: true,\n  studentId: true, // Omit studentId since it's added server-side from authenticated user\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStudentMascotSchema = createInsertSchema(studentMascot).omit({\n  id: true,\n  studentId: true, // Omit studentId since it's added server-side from authenticated user\n  selectedAt: true, // Has default value\n  createdAt: true,\n});\n\nexport const insertStudyStreaksSchema = createInsertSchema(studyStreaks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStudyBuddyInteractionsSchema = createInsertSchema(studyBuddyInteractions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAcademicAlertsSchema = createInsertSchema(academicAlerts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAlertNotificationsSchema = createInsertSchema(alertNotifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSessionsSchema = createInsertSchema(userSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type SafeUser = Omit<User, 'password'>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Program = typeof programs.$inferSelect;\nexport type InsertProgram = z.infer<typeof insertProgramSchema>;\nexport type Course = typeof courses.$inferSelect;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type LearningOutcome = typeof learningOutcomes.$inferSelect;\nexport type InsertLearningOutcome = z.infer<typeof insertLearningOutcomeSchema>;\nexport type OutcomeMapping = typeof outcomeMappings.$inferSelect;\nexport type InsertOutcomeMapping = z.infer<typeof insertOutcomeMappingSchema>;\nexport type Assignment = typeof assignments.$inferSelect;\nexport type InsertAssignment = z.infer<typeof insertAssignmentSchema>;\nexport type StudentSubmission = typeof studentSubmissions.$inferSelect;\nexport type InsertStudentSubmission = z.infer<typeof insertStudentSubmissionSchema>;\nexport type StudentProgress = typeof studentProgress.$inferSelect;\nexport type BadgeTemplate = typeof badgeTemplates.$inferSelect;\nexport type InsertBadgeTemplate = z.infer<typeof insertBadgeTemplateSchema>;\nexport type StudentBadge = typeof studentBadges.$inferSelect;\nexport type LearningModule = typeof learningModules.$inferSelect;\nexport type InsertLearningModule = z.infer<typeof insertLearningModuleSchema>;\nexport type StudentModuleProgress = typeof studentModuleProgress.$inferSelect;\nexport type StudentOnboarding = typeof studentOnboarding.$inferSelect;\nexport type InsertStudentOnboarding = z.infer<typeof insertStudentOnboardingSchema>;\nexport type StudentMascot = typeof studentMascot.$inferSelect;\nexport type InsertStudentMascot = z.infer<typeof insertStudentMascotSchema>;\nexport type StudyStreaks = typeof studyStreaks.$inferSelect;\nexport type InsertStudyStreaks = z.infer<typeof insertStudyStreaksSchema>;\nexport type StudyBuddyInteractions = typeof studyBuddyInteractions.$inferSelect;\nexport type InsertStudyBuddyInteractions = z.infer<typeof insertStudyBuddyInteractionsSchema>;\nexport type AcademicAlerts = typeof academicAlerts.$inferSelect;\nexport type InsertAcademicAlerts = z.infer<typeof insertAcademicAlertsSchema>;\nexport type AlertNotifications = typeof alertNotifications.$inferSelect;\nexport type InsertAlertNotifications = z.infer<typeof insertAlertNotificationsSchema>;\nexport type UserSessions = typeof userSessions.$inferSelect;\nexport type InsertUserSessions = z.infer<typeof insertUserSessionsSchema>;\n\n// Enums export for frontend\nexport const ROLES = [\"admin\", \"coordinator\", \"teacher\", \"student\"] as const;\nexport const BLOOMS_LEVELS = [\"remember\", \"understand\", \"apply\", \"analyze\", \"evaluate\", \"create\"] as const;\nexport const OUTCOME_TYPES = [\"ILO\", \"PLO\", \"CLO\"] as const;\nexport const BADGE_TYPES = [\"achievement\", \"mastery\", \"streak\", \"special\"] as const;\nexport const MASCOT_TYPES = [\"fox\", \"owl\", \"penguin\"] as const;\nexport const ALERT_TYPES = [\"low_performance\", \"inactivity\", \"missed_deadline\", \"help_request\", \"achievement\", \"streak_break\"] as const;\nexport const ALERT_PRIORITIES = [\"low\", \"medium\", \"high\", \"critical\"] as const;\nexport const ALERT_STATUSES = [\"active\", \"acknowledged\", \"resolved\", \"dismissed\"] as const;\n\nexport type Role = typeof ROLES[number];\nexport type BloomsLevel = typeof BLOOMS_LEVELS[number];\nexport type OutcomeType = typeof OUTCOME_TYPES[number];\nexport type BadgeType = typeof BADGE_TYPES[number];\nexport type MascotType = typeof MASCOT_TYPES[number];\nexport type AlertType = typeof ALERT_TYPES[number];\nexport type AlertPriority = typeof ALERT_PRIORITIES[number];\nexport type AlertStatus = typeof ALERT_STATUSES[number];\n","size_bytes":24253},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport HomePage from \"@/pages/home-page\";\nimport NotFound from \"@/pages/not-found\";\nimport AuthPage from \"@/pages/auth-page\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={HomePage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":969},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Base Colors - E DEVISER Brand */\n  --background: 210 30% 98%; /* Very light blue instead of pure white */\n  --foreground: 0 0% 7%; /* #121212 */\n  --card: 210 25% 96%; /* Light blue tint for cards */\n  --card-foreground: 0 0% 7%;\n  --popover: 210 25% 96%; /* Light blue tint for popovers */\n  --popover-foreground: 0 0% 7%;\n\n  /* Theme Colors - E DEVISER Brand */\n  --primary: 210 100% 50%; /* Bright Blue */\n  --primary-foreground: 0 0% 100%;\n  --secondary: 211 50% 23%; /* #1D3557 - Dark Blue */\n  --secondary-foreground: 0 0% 100%;\n  --muted: 210 40% 94%;\n  --muted-foreground: 211 30% 45%;\n  --accent: 200 100% 60%; /* Light Blue Accent */\n  --accent-foreground: 0 0% 100%;\n  --destructive: 0 84% 60%;\n  --destructive-foreground: 0 0% 100%;\n  \n  /* Gradient Colors from Logo */\n  --gradient-start: 220 100% 55%; /* Deep Blue */\n  --gradient-end: 190 100% 50%; /* Cyan Blue */\n\n  /* UI Colors */\n  --border: 0 0% 90%;\n  --input: 210 20% 94%;\n  --ring: 210 100% 50%;\n\n  /* Chart Colors - Logo Inspired */\n  --chart-1: 210 100% 50%; /* Primary Blue */\n  --chart-2: 211 50% 23%; /* Secondary Dark Blue */\n  --chart-3: 200 90% 60%; /* Light Blue */\n  --chart-4: 220 80% 45%; /* Deep Blue Variant */\n  --chart-5: 190 70% 50%; /* Cyan Blue Variant */\n\n  /* Sidebar Colors */\n  --sidebar: 210 30% 97%;\n  --sidebar-foreground: 0 0% 7%;\n  --sidebar-primary: 210 100% 50%;\n  --sidebar-primary-foreground: 0 0% 100%;\n  --sidebar-accent: 210 100% 95%;\n  --sidebar-accent-foreground: 210 100% 35%;\n  --sidebar-border: 0 0% 90%;\n  --sidebar-ring: 210 100% 50%;\n\n  /* Typography */\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n\n  /* Spacing and Borders */\n  --radius: 0.5rem;\n\n  /* Shadows - removed per design */\n  --shadow-2xs: 0px 0px 0px 0px transparent;\n  --shadow-xs: 0px 0px 0px 0px transparent;\n  --shadow-sm: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05);\n  --shadow: 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1), 0px 1px 2px 0px hsl(0, 0%, 0%, 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(0, 0%, 0%, 0.1), 0px 2px 4px -1px hsl(0, 0%, 0%, 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0, 0%, 0%, 0.1), 0px 4px 6px -2px hsl(0, 0%, 0%, 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0, 0%, 0%, 0.1), 0px 10px 10px -5px hsl(0, 0%, 0%, 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0, 0%, 0%, 0.25);\n\n  /* Tracking */\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: 0 0% 7%; /* Dark mode background */\n  --foreground: 0 0% 95%;\n  --card: 211 50% 15%;\n  --card-foreground: 0 0% 95%;\n  --popover: 211 50% 15%;\n  --popover-foreground: 0 0% 95%;\n  --primary: 210 100% 60%; /* Bright Blue for dark mode */\n  --primary-foreground: 0 0% 7%;\n  --secondary: 211 50% 35%; /* Lighter blue for visibility */\n  --secondary-foreground: 0 0% 95%;\n  --muted: 211 30% 20%;\n  --muted-foreground: 210 20% 65%;\n  --accent: 200 100% 70%; /* Brighter blue accent */\n  --accent-foreground: 0 0% 7%;\n  --destructive: 0 62% 45%;\n  --destructive-foreground: 0 0% 95%;\n  --border: 211 30% 25%;\n  --input: 211 30% 20%;\n  --ring: 210 100% 60%;\n  \n  /* Gradient Colors for Dark Mode */\n  --gradient-start: 220 100% 65%;\n  --gradient-end: 190 100% 60%;\n  \n  --chart-1: 210 100% 60%;\n  --chart-2: 211 50% 35%;\n  --chart-3: 200 90% 70%;\n  --chart-4: 220 80% 55%;\n  --chart-5: 190 70% 60%;\n  --sidebar: 211 50% 12%;\n  --sidebar-foreground: 0 0% 95%;\n  --sidebar-primary: 210 100% 60%;\n  --sidebar-primary-foreground: 0 0% 7%;\n  --sidebar-accent: 211 40% 20%;\n  --sidebar-accent-foreground: 210 100% 70%;\n  --sidebar-border: 211 30% 25%;\n  --sidebar-ring: 210 100% 60%;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* Custom Typography */\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold tracking-tight;\n  }\n\n  /* Custom Focus States */\n  .focus-visible {\n    @apply outline-none ring-2 ring-ring ring-offset-2 ring-offset-background;\n  }\n}\n\n@layer components {\n  /* E DEVISER Logo Gradient Styles */\n  .gradient-logo {\n    background: linear-gradient(135deg, hsl(var(--gradient-start)) 0%, hsl(var(--gradient-end)) 100%);\n  }\n  \n  .gradient-logo-text {\n    background: linear-gradient(135deg, hsl(var(--gradient-start)) 0%, hsl(var(--gradient-end)) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n  \n  .gradient-hero {\n    background: linear-gradient(135deg, hsl(var(--gradient-start)) 0%, hsl(var(--gradient-end)) 100%);\n  }\n\n  .gradient-card {\n    background: linear-gradient(135deg, hsl(var(--background)) 0%, hsl(var(--primary) / 0.05) 100%);\n  }\n  \n  .gradient-button {\n    background: linear-gradient(135deg, hsl(var(--gradient-start)) 0%, hsl(var(--gradient-end)) 100%);\n    transition: transform 0.2s;\n  }\n  \n  .gradient-button:hover {\n    transform: scale(1.05);\n    box-shadow: 0 10px 25px -5px rgba(0, 123, 255, 0.3);\n  }\n  \n  .gradient-border {\n    position: relative;\n    background: linear-gradient(135deg, hsl(var(--gradient-start)) 0%, hsl(var(--gradient-end)) 100%);\n    padding: 2px;\n  }\n  \n  .gradient-border-inner {\n    background: hsl(var(--background));\n    border-radius: calc(var(--radius) - 2px);\n  }\n\n  /* Custom Animations */\n  .pulse-ring {\n    animation: pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite;\n  }\n\n  @keyframes pulse-ring {\n    0% { \n      transform: scale(1); \n      opacity: 1; \n    }\n    80%, 100% { \n      transform: scale(1.1); \n      opacity: 0; \n    }\n  }\n\n  .bounce-in {\n    animation: bounce-in 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n  }\n\n  @keyframes bounce-in {\n    0% { \n      transform: scale(0.3); \n      opacity: 0; \n    }\n    50% { \n      transform: scale(1.05); \n    }\n    70% { \n      transform: scale(0.9); \n    }\n    100% { \n      transform: scale(1); \n      opacity: 1; \n    }\n  }\n\n  .fade-in {\n    animation: fade-in 0.5s ease-out;\n  }\n\n  @keyframes fade-in {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  .slide-in-right {\n    animation: slide-in-right 0.3s ease-out;\n  }\n\n  @keyframes slide-in-right {\n    from {\n      opacity: 0;\n      transform: translateX(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  }\n\n  /* Progress Bar Animations */\n  .progress-bar-fill {\n    transition: width 0.8s ease-in-out;\n  }\n\n  /* Card Hover Effects */\n  .card-hover {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .card-hover:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n\n  /* Learning Path Nodes */\n  .learning-path-node {\n    position: relative;\n  }\n\n  .learning-path-node::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 100%;\n    width: 40px;\n    height: 2px;\n    background: hsl(var(--primary));\n    transform: translateY(-50%);\n  }\n\n  .learning-path-node:last-child::after {\n    display: none;\n  }\n\n  /* Streak Fire Animation */\n  .streak-fire {\n    animation: flicker 1.5s infinite alternate;\n  }\n\n  @keyframes flicker {\n    0%, 100% { \n      opacity: 1; \n      transform: scale(1);\n    }\n    50% { \n      opacity: 0.8; \n      transform: scale(1.05);\n    }\n  }\n\n  /* XP Counter Gradient */\n  .xp-counter {\n    background: linear-gradient(135deg, hsl(var(--accent)) 0%, #ff6b35 100%);\n  }\n\n  /* Badge Glow Effect */\n  .badge-glow {\n    box-shadow: 0 0 20px hsl(var(--accent) / 0.3);\n    animation: badge-glow 2s ease-in-out infinite alternate;\n  }\n\n  @keyframes badge-glow {\n    from {\n      box-shadow: 0 0 20px hsl(var(--accent) / 0.3);\n    }\n    to {\n      box-shadow: 0 0 30px hsl(var(--accent) / 0.5);\n    }\n  }\n\n  /* Interactive Elements */\n  .interactive-scale {\n    transition: transform 0.2s ease-in-out;\n  }\n\n  .interactive-scale:hover {\n    transform: scale(1.02);\n  }\n\n  .interactive-scale:active {\n    transform: scale(0.98);\n  }\n\n  /* Loading Shimmer */\n  .shimmer {\n    background: linear-gradient(90deg, hsl(var(--muted)) 25%, hsl(var(--background)) 50%, hsl(var(--muted)) 75%);\n    background-size: 200% 100%;\n    animation: shimmer 1.5s infinite;\n  }\n\n  @keyframes shimmer {\n    0% {\n      background-position: -200% 0;\n    }\n    100% {\n      background-position: 200% 0;\n    }\n  }\n\n  /* Status Indicators */\n  .status-online {\n    @apply bg-green-500;\n    animation: pulse 2s infinite;\n  }\n\n  .status-away {\n    @apply bg-yellow-500;\n  }\n\n  .status-offline {\n    @apply bg-gray-400;\n  }\n\n  /* Bloom's Taxonomy Colors */\n  .blooms-remember {\n    @apply bg-purple-500 text-white;\n  }\n\n  .blooms-understand {\n    @apply bg-blue-500 text-white;\n  }\n\n  .blooms-apply {\n    @apply bg-green-500 text-white;\n  }\n\n  .blooms-analyze {\n    @apply bg-yellow-500 text-white;\n  }\n\n  .blooms-evaluate {\n    @apply bg-orange-500 text-white;\n  }\n\n  .blooms-create {\n    @apply bg-red-500 text-white;\n  }\n\n  /* Outcome Type Colors */\n  .outcome-ilo {\n    @apply bg-red-100 border-red-500 text-red-700;\n  }\n\n  .outcome-plo {\n    @apply bg-blue-100 border-blue-500 text-blue-700;\n  }\n\n  .outcome-clo {\n    @apply bg-green-100 border-green-500 text-green-700;\n  }\n\n  /* Custom Scrollbar */\n  .custom-scrollbar {\n    scrollbar-width: thin;\n    scrollbar-color: hsl(var(--border)) transparent;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-track {\n    background: transparent;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-thumb {\n    background-color: hsl(var(--border));\n    border-radius: 3px;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n    background-color: hsl(var(--muted-foreground));\n  }\n\n  /* Print Styles */\n  @media print {\n    .no-print {\n      display: none !important;\n    }\n    \n    .print-break-after {\n      page-break-after: always;\n    }\n    \n    .print-break-before {\n      page-break-before: always;\n    }\n  }\n}\n\n@layer utilities {\n  /* Text Utilities */\n  .text-balance {\n    text-wrap: balance;\n  }\n\n  .text-pretty {\n    text-wrap: pretty;\n  }\n\n  /* Line Clamp Utilities */\n  .line-clamp-1 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 1;\n  }\n\n  .line-clamp-2 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n  }\n\n  .line-clamp-3 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 3;\n  }\n\n  /* Flexbox Utilities */\n  .flex-center {\n    @apply flex items-center justify-center;\n  }\n\n  .flex-between {\n    @apply flex items-center justify-between;\n  }\n\n  .flex-around {\n    @apply flex items-center justify-around;\n  }\n\n  .flex-evenly {\n    @apply flex items-center justify-evenly;\n  }\n\n  /* Grid Utilities */\n  .grid-center {\n    @apply grid place-items-center;\n  }\n\n  /* Aspect Ratio Utilities */\n  .aspect-square {\n    aspect-ratio: 1 / 1;\n  }\n\n  .aspect-video {\n    aspect-ratio: 16 / 9;\n  }\n\n  .aspect-photo {\n    aspect-ratio: 4 / 3;\n  }\n\n  /* Safe Area Utilities */\n  .safe-top {\n    padding-top: env(safe-area-inset-top);\n  }\n\n  .safe-bottom {\n    padding-bottom: env(safe-area-inset-bottom);\n  }\n\n  .safe-left {\n    padding-left: env(safe-area-inset-left);\n  }\n\n  .safe-right {\n    padding-right: env(safe-area-inset-right);\n  }\n\n  /* Accessibility Utilities */\n  .sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n  }\n\n  .not-sr-only {\n    position: static;\n    width: auto;\n    height: auto;\n    padding: 0;\n    margin: 0;\n    overflow: visible;\n    clip: auto;\n    white-space: normal;\n  }\n\n  /* Focus Utilities */\n  .focus-ring {\n    @apply focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background;\n  }\n\n  /* Interactive States */\n  .interactive {\n    @apply transition-all duration-200 ease-in-out hover:scale-[1.02] active:scale-[0.98];\n  }\n\n  .interactive-lift {\n    @apply transition-all duration-300 ease-out hover:-translate-y-1 hover:shadow-lg;\n  }\n\n  /* Gradient Text */\n  .gradient-text {\n    @apply bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent;\n  }\n\n  /* Glass Morphism */\n  .glass {\n    @apply bg-white/10 backdrop-blur-md border border-white/20;\n  }\n\n  .glass-dark {\n    @apply bg-black/10 backdrop-blur-md border border-black/20;\n  }\n}\n\n/* Component-specific styles */\n.fade-in-up {\n  animation: fadeInUp 0.6s ease-out forwards;\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.stagger-children > * {\n  animation-delay: calc(var(--stagger) * 100ms);\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n  :root {\n    --border: hsl(0, 0%, 0%);\n    --ring: hsl(0, 0%, 0%);\n  }\n\n  .dark {\n    --border: hsl(0, 0%, 100%);\n    --ring: hsl(0, 0%, 100%);\n  }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n","size_bytes":13496},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2832},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/constants.ts":{"content":"import { ROLES, BLOOMS_LEVELS, OUTCOME_TYPES, BADGE_TYPES } from \"@shared/schema\";\n\n// Application Constants\nexport const APP_NAME = \"E Deviser\";\nexport const APP_TAGLINE = \"OBE Mastery Hub\";\n\n// XP and Leveling Constants\nexport const XP_PER_LEVEL = 200;\nexport const MAX_LEVEL = 50;\n\n// XP Rewards\nexport const XP_REWARDS = {\n  ASSIGNMENT_COMPLETION: 100,\n  QUIZ_COMPLETION: 50,\n  MODULE_COMPLETION: 75,\n  PERFECT_SCORE: 150,\n  FIRST_SUBMISSION: 25,\n  STREAK_BONUS: 10, // per day\n  BADGE_EARNED: 200,\n  PEER_HELP: 50,\n} as const;\n\n// Streak Constants\nexport const STREAK_REQUIREMENTS = {\n  MIN_ACTIVITY_TIME: 30, // minutes\n  STREAK_RESET_HOURS: 48,\n} as const;\n\n// Badge Requirements\nexport const BADGE_REQUIREMENTS = {\n  ARRAY_MASTER: { type: \"module_completion\", target: \"arrays\", count: 1 },\n  CODE_WARRIOR: { type: \"consecutive_challenges\", count: 10 },\n  STUDY_STREAK: { type: \"learning_streak\", days: 7 },\n  ALGORITHM_EXPERT: { type: \"topic_mastery\", target: \"algorithms\" },\n  TEAM_PLAYER: { type: \"peer_help\", count: 5 },\n  EARLY_BIRD: { type: \"first_completion\", scope: \"weekly\" },\n  PERFECT_SCORE: { type: \"assignment_score\", percentage: 100 },\n  DATA_STRUCTURE_GURU: { type: \"module_completion\", target: \"data_structures\", count: 12 },\n  STUDY_MARATHON: { type: \"learning_streak\", days: 30 },\n} as const;\n\n// Role-based permissions\nexport const ROLE_PERMISSIONS = {\n  admin: {\n    canManageUsers: true,\n    canManagePrograms: true,\n    canManageILOs: true,\n    canManagePLOs: true,\n    canManageCLOs: false,\n    canViewSystemAnalytics: true,\n    canManageBadgeTemplates: true,\n    canAccessAllData: true,\n  },\n  coordinator: {\n    canManageUsers: false,\n    canManagePrograms: false,\n    canManageILOs: false,\n    canManagePLOs: true,\n    canManageCLOs: true, // override capability\n    canViewProgramAnalytics: true,\n    canManageCourses: true,\n    canAccessProgramData: true,\n  },\n  teacher: {\n    canManageUsers: false,\n    canManagePrograms: false,\n    canManageILOs: false,\n    canManagePLOs: false,\n    canManageCLOs: true,\n    canViewClassAnalytics: true,\n    canManageAssignments: true,\n    canGradeSubmissions: true,\n    canAccessCourseData: true,\n  },\n  student: {\n    canViewProgress: true,\n    canSubmitAssignments: true,\n    canViewBadges: true,\n    canAccessLearningModules: true,\n    canViewCompetencyProfile: true,\n  },\n} as const;\n\n// Bloom's Taxonomy Details\nexport const BLOOMS_TAXONOMY = {\n  remember: {\n    description: \"Recall facts and basic concepts\",\n    verbs: [\"define\", \"list\", \"recall\", \"recognize\", \"remember\", \"retrieve\"],\n    color: \"purple\",\n    level: 1,\n  },\n  understand: {\n    description: \"Explain ideas or concepts\",\n    verbs: [\"explain\", \"interpret\", \"summarize\", \"classify\", \"compare\", \"contrast\"],\n    color: \"blue\", \n    level: 2,\n  },\n  apply: {\n    description: \"Use information in new situations\",\n    verbs: [\"apply\", \"demonstrate\", \"execute\", \"implement\", \"solve\", \"use\"],\n    color: \"green\",\n    level: 3,\n  },\n  analyze: {\n    description: \"Draw connections among ideas\",\n    verbs: [\"analyze\", \"differentiate\", \"examine\", \"experiment\", \"organize\", \"test\"],\n    color: \"yellow\",\n    level: 4,\n  },\n  evaluate: {\n    description: \"Justify a stand or decision\",\n    verbs: [\"assess\", \"critique\", \"evaluate\", \"judge\", \"justify\", \"test\"],\n    color: \"orange\",\n    level: 5,\n  },\n  create: {\n    description: \"Produce new or original work\",\n    verbs: [\"create\", \"design\", \"formulate\", \"generate\", \"plan\", \"produce\"],\n    color: \"red\",\n    level: 6,\n  },\n} as const;\n\n// Outcome Type Details\nexport const OUTCOME_DETAILS = {\n  ILO: {\n    name: \"Institutional Learning Outcome\",\n    description: \"High-level outcomes expected of all graduates\",\n    scope: \"Institution-wide\",\n    color: \"red\",\n    icon: \"fa-university\",\n  },\n  PLO: {\n    name: \"Program Learning Outcome\", \n    description: \"Outcomes specific to a particular academic program\",\n    scope: \"Program-specific\",\n    color: \"blue\",\n    icon: \"fa-layer-group\",\n  },\n  CLO: {\n    name: \"Course Learning Outcome\",\n    description: \"Outcomes specific to individual courses\",\n    scope: \"Course-specific\", \n    color: \"green\",\n    icon: \"fa-bullseye\",\n  },\n} as const;\n\n// Grade Scale\nexport const GRADE_SCALE = {\n  A_PLUS: { min: 97, max: 100, gpa: 4.0, label: \"A+\" },\n  A: { min: 93, max: 96, gpa: 4.0, label: \"A\" },\n  A_MINUS: { min: 90, max: 92, gpa: 3.7, label: \"A-\" },\n  B_PLUS: { min: 87, max: 89, gpa: 3.3, label: \"B+\" },\n  B: { min: 83, max: 86, gpa: 3.0, label: \"B\" },\n  B_MINUS: { min: 80, max: 82, gpa: 2.7, label: \"B-\" },\n  C_PLUS: { min: 77, max: 79, gpa: 2.3, label: \"C+\" },\n  C: { min: 73, max: 76, gpa: 2.0, label: \"C\" },\n  C_MINUS: { min: 70, max: 72, gpa: 1.7, label: \"C-\" },\n  D: { min: 60, max: 69, gpa: 1.0, label: \"D\" },\n  F: { min: 0, max: 59, gpa: 0.0, label: \"F\" },\n} as const;\n\n// Navigation Items by Role\nexport const NAVIGATION_ITEMS = {\n  admin: [\n    { label: \"Dashboard\", path: \"/\", icon: \"fa-home\" },\n    { label: \"Programs\", path: \"/programs\", icon: \"fa-graduation-cap\" },\n    { label: \"Users\", path: \"/users\", icon: \"fa-users\" },\n    { label: \"ILOs\", path: \"/ilos\", icon: \"fa-university\" },\n    { label: \"Analytics\", path: \"/analytics\", icon: \"fa-chart-line\" },\n    { label: \"System\", path: \"/system\", icon: \"fa-cogs\" },\n  ],\n  coordinator: [\n    { label: \"Dashboard\", path: \"/\", icon: \"fa-home\" },\n    { label: \"Programs\", path: \"/programs\", icon: \"fa-graduation-cap\" },\n    { label: \"Courses\", path: \"/courses\", icon: \"fa-book\" },\n    { label: \"PLOs\", path: \"/plos\", icon: \"fa-layer-group\" },\n    { label: \"Mapping\", path: \"/mapping\", icon: \"fa-project-diagram\" },\n    { label: \"Analytics\", path: \"/analytics\", icon: \"fa-chart-bar\" },\n  ],\n  teacher: [\n    { label: \"Dashboard\", path: \"/\", icon: \"fa-home\" },\n    { label: \"Courses\", path: \"/courses\", icon: \"fa-chalkboard-teacher\" },\n    { label: \"Assignments\", path: \"/assignments\", icon: \"fa-tasks\" },\n    { label: \"CLOs\", path: \"/clos\", icon: \"fa-bullseye\" },\n    { label: \"Grading\", path: \"/grading\", icon: \"fa-edit\" },\n    { label: \"Students\", path: \"/students\", icon: \"fa-user-graduate\" },\n  ],\n  student: [\n    { label: \"Dashboard\", path: \"/\", icon: \"fa-home\" },\n    { label: \"Learning Path\", path: \"/learning\", icon: \"fa-route\" },\n    { label: \"Assignments\", path: \"/assignments\", icon: \"fa-clipboard-list\" },\n    { label: \"Progress\", path: \"/progress\", icon: \"fa-chart-line\" },\n    { label: \"Badges\", path: \"/badges\", icon: \"fa-trophy\" },\n    { label: \"Profile\", path: \"/profile\", icon: \"fa-user\" },\n  ],\n} as const;\n\n// API Endpoints\nexport const API_ENDPOINTS = {\n  // Authentication\n  AUTH: {\n    LOGIN: \"/api/login\",\n    LOGOUT: \"/api/logout\", \n    REGISTER: \"/api/register\",\n    USER: \"/api/user\",\n  },\n  \n  // Core Entities\n  PROGRAMS: \"/api/programs\",\n  COURSES: \"/api/courses\",\n  USERS: \"/api/users\",\n  LEARNING_OUTCOMES: \"/api/learning-outcomes\",\n  OUTCOME_MAPPINGS: \"/api/outcome-mappings\",\n  ASSIGNMENTS: \"/api/assignments\",\n  STUDENT_SUBMISSIONS: \"/api/student-submissions\",\n  \n  // Gamification\n  STUDENT_PROGRESS: \"/api/student-progress\",\n  BADGE_TEMPLATES: \"/api/badge-templates\",\n  STUDENT_BADGES: \"/api/student-badges\",\n  LEARNING_MODULES: \"/api/learning-modules\",\n  \n  // Analytics\n  ANALYTICS: {\n    PROGRAM: \"/api/analytics/program\",\n    BLOOMS_DISTRIBUTION: \"/api/analytics/blooms-distribution\",\n    OUTCOME_PERFORMANCE: \"/api/analytics/outcome-performance\",\n  },\n} as const;\n\n// Error Messages\nexport const ERROR_MESSAGES = {\n  NETWORK_ERROR: \"Network error. Please check your connection and try again.\",\n  UNAUTHORIZED: \"You don't have permission to perform this action.\",\n  NOT_FOUND: \"The requested resource was not found.\",\n  VALIDATION_FAILED: \"Please check your input and try again.\",\n  SERVER_ERROR: \"Something went wrong on our end. Please try again later.\",\n  DUPLICATE_ENTRY: \"This item already exists.\",\n  INVALID_CREDENTIALS: \"Invalid username or password.\",\n  SESSION_EXPIRED: \"Your session has expired. Please log in again.\",\n} as const;\n\n// Success Messages\nexport const SUCCESS_MESSAGES = {\n  CREATED: \"Successfully created!\",\n  UPDATED: \"Successfully updated!\",\n  DELETED: \"Successfully deleted!\",\n  SAVED: \"Changes saved successfully!\",\n  SUBMITTED: \"Submitted successfully!\",\n  GRADED: \"Graded successfully!\",\n  LOGGED_IN: \"Welcome back!\",\n  LOGGED_OUT: \"You have been logged out.\",\n  REGISTERED: \"Account created successfully!\",\n} as const;\n\n// File Upload Constants\nexport const FILE_UPLOAD = {\n  MAX_SIZE: 10 * 1024 * 1024, // 10MB\n  ALLOWED_TYPES: [\n    \"application/pdf\",\n    \"application/msword\", \n    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    \"text/plain\",\n    \"image/jpeg\",\n    \"image/png\",\n    \"image/gif\",\n  ],\n  ALLOWED_EXTENSIONS: [\".pdf\", \".doc\", \".docx\", \".txt\", \".jpg\", \".jpeg\", \".png\", \".gif\"],\n} as const;\n\n// Time Constants\nexport const TIME_CONSTANTS = {\n  SESSION_TIMEOUT: 8 * 60 * 60 * 1000, // 8 hours\n  AUTO_SAVE_INTERVAL: 30 * 1000, // 30 seconds\n  NOTIFICATION_TIMEOUT: 5 * 1000, // 5 seconds\n  DEBOUNCE_DELAY: 300, // 300ms\n} as const;\n\n// Pagination\nexport const PAGINATION = {\n  DEFAULT_PAGE_SIZE: 20,\n  MAX_PAGE_SIZE: 100,\n  PAGE_SIZE_OPTIONS: [10, 20, 50, 100],\n} as const;\n\n// Theme Colors (matching design reference)\nexport const THEME_COLORS = {\n  PRIMARY: \"hsl(142, 76%, 36%)\", // Green\n  SECONDARY: \"hsl(199, 89%, 48%)\", // Blue  \n  ACCENT: \"hsl(43, 96%, 56%)\", // Yellow\n  DESTRUCTIVE: \"hsl(0, 84%, 60%)\", // Red\n  SUCCESS: \"hsl(120, 50%, 50%)\", // Green\n  WARNING: \"hsl(38, 92%, 50%)\", // Orange\n  INFO: \"hsl(200, 94%, 55%)\", // Light Blue\n} as const;\n\n// Export all constants\nexport {\n  ROLES,\n  BLOOMS_LEVELS, \n  OUTCOME_TYPES,\n  BADGE_TYPES,\n};\n","size_bytes":9675},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Component />\n}\n","size_bytes":675},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"// Additional types for the application that extend the shared schema types\n\nexport interface GamificationStats {\n  totalXP: number;\n  currentLevel: number;\n  currentStreak: number;\n  longestStreak: number;\n  totalBadges: number;\n  xpToday: number;\n}\n\nexport interface BadgeEarned {\n  id: string;\n  name: string;\n  description: string;\n  type: \"achievement\" | \"mastery\" | \"streak\" | \"special\";\n  iconUrl: string;\n  color: string;\n  earnedAt: Date;\n  xpReward: number;\n}\n\nexport interface BadgeAvailable {\n  id: string;\n  name: string;\n  description: string;\n  type: \"achievement\" | \"mastery\" | \"streak\" | \"special\";\n  iconUrl: string;\n  color: string;\n  progress: number;\n  requirement: string;\n  xpReward: number;\n}\n\nexport interface LearningPathNode {\n  id: string;\n  title: string;\n  type: \"module\" | \"assignment\" | \"quiz\" | \"project\";\n  status: \"completed\" | \"in-progress\" | \"locked\";\n  xpReward: number;\n  completionPercentage?: number;\n  order: number;\n}\n\nexport interface CompetencyProfile {\n  name: string;\n  percentage: number;\n  color: string;\n  description?: string;\n}\n\nexport interface EvidenceSubmission {\n  id: string;\n  assignment: string;\n  score: number;\n  maxScore: number;\n  cloCode: string;\n  bloomsLevel: string;\n  submittedAt: Date;\n}\n\nexport interface OutcomeAggregation {\n  code: string;\n  title: string;\n  averageScore: number;\n  totalSubmissions: number;\n  bloomsLevel: string;\n  type: \"CLO\" | \"PLO\" | \"ILO\";\n}\n\nexport interface MappingConnection {\n  sourceId: string;\n  targetId: string;\n  weight: number;\n  strength: \"strong\" | \"moderate\" | \"weak\";\n}\n\nexport interface DashboardStats {\n  programsManaged?: number;\n  studentsTracked?: number;\n  outcomesMapped?: string;\n  coursesTeaching?: number;\n  assignmentsCreated?: number;\n  pendingGrading?: number;\n  totalPrograms?: number;\n  totalUsers?: number;\n  systemHealth?: string;\n}\n\nexport interface ActivityItem {\n  id: string;\n  type: \"creation\" | \"update\" | \"completion\" | \"achievement\";\n  title: string;\n  description: string;\n  timestamp: Date;\n  icon: string;\n  color: string;\n}\n\nexport interface PendingTask {\n  id: string;\n  title: string;\n  priority: \"high\" | \"medium\" | \"low\";\n  dueDate?: Date;\n  type: \"review\" | \"approval\" | \"creation\" | \"update\";\n}\n\n// Form validation types\nexport interface OutcomeFormData {\n  code: string;\n  title: string;\n  description: string;\n  type: \"ILO\" | \"PLO\" | \"CLO\";\n  bloomsLevel: \"remember\" | \"understand\" | \"apply\" | \"analyze\" | \"evaluate\" | \"create\";\n  programId?: string;\n  courseId?: string;\n}\n\n// Analytics types\nexport interface BloomsTaxonomyDistribution {\n  level: string;\n  count: number;\n  percentage: number;\n}\n\nexport interface ProgramAnalytics {\n  programId: string;\n  programName: string;\n  totalCourses: number;\n  totalOutcomes: number;\n  avgCompletion: number;\n  studentCount: number;\n}\n\nexport interface SystemHealthMetrics {\n  databasePerformance: number;\n  apiResponseTime: number;\n  userActivity: number;\n  dataIntegrity: number;\n  overallHealth: number;\n}\n\n// Navigation and UI types\nexport interface NavigationItem {\n  label: string;\n  path: string;\n  icon: string;\n  requiresRole?: string[];\n}\n\nexport interface QuickAction {\n  label: string;\n  icon: string;\n  action: () => void;\n  variant?: \"default\" | \"secondary\" | \"outline\";\n  testId?: string;\n}\n\n// Error handling types\nexport interface APIError {\n  message: string;\n  status: number;\n  code?: string;\n}\n\nexport interface ValidationError {\n  field: string;\n  message: string;\n}\n","size_bytes":3479},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/auth-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport edeviserLogo from \"@assets/edeviser-logo.png\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst registerSchema = insertUserSchema.extend({\n  confirmPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"login\");\n\n  // Redirect if already logged in\n  useEffect(() => {\n    if (user) {\n      setLocation(\"/\");\n    }\n  }, [user, setLocation]);\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      role: \"student\",\n    },\n  });\n\n  const handleLogin = async (data: LoginFormData) => {\n    await loginMutation.mutateAsync(data);\n    setLocation(\"/\");\n  };\n\n  const handleRegister = async (data: RegisterFormData) => {\n    const { confirmPassword, ...registerData } = data;\n    await registerMutation.mutateAsync(registerData);\n    setLocation(\"/\");\n  };\n\n  const profileShortcuts = [\n    {\n      role: \"admin\",\n      username: \"admin\",\n      password: \"admin123\",\n      name: \"Administrator\",\n      color: \"bg-red-500 hover:bg-red-600\",\n      icon: \"fas fa-shield-alt\",\n      description: \"System Administrator\"\n    },\n    {\n      role: \"coordinator\",\n      username: \"coordinator\", \n      password: \"coordinator123\",\n      name: \"Program Coordinator\",\n      color: \"bg-primary hover:bg-primary/80\",\n      icon: \"fas fa-sitemap\",\n      description: \"Program Management\"\n    },\n    {\n      role: \"teacher\",\n      username: \"teacher\",\n      password: \"teacher123\", \n      name: \"Course Teacher\",\n      color: \"bg-blue-500 hover:bg-blue-600\",\n      icon: \"fas fa-chalkboard-teacher\",\n      description: \"Course Instruction\"\n    },\n    {\n      role: \"student\",\n      username: \"Admin\",\n      password: \"student123\",\n      name: \"Student\",\n      color: \"bg-green-500 hover:bg-green-600\", \n      icon: \"fas fa-graduation-cap\",\n      description: \"Learning Journey\"\n    }\n  ];\n\n  const handleQuickLogin = (username: string, password: string) => {\n    loginForm.setValue(\"username\", username);\n    loginForm.setValue(\"password\", password);\n    setActiveTab(\"login\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex\" data-testid=\"auth-page\">\n      {/* Left Column - Forms */}\n      <div className=\"flex-1 flex items-center justify-center px-4 sm:px-6 lg:px-8\">\n        <div className=\"w-full max-w-md space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-6\">\n              <img \n                src={edeviserLogo} \n                alt=\"Edeviser Logo\" \n                className=\"h-32 w-auto\" \n                data-testid=\"img-auth-logo\"\n              />\n            </div>\n            <h2 className=\"text-3xl font-bold text-foreground\">Welcome</h2>\n            <p className=\"mt-2 text-sm text-muted-foreground\">\n              Your gamified learning outcome mastery platform\n            </p>\n          </div>\n\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">Sign In</TabsTrigger>\n              <TabsTrigger value=\"register\" data-testid=\"tab-register\">Sign Up</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Sign In</CardTitle>\n                  <CardDescription>\n                    Enter your credentials to access your account\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={loginForm.handleSubmit(handleLogin)} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-username\">Username</Label>\n                      <Input\n                        id=\"login-username\"\n                        {...loginForm.register(\"username\")}\n                        placeholder=\"Enter your username\"\n                        data-testid=\"input-login-username\"\n                      />\n                      {loginForm.formState.errors.username && (\n                        <p className=\"text-sm text-destructive\">\n                          {loginForm.formState.errors.username.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-password\">Password</Label>\n                      <Input\n                        id=\"login-password\"\n                        type=\"password\"\n                        {...loginForm.register(\"password\")}\n                        placeholder=\"Enter your password\"\n                        data-testid=\"input-login-password\"\n                      />\n                      {loginForm.formState.errors.password && (\n                        <p className=\"text-sm text-destructive\">\n                          {loginForm.formState.errors.password.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={loginMutation.isPending}\n                      data-testid=\"button-login\"\n                    >\n                      {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n                    </Button>\n                  </form>\n\n                  {/* Quick Login Shortcuts */}\n                  <div className=\"mt-6 pt-6 border-t border-border\">\n                    <div className=\"text-center mb-4\">\n                      <h4 className=\"text-sm font-medium text-muted-foreground\">Quick Access</h4>\n                      <p className=\"text-xs text-muted-foreground mt-1\">Demo profiles for testing</p>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      {profileShortcuts.map((profile) => (\n                        <Button\n                          key={profile.role}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className={`h-auto p-3 flex flex-col items-center space-y-2 ${profile.color} text-white border-0 hover:text-white`}\n                          onClick={() => handleQuickLogin(profile.username, profile.password)}\n                          data-testid={`shortcut-${profile.role}`}\n                        >\n                          <i className={`${profile.icon} text-lg`}></i>\n                          <div className=\"text-center\">\n                            <div className=\"text-xs font-semibold\">{profile.name}</div>\n                            <div className=\"text-xs opacity-90\">{profile.description}</div>\n                          </div>\n                        </Button>\n                      ))}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground text-center mt-3\">\n                      Click any profile to auto-fill login credentials\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"register\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Create Account</CardTitle>\n                  <CardDescription>\n                    Join the OBE Hub community today\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={registerForm.handleSubmit(handleRegister)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"register-firstName\">First Name</Label>\n                        <Input\n                          id=\"register-firstName\"\n                          {...registerForm.register(\"firstName\")}\n                          placeholder=\"John\"\n                          data-testid=\"input-register-firstname\"\n                        />\n                        {registerForm.formState.errors.firstName && (\n                          <p className=\"text-sm text-destructive\">\n                            {registerForm.formState.errors.firstName.message}\n                          </p>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"register-lastName\">Last Name</Label>\n                        <Input\n                          id=\"register-lastName\"\n                          {...registerForm.register(\"lastName\")}\n                          placeholder=\"Doe\"\n                          data-testid=\"input-register-lastname\"\n                        />\n                        {registerForm.formState.errors.lastName && (\n                          <p className=\"text-sm text-destructive\">\n                            {registerForm.formState.errors.lastName.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-username\">Username</Label>\n                      <Input\n                        id=\"register-username\"\n                        {...registerForm.register(\"username\")}\n                        placeholder=\"johndoe\"\n                        data-testid=\"input-register-username\"\n                      />\n                      {registerForm.formState.errors.username && (\n                        <p className=\"text-sm text-destructive\">\n                          {registerForm.formState.errors.username.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-email\">Email</Label>\n                      <Input\n                        id=\"register-email\"\n                        type=\"email\"\n                        {...registerForm.register(\"email\")}\n                        placeholder=\"john.doe@example.com\"\n                        data-testid=\"input-register-email\"\n                      />\n                      {registerForm.formState.errors.email && (\n                        <p className=\"text-sm text-destructive\">\n                          {registerForm.formState.errors.email.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-role\">Role</Label>\n                      <Select\n                        onValueChange={(value) => registerForm.setValue(\"role\", value as any)}\n                        defaultValue=\"student\"\n                      >\n                        <SelectTrigger data-testid=\"select-register-role\">\n                          <SelectValue placeholder=\"Select your role\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"student\">Student</SelectItem>\n                          <SelectItem value=\"teacher\">Teacher</SelectItem>\n                          <SelectItem value=\"coordinator\">Coordinator</SelectItem>\n                          <SelectItem value=\"admin\">Administrator</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      {registerForm.formState.errors.role && (\n                        <p className=\"text-sm text-destructive\">\n                          {registerForm.formState.errors.role.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-password\">Password</Label>\n                      <Input\n                        id=\"register-password\"\n                        type=\"password\"\n                        {...registerForm.register(\"password\")}\n                        placeholder=\"Enter your password\"\n                        data-testid=\"input-register-password\"\n                      />\n                      {registerForm.formState.errors.password && (\n                        <p className=\"text-sm text-destructive\">\n                          {registerForm.formState.errors.password.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-confirmPassword\">Confirm Password</Label>\n                      <Input\n                        id=\"register-confirmPassword\"\n                        type=\"password\"\n                        {...registerForm.register(\"confirmPassword\")}\n                        placeholder=\"Confirm your password\"\n                        data-testid=\"input-register-confirm-password\"\n                      />\n                      {registerForm.formState.errors.confirmPassword && (\n                        <p className=\"text-sm text-destructive\">\n                          {registerForm.formState.errors.confirmPassword.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={registerMutation.isPending}\n                      data-testid=\"button-register\"\n                    >\n                      {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Right Column - Hero Section */}\n      <div className=\"hidden lg:flex flex-1 bg-gradient-to-br from-primary to-secondary text-primary-foreground\">\n        <div className=\"flex items-center justify-center p-12\">\n          <div className=\"max-w-md text-center space-y-6\">\n            <div className=\"space-y-2\">\n              <h3 className=\"text-4xl font-bold\">Master Your Learning Outcomes</h3>\n              <p className=\"text-lg opacity-90\">\n                Experience gamified education with comprehensive OBE tracking, \n                Bloom's taxonomy integration, and real-time progress monitoring.\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-white/20 rounded-full p-2\">\n                  <i className=\"fas fa-trophy text-lg\"></i>\n                </div>\n                <span className=\"text-sm\">Earn badges and track achievements</span>\n              </div>\n              \n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-white/20 rounded-full p-2\">\n                  <i className=\"fas fa-chart-line text-lg\"></i>\n                </div>\n                <span className=\"text-sm\">Visual outcome mapping & analytics</span>\n              </div>\n              \n              <div className=\"flex items-center space-x-3\">\n                <div className=\"bg-white/20 rounded-full p-2\">\n                  <i className=\"fas fa-users text-lg\"></i>\n                </div>\n                <span className=\"text-sm\">Role-based collaborative learning</span>\n              </div>\n            </div>\n\n            <div className=\"bg-white/10 rounded-2xl p-6 backdrop-blur-sm\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <span className=\"text-sm opacity-75\">Your Progress</span>\n                <span className=\"text-sm font-semibold\">Level 5</span>\n              </div>\n              <div className=\"w-full bg-white/20 rounded-full h-3\">\n                <div className=\"bg-accent h-3 rounded-full\" style={{ width: '68%' }}></div>\n              </div>\n              <div className=\"flex items-center justify-between mt-2 text-xs opacity-75\">\n                <span>1,250 XP</span>\n                <span>Next: 1,500 XP</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17702},"client/src/pages/home-page.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport CoordinatorDashboard from \"@/components/dashboard/coordinator-dashboard\";\nimport { StudentOnboardingWrapper } from \"@/components/onboarding/student-onboarding-wrapper\";\nimport TeacherDashboard from \"@/components/dashboard/teacher-dashboard\";\nimport AdminDashboard from \"@/components/dashboard/admin-dashboard\";\nimport { NavigationHeader } from \"@/components/navigation/navigation-header\";\n\nexport default function HomePage() {\n  const { user } = useAuth();\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-foreground\">Loading...</h2>\n        </div>\n      </div>\n    );\n  }\n\n  const renderDashboard = () => {\n    switch (user.role) {\n      case \"admin\":\n        return <AdminDashboard />;\n      case \"coordinator\":\n        return <CoordinatorDashboard />;\n      case \"teacher\":\n        return <TeacherDashboard />;\n      case \"student\":\n        return <StudentOnboardingWrapper />;\n      default:\n        return <div>Invalid role</div>;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"home-page\">\n      <NavigationHeader />\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {renderDashboard()}\n      </main>\n    </div>\n  );\n}\n","size_bytes":1379},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/analytics/evidence-rollup.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp, Users, Target, Calendar, Filter } from \"lucide-react\";\nimport type { StudentSubmission, LearningOutcome, Program } from \"@shared/schema\";\n\ninterface EvidenceRollupProps {\n  selectedProgram?: string;\n  reportingPeriod?: string;\n}\n\nexport function EvidenceRollup({ selectedProgram = \"all\", reportingPeriod = \"all-time\" }: EvidenceRollupProps = {}) {\n  const { data: submissions = [], isLoading: submissionsLoading } = useQuery<StudentSubmission[]>({\n    queryKey: [\"/api/student-submissions\"],\n  });\n\n  const { data: learningOutcomes = [], isLoading: outcomesLoading } = useQuery<LearningOutcome[]>({\n    queryKey: [\"/api/learning-outcomes\"],\n  });\n\n  const { data: programs = [], isLoading: programsLoading } = useQuery<Program[]>({\n    queryKey: [\"/api/programs\"],\n  });\n\n  const isLoading = submissionsLoading || outcomesLoading || programsLoading;\n\n  // Mock evidence data for demonstration\n  const evidenceFlow = {\n    studentSubmissions: [\n      {\n        id: \"1\",\n        assignment: \"Stack Implementation\",\n        score: 85,\n        maxScore: 100,\n        cloCode: \"CLO-2.1\",\n        bloomsLevel: \"apply\",\n        submittedAt: new Date(\"2024-01-15\")\n      },\n      {\n        id: \"2\", \n        assignment: \"Data Structures Quiz\",\n        score: 92,\n        maxScore: 100,\n        cloCode: \"CLO-1.2\", \n        bloomsLevel: \"understand\",\n        submittedAt: new Date(\"2024-01-14\")\n      },\n      {\n        id: \"3\",\n        assignment: \"Algorithm Analysis\",\n        score: 78,\n        maxScore: 100,\n        cloCode: \"CLO-3.1\",\n        bloomsLevel: \"analyze\", \n        submittedAt: new Date(\"2024-01-13\")\n      }\n    ],\n    cloAggregation: [\n      {\n        code: \"CLO-1\",\n        title: \"Basic Concepts\",\n        averageScore: 89,\n        totalSubmissions: 247,\n        bloomsLevel: \"understand\"\n      },\n      {\n        code: \"CLO-2\", \n        title: \"Implementation\",\n        averageScore: 82,\n        totalSubmissions: 231,\n        bloomsLevel: \"apply\"\n      },\n      {\n        code: \"CLO-3\",\n        title: \"Analysis\",\n        averageScore: 76,\n        totalSubmissions: 198,\n        bloomsLevel: \"analyze\"\n      }\n    ],\n    ploRollup: [\n      {\n        code: \"PLO-1\",\n        title: \"Software Design\", \n        weightedAverage: 84,\n        mappedCLOs: 8,\n        bloomsLevel: \"create\"\n      },\n      {\n        code: \"PLO-2\",\n        title: \"Data Structures\",\n        weightedAverage: 79,\n        mappedCLOs: 6,\n        bloomsLevel: \"analyze\"\n      }\n    ],\n    iloImpact: [\n      {\n        code: \"ILO-1\",\n        title: \"Critical Thinking\",\n        institutionAverage: 81,\n        programsContributing: 3,\n        bloomsLevel: \"evaluate\"\n      },\n      {\n        code: \"ILO-2\", \n        title: \"Communication\",\n        institutionAverage: 87,\n        programsContributing: 3,\n        bloomsLevel: \"create\"\n      }\n    ]\n  };\n\n  const metrics = {\n    totalSubmissions: submissions.length || 1247,\n    avgCLOScore: 83.2,\n    mappingCoverage: 94,\n    dataFreshness: \"Real-time\"\n  };\n\n  const getBloomsBadgeColor = (level: string) => {\n    const colors = {\n      remember: \"bg-purple-500\",\n      understand: \"bg-blue-500\",\n      apply: \"bg-green-500\", \n      analyze: \"bg-yellow-500\",\n      evaluate: \"bg-orange-500\",\n      create: \"bg-red-500\"\n    };\n    return colors[level as keyof typeof colors] || \"bg-gray-500\";\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"w-full\" data-testid=\"evidence-rollup-loading\">\n        <CardHeader>\n          <div className=\"animate-pulse\">\n            <div className=\"h-6 bg-muted rounded w-1/2 mb-2\"></div>\n            <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-24 bg-muted rounded animate-pulse\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full\" data-testid=\"evidence-rollup\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"text-2xl font-bold flex items-center\">\n              <TrendingUp className=\"w-6 h-6 text-primary mr-3\" />\n              Evidence Roll-up System\n            </CardTitle>\n            <CardDescription>\n              Real-time tracking of student performance from course level to institutional outcomes\n            </CardDescription>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Select defaultValue=\"all\">\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Filter by program\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Programs</SelectItem>\n                {programs?.map((program) => (\n                  <SelectItem key={program.id} value={program.id}>\n                    {program.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <Filter className=\"w-3 h-3 mr-1\" />\n              {selectedProgram === \"all\" ? \"All Programs\" : \"Filtered\"}\n            </Badge>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Evidence Flow Description */}\n        <div className=\"text-center bg-muted/10 rounded-lg p-4\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-2\">Evidence Traceability Flow</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Automated aggregation of student performance data from assignments, quizzes, and projects, \n            rolling up evidence from CLO to PLO to ILO levels for comprehensive outcome assessment.\n          </p>\n        </div>\n\n        {/* Flow Diagram */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          \n          {/* Student Submissions Level */}\n          <div className=\"bg-white rounded-xl p-4 shadow-sm border border-border\">\n            <h4 className=\"text-sm font-medium text-green-700 mb-4 flex items-center\">\n              <Users className=\"w-4 h-4 mr-2\" />\n              Student Submissions\n            </h4>\n            <div className=\"space-y-3\">\n              {evidenceFlow.studentSubmissions.map((submission, index) => (\n                <div key={submission.id} className=\"bg-green-50 border border-green-200 rounded-lg p-3\" data-testid={`submission-${index}`}>\n                  <div className=\"text-xs font-medium text-green-800 mb-1\">{submission.assignment}</div>\n                  <div className=\"text-xs text-green-600\">Score: {submission.score}/{submission.maxScore}</div>\n                  <div className=\"flex items-center justify-between mt-2\">\n                    <Badge variant=\"outline\" className=\"text-xs\">{submission.cloCode}</Badge>\n                    <Badge className={`text-xs ${getBloomsBadgeColor(submission.bloomsLevel)} text-white border-none`}>\n                      {submission.bloomsLevel}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* CLO Aggregation Level */}\n          <div className=\"bg-white rounded-xl p-4 shadow-sm border border-border\">\n            <h4 className=\"text-sm font-medium text-blue-700 mb-4 flex items-center\">\n              <Target className=\"w-4 h-4 mr-2\" />\n              CLO Aggregation\n            </h4>\n            <div className=\"space-y-3\">\n              {evidenceFlow.cloAggregation.map((clo, index) => (\n                <div key={clo.code} className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\" data-testid={`clo-aggregation-${index}`}>\n                  <div className=\"text-xs font-medium text-blue-800 mb-1\">{clo.code}: {clo.title}</div>\n                  <div className=\"text-xs text-blue-600\">Avg: {clo.averageScore}%</div>\n                  <div className=\"text-xs text-blue-600 mb-2\">{clo.totalSubmissions} submissions</div>\n                  <Progress value={clo.averageScore} className=\"h-2\" />\n                  <Badge className={`text-xs mt-2 ${getBloomsBadgeColor(clo.bloomsLevel)} text-white border-none`}>\n                    {clo.bloomsLevel}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* PLO Roll-up Level */}\n          <div className=\"bg-white rounded-xl p-4 shadow-sm border border-border\">\n            <h4 className=\"text-sm font-medium text-purple-700 mb-4 flex items-center\">\n              <i className=\"fas fa-layer-group mr-2\"></i>\n              PLO Roll-up\n            </h4>\n            <div className=\"space-y-3\">\n              {evidenceFlow.ploRollup.map((plo, index) => (\n                <div key={plo.code} className=\"bg-purple-50 border border-purple-200 rounded-lg p-3\" data-testid={`plo-rollup-${index}`}>\n                  <div className=\"text-xs font-medium text-purple-800 mb-1\">{plo.code}: {plo.title}</div>\n                  <div className=\"text-xs text-purple-600\">Weighted Avg: {plo.weightedAverage}%</div>\n                  <div className=\"text-xs text-purple-600 mb-2\">{plo.mappedCLOs} mapped CLOs</div>\n                  <Progress value={plo.weightedAverage} className=\"h-2\" />\n                  <Badge className={`text-xs mt-2 ${getBloomsBadgeColor(plo.bloomsLevel)} text-white border-none`}>\n                    {plo.bloomsLevel}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* ILO Impact Level */}\n          <div className=\"bg-white rounded-xl p-4 shadow-sm border border-border\">\n            <h4 className=\"text-sm font-medium text-red-700 mb-4 flex items-center\">\n              <i className=\"fas fa-university mr-2\"></i>\n              ILO Impact\n            </h4>\n            <div className=\"space-y-3\">\n              {evidenceFlow.iloImpact.map((ilo, index) => (\n                <div key={ilo.code} className=\"bg-red-50 border border-red-200 rounded-lg p-3\" data-testid={`ilo-impact-${index}`}>\n                  <div className=\"text-xs font-medium text-red-800 mb-1\">{ilo.code}: {ilo.title}</div>\n                  <div className=\"text-xs text-red-600\">Institution Avg: {ilo.institutionAverage}%</div>\n                  <div className=\"text-xs text-red-600 mb-2\">{ilo.programsContributing} programs</div>\n                  <Progress value={ilo.institutionAverage} className=\"h-2\" />\n                  <Badge className={`text-xs mt-2 ${getBloomsBadgeColor(ilo.bloomsLevel)} text-white border-none`}>\n                    {ilo.bloomsLevel}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Evidence Metrics Summary */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"bg-white rounded-lg p-4 text-center shadow-sm border border-border\">\n            <div className=\"text-lg font-bold text-primary\" data-testid=\"metric-total-submissions\">\n              {metrics.totalSubmissions.toLocaleString()}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Total Submissions</div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg p-4 text-center shadow-sm border border-border\">\n            <div className=\"text-lg font-bold text-secondary\" data-testid=\"metric-avg-clo-score\">\n              {metrics.avgCLOScore}%\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Avg CLO Score</div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg p-4 text-center shadow-sm border border-border\">\n            <div className=\"text-lg font-bold text-accent\" data-testid=\"metric-mapping-coverage\">\n              {metrics.mappingCoverage}%\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Mapping Coverage</div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg p-4 text-center shadow-sm border border-border\">\n            <div className=\"text-lg font-bold text-green-500\" data-testid=\"metric-data-freshness\">\n              {metrics.dataFreshness}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Data Freshness</div>\n          </div>\n        </div>\n\n        {/* Flow Connections Visualization */}\n        <div className=\"bg-muted/10 rounded-lg p-6\">\n          <h4 className=\"font-medium text-foreground mb-4 text-center\">Evidence Flow Connections</h4>\n          \n          <div className=\"flex items-center justify-center space-x-8\">\n            {/* Student Work */}\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-green-500 rounded-full flex items-center justify-center text-white mb-2\">\n                <i className=\"fas fa-file-alt\"></i>\n              </div>\n              <div className=\"text-xs font-medium\">Student Work</div>\n              <div className=\"text-xs text-muted-foreground\">Assignments, Quizzes</div>\n            </div>\n\n            {/* Arrow */}\n            <i className=\"fas fa-arrow-right text-muted-foreground\"></i>\n\n            {/* CLO Assessment */}\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center text-white mb-2\">\n                <i className=\"fas fa-check-circle\"></i>\n              </div>\n              <div className=\"text-xs font-medium\">CLO Assessment</div>\n              <div className=\"text-xs text-muted-foreground\">Course Outcomes</div>\n            </div>\n\n            {/* Arrow */}\n            <i className=\"fas fa-arrow-right text-muted-foreground\"></i>\n\n            {/* PLO Mapping */}\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-purple-500 rounded-full flex items-center justify-center text-white mb-2\">\n                <i className=\"fas fa-sitemap\"></i>\n              </div>\n              <div className=\"text-xs font-medium\">PLO Mapping</div>\n              <div className=\"text-xs text-muted-foreground\">Program Outcomes</div>\n            </div>\n\n            {/* Arrow */}\n            <i className=\"fas fa-arrow-right text-muted-foreground\"></i>\n\n            {/* ILO Achievement */}\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-red-500 rounded-full flex items-center justify-center text-white mb-2\">\n                <i className=\"fas fa-trophy\"></i>\n              </div>\n              <div className=\"text-xs font-medium\">ILO Achievement</div>\n              <div className=\"text-xs text-muted-foreground\">Institutional Goals</div>\n            </div>\n          </div>\n        </div>\n\n        {/* System Information */}\n        <div className=\"bg-primary/10 border border-primary/20 rounded-lg p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <i className=\"fas fa-info-circle text-primary text-lg mt-0.5\"></i>\n            <div>\n              <h4 className=\"font-medium text-primary-foreground\">Automated Evidence Collection</h4>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                The system automatically aggregates student performance data from assignments, quizzes, and projects, \n                rolling up evidence from CLO to PLO to ILO levels for comprehensive outcome assessment. \n                Data is updated in real-time as new submissions are graded.\n              </p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":16007},"client/src/components/dashboard/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { OutcomeForm } from \"@/components/outcomes/outcome-form\";\nimport type { SafeUser, Program, LearningOutcome } from \"@shared/schema\";\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [iloDialogOpen, setIloDialogOpen] = useState(false);\n  const [selectedIlo, setSelectedIlo] = useState<LearningOutcome | undefined>(undefined);\n\n  const roleUpdateMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string; role: string }) => {\n      const res = await apiRequest(\"PUT\", `/api/users/${userId}`, { role });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Role updated successfully\",\n        description: \"User role has been changed.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to update role\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRoleChange = (userId: string, newRole: string) => {\n    roleUpdateMutation.mutate({ userId, role: newRole });\n  };\n\n  const { data: programs = [], isLoading: programsLoading } = useQuery<Program[]>({\n    queryKey: [\"/api/programs\"],\n    enabled: !!user,\n  });\n\n  const { data: users = [] } = useQuery<SafeUser[]>({\n    queryKey: [\"/api/users\"],\n    enabled: !!user,\n  });\n\n  const { data: learningOutcomes = [] } = useQuery<LearningOutcome[]>({\n    queryKey: [\"/api/learning-outcomes\"],\n    enabled: !!user,\n  });\n\n  const { data: bloomsDistribution = [] } = useQuery<any[]>({\n    queryKey: [\"/api/analytics/blooms-distribution\"],\n    enabled: !!user,\n  });\n\n  const totalUsers = users?.length || 0;\n  const coordinators = users?.filter(u => u.role === \"coordinator\") || [];\n  const teachers = users?.filter(u => u.role === \"teacher\") || [];\n  const students = users?.filter(u => u.role === \"student\") || [];\n\n  const ilos = learningOutcomes?.filter(outcome => outcome.type === \"ILO\") || [];\n  const plos = learningOutcomes?.filter(outcome => outcome.type === \"PLO\") || [];\n  const clos = learningOutcomes?.filter(outcome => outcome.type === \"CLO\") || [];\n\n  if (programsLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"admin-dashboard\">\n      {/* Welcome Hero Section */}\n      <section className=\"bg-gradient-to-r from-red-500 via-orange-500 to-yellow-500 rounded-2xl p-8 text-white relative overflow-hidden\">\n        <div className=\"relative z-10\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"welcome-title\">\n                Welcome back, {user?.firstName}! 🎓\n              </h1>\n              <p className=\"text-lg opacity-90 mb-4\">\n                Ready to oversee the institution's OBE excellence today?\n              </p>\n              <div className=\"flex items-center space-x-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-university text-xl\"></i>\n                  <span className=\"font-medium\" data-testid=\"stat-total-programs\">\n                    {programs?.length || 0} Programs Active\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-users-cog text-xl\"></i>\n                  <span className=\"font-medium\" data-testid=\"stat-total-users\">\n                    {totalUsers} System Users\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-heartbeat text-xl\"></i>\n                  <span className=\"font-medium\" data-testid=\"stat-system-health\">\n                    98% System Health\n                  </span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/20 backdrop-blur-sm rounded-2xl p-4 text-center min-w-[120px]\">\n              <i className=\"fas fa-crown text-3xl text-yellow-300 mb-2\"></i>\n              <div className=\"text-sm font-medium\">System</div>\n              <div className=\"text-sm font-medium\">Administrator</div>\n              <div className=\"text-xs opacity-75 mt-1\">Master Level</div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Decorative elements */}\n        <div className=\"absolute top-4 right-4 w-32 h-32 bg-white/10 rounded-full animate-pulse\"></div>\n        <div className=\"absolute bottom-4 left-4 w-20 h-20 bg-white/5 rounded-full\"></div>\n      </section>\n\n      {/* Dashboard Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"programs\" data-testid=\"tab-programs\">Programs</TabsTrigger>\n          <TabsTrigger value=\"users\" data-testid=\"tab-users\">Users</TabsTrigger>\n          <TabsTrigger value=\"outcomes\" data-testid=\"tab-outcomes\">ILO Management</TabsTrigger>\n          <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">System Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Quick Actions */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n            <Card className=\"lg:col-span-1\">\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center\">\n                  <i className=\"fas fa-bolt text-primary mr-2\"></i>\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button className=\"w-full\" data-testid=\"button-create-program\">\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Create Program\n                </Button>\n                <Button variant=\"secondary\" className=\"w-full\" data-testid=\"button-manage-users\">\n                  <i className=\"fas fa-users-cog mr-2\"></i>\n                  Manage Users\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-create-ilo\">\n                  <i className=\"fas fa-university mr-2\"></i>\n                  Create ILO\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-system-reports\">\n                  <i className=\"fas fa-chart-bar mr-2\"></i>\n                  System Reports\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-badge-templates\">\n                  <i className=\"fas fa-medal mr-2\"></i>\n                  Badge Templates\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Statistics Cards */}\n            <div className=\"lg:col-span-3\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <Card className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"bg-blue-500/10 text-blue-500 p-3 rounded-xl\">\n                        <i className=\"fas fa-graduation-cap text-xl\"></i>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-active-programs\">\n                          {programs?.length || 0}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">Active Programs</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Institution Wide</span>\n                      <span className=\"text-blue-500 font-medium\">All levels</span>\n                    </div>\n                    <Progress value={100} className=\"mt-2\" />\n                  </CardContent>\n                </Card>\n\n                <Card className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"bg-green-500/10 text-green-500 p-3 rounded-xl\">\n                        <i className=\"fas fa-users text-xl\"></i>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-system-users\">\n                          {totalUsers}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">System Users</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Active Users</span>\n                      <span className=\"text-green-500 font-medium\">All roles</span>\n                    </div>\n                    <Progress value={100} className=\"mt-2\" />\n                  </CardContent>\n                </Card>\n\n                <Card className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"bg-purple-500/10 text-purple-500 p-3 rounded-xl\">\n                        <i className=\"fas fa-bullseye text-xl\"></i>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-total-ilos\">\n                          {ilos.length}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">ILOs Created</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Institutional</span>\n                      <span className=\"text-purple-500 font-medium\">Global scope</span>\n                    </div>\n                    <Progress value={100} className=\"mt-2\" />\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n\n          {/* System Health and User Distribution */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* System Health */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <i className=\"fas fa-heartbeat text-green-500 mr-3\"></i>\n                  System Health Monitor\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Database Performance</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <Progress value={98} className=\"w-20\" />\n                      <span className=\"text-sm font-semibold text-green-500\">98%</span>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">API Response Time</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <Progress value={95} className=\"w-20\" />\n                      <span className=\"text-sm font-semibold text-green-500\">95%</span>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">User Activity</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <Progress value={89} className=\"w-20\" />\n                      <span className=\"text-sm font-semibold text-yellow-600\">89%</span>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Data Integrity</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <Progress value={100} className=\"w-20\" />\n                      <span className=\"text-sm font-semibold text-green-500\">100%</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Overall System Health</span>\n                    <span className=\"text-lg font-bold text-green-500\">98%</span>\n                  </div>\n                  <Progress value={98} className=\"mt-2\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* User Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <i className=\"fas fa-pie-chart text-blue-500 mr-3\"></i>\n                  User Distribution\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-500\" data-testid=\"stat-student-count\">\n                      {students.length}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Students</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-500\" data-testid=\"stat-teacher-count\">\n                      {teachers.length}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Teachers</div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n                      <span className=\"text-sm\">Students</span>\n                    </div>\n                    <span className=\"text-sm font-semibold\">{Math.round((students.length / totalUsers) * 100)}%</span>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                      <span className=\"text-sm\">Teachers</span>\n                    </div>\n                    <span className=\"text-sm font-semibold\">{Math.round((teachers.length / totalUsers) * 100)}%</span>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-purple-500 rounded-full\"></div>\n                      <span className=\"text-sm\">Coordinators</span>\n                    </div>\n                    <span className=\"text-sm font-semibold\">{Math.round((coordinators.length / totalUsers) * 100)}%</span>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                      <span className=\"text-sm\">Administrators</span>\n                    </div>\n                    <span className=\"text-sm font-semibold\">\n                      {Math.round((users?.filter(u => u.role === \"admin\").length / totalUsers) * 100)}%\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"programs\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold text-foreground\">Program Management</h2>\n              <Button data-testid=\"button-create-new-program\">\n                <i className=\"fas fa-plus mr-2\"></i>\n                Create New Program\n              </Button>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {programs?.map((program, index) => (\n                <Card key={program.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <span data-testid={`program-name-${index}`}>{program.name}</span>\n                      <Badge variant={program.isActive ? \"default\" : \"secondary\"}>\n                        {program.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </CardTitle>\n                    <CardDescription>\n                      {program.code} • {program.level}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-muted-foreground\">Coordinator</span>\n                        <span className=\"font-semibold\">\n                          {coordinators.find(c => c.id === program.coordinatorId)?.firstName || \"Unassigned\"}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-muted-foreground\">Status</span>\n                        <Badge variant=\"outline\" className=\"text-green-600\">Operational</Badge>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button size=\"sm\" className=\"flex-1\" data-testid={`button-manage-program-${index}`}>\n                          Manage\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\" className=\"flex-1\" data-testid={`button-analytics-program-${index}`}>\n                          Analytics\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )) || []}\n              \n              {!programs?.length && (\n                <div className=\"col-span-full text-center py-12\">\n                  <i className=\"fas fa-graduation-cap text-muted-foreground text-4xl mb-4\"></i>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No programs created</h3>\n                  <p className=\"text-muted-foreground mb-4\">Start by creating your institution's first program.</p>\n                  <Button data-testid=\"button-create-first-program\">\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Create First Program\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"users\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold text-foreground\">User Management</h2>\n              <div className=\"flex items-center space-x-3\">\n                <Select defaultValue=\"all\">\n                  <SelectTrigger className=\"w-[180px]\">\n                    <SelectValue placeholder=\"Filter by role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Roles</SelectItem>\n                    <SelectItem value=\"admin\">Administrators</SelectItem>\n                    <SelectItem value=\"coordinator\">Coordinators</SelectItem>\n                    <SelectItem value=\"teacher\">Teachers</SelectItem>\n                    <SelectItem value=\"student\">Students</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button data-testid=\"button-create-new-user\">\n                  <i className=\"fas fa-user-plus mr-2\"></i>\n                  Add User\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"bg-card rounded-lg border border-border overflow-hidden\">\n              <div className=\"grid grid-cols-5 gap-4 p-4 bg-muted/50 font-medium text-sm\">\n                <div>Name</div>\n                <div>Email</div>\n                <div>Role</div>\n                <div>Status</div>\n                <div>Actions</div>\n              </div>\n              \n              {users?.map((user, index) => (\n                <div key={user.id} className=\"grid grid-cols-5 gap-4 p-4 border-t border-border hover:bg-muted/20\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-semibold\">\n                      {user.firstName?.[0]}{user.lastName?.[0]}\n                    </div>\n                    <span className=\"font-medium\" data-testid={`user-name-${index}`}>\n                      {user.firstName} {user.lastName}\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\" data-testid={`user-email-${index}`}>\n                    {user.email}\n                  </div>\n                  <div>\n                    <Badge variant=\"outline\" className=\"capitalize\" data-testid={`user-role-${index}`}>\n                      {user.role}\n                    </Badge>\n                  </div>\n                  <div>\n                    <Badge variant={user.isActive ? \"default\" : \"secondary\"}>\n                      {user.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Select value={user.role} onValueChange={(newRole) => handleRoleChange(user.id, newRole)} data-testid={`select-role-${index}`}>\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"student\">Student</SelectItem>\n                        <SelectItem value=\"teacher\">Teacher</SelectItem>\n                        <SelectItem value=\"coordinator\">Coordinator</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              )) || []}\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"outcomes\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold text-foreground\">Institutional Learning Outcomes (ILOs)</h2>\n              <Button \n                data-testid=\"button-create-new-ilo\"\n                onClick={() => {\n                  setSelectedIlo(undefined);\n                  setIloDialogOpen(true);\n                }}\n              >\n                <i className=\"fas fa-plus mr-2\"></i>\n                Create New ILO\n              </Button>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {ilos.map((ilo, index) => (\n                <Card key={ilo.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <span data-testid={`ilo-code-${index}`}>{ilo.code}</span>\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {ilo.bloomsLevel}\n                      </Badge>\n                    </CardTitle>\n                    <CardDescription className=\"line-clamp-2\" data-testid={`ilo-title-${index}`}>\n                      {ilo.title}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground mb-4 line-clamp-3\">\n                      {ilo.description}\n                    </p>\n                    <div className=\"flex space-x-2\">\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        className=\"flex-1\" \n                        data-testid={`button-edit-ilo-${index}`}\n                        onClick={() => {\n                          setSelectedIlo(ilo);\n                          setIloDialogOpen(true);\n                        }}\n                      >\n                        Edit\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        className=\"flex-1\" \n                        data-testid={`button-view-ilo-${index}`}\n                        onClick={() => {\n                          setSelectedIlo(ilo);\n                          setIloDialogOpen(true);\n                        }}\n                      >\n                        View Details\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n              \n              {ilos.length === 0 && (\n                <div className=\"col-span-full text-center py-12\">\n                  <i className=\"fas fa-university text-muted-foreground text-4xl mb-4\"></i>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No ILOs created yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">Start by creating your first Institutional Learning Outcome.</p>\n                  <Button \n                    data-testid=\"button-create-first-ilo\"\n                    onClick={() => {\n                      setSelectedIlo(undefined);\n                      setIloDialogOpen(true);\n                    }}\n                  >\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Create Your First ILO\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Outcome Distribution</CardTitle>\n                <CardDescription>System-wide learning outcome statistics</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-primary mb-2\">\n                      {learningOutcomes?.length || 0}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Total Learning Outcomes</div>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">ILOs (Institutional)</span>\n                      <Badge variant=\"outline\">{ilos?.length || 0}</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">PLOs (Program)</span>\n                      <Badge variant=\"outline\">{plos?.length || 0}</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">CLOs (Course)</span>\n                      <Badge variant=\"outline\">{clos?.length || 0}</Badge>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>System Performance</CardTitle>\n                <CardDescription>Key performance indicators</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">User Engagement</span>\n                    <span className=\"text-sm font-semibold text-primary\">94%</span>\n                  </div>\n                  <Progress value={94} />\n\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Data Quality</span>\n                    <span className=\"text-sm font-semibold text-secondary\">97%</span>\n                  </div>\n                  <Progress value={97} />\n\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">System Uptime</span>\n                    <span className=\"text-sm font-semibold text-green-500\">99.9%</span>\n                  </div>\n                  <Progress value={99.9} />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n      \n      {/* ILO Management Dialog */}\n      <Dialog open={iloDialogOpen} onOpenChange={setIloDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {selectedIlo ? 'Edit Institutional Learning Outcome' : 'Create New Institutional Learning Outcome'}\n            </DialogTitle>\n          </DialogHeader>\n          <OutcomeForm\n            outcome={selectedIlo}\n            onSuccess={() => {\n              setIloDialogOpen(false);\n              setSelectedIlo(undefined);\n            }}\n            onCancel={() => {\n              setIloDialogOpen(false);\n              setSelectedIlo(undefined);\n            }}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":31772},"client/src/components/dashboard/coordinator-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { VisualMappingCanvas } from \"@/components/outcomes/visual-mapping-canvas\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { ProgressDisplay } from \"@/components/gamification/progress-display\";\nimport { EvidenceRollup } from \"@/components/analytics/evidence-rollup\";\nimport { OutcomeForm } from \"@/components/outcomes/outcome-form\";\nimport type { Program, LearningOutcome } from \"@shared/schema\";\n\nexport default function CoordinatorDashboard() {\n  const { user } = useAuth();\n  const [ploDialogOpen, setPloDialogOpen] = useState(false);\n  const [selectedPlo, setSelectedPlo] = useState<LearningOutcome | undefined>(undefined);\n\n  const { data: programs = [], isLoading: programsLoading } = useQuery<Program[]>({\n    queryKey: [\"/api/programs/coordinator/\" + user?.id],\n    enabled: !!user,\n  });\n\n  const { data: learningOutcomes = [] } = useQuery<LearningOutcome[]>({\n    queryKey: [\"/api/learning-outcomes\"],\n    enabled: !!user,\n  });\n\n  const { data: bloomsDistribution = [] } = useQuery<any[]>({\n    queryKey: [\"/api/analytics/blooms-distribution\"],\n    enabled: !!user,\n  });\n\n  const ilos = learningOutcomes?.filter(outcome => outcome.type === \"ILO\") || [];\n  const plos = learningOutcomes?.filter(outcome => outcome.type === \"PLO\") || [];\n  const clos = learningOutcomes?.filter(outcome => outcome.type === \"CLO\") || [];\n\n  const getBloomsPercentage = (level: string) => {\n    const total = bloomsDistribution?.reduce((sum, item) => sum + item.count, 0) || 1;\n    const levelCount = bloomsDistribution?.find(item => item.level === level)?.count || 0;\n    return Math.round((levelCount / total) * 100);\n  };\n\n  if (programsLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"coordinator-dashboard\">\n      {/* Welcome Hero Section */}\n      <section className=\"bg-gradient-to-r from-primary to-secondary rounded-2xl p-8 text-primary-foreground relative overflow-hidden\">\n        <div className=\"relative z-10\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"welcome-title\">\n                Welcome back, {user?.firstName}! 🎯\n              </h1>\n              <p className=\"text-lg opacity-90 mb-4\">\n                Ready to advance your programs today?\n              </p>\n              <div className=\"flex items-center space-x-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-graduation-cap text-xl\"></i>\n                  <span className=\"font-medium\" data-testid=\"stat-programs\">\n                    {programs?.length || 0} Programs Managed\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-bullseye text-xl\"></i>\n                  <span className=\"font-medium\" data-testid=\"stat-outcomes\">\n                    {plos?.length || 0} PLOs Mapped\n                  </span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/20 backdrop-blur-sm rounded-2xl p-4 text-center min-w-[120px]\">\n              <i className=\"fas fa-trophy text-3xl text-accent mb-2\"></i>\n              <div className=\"text-sm font-medium\">Program</div>\n              <div className=\"text-sm font-medium\">Excellence</div>\n              <div className=\"text-xs opacity-75 mt-1\">Level 5</div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Decorative elements */}\n        <div className=\"absolute top-4 right-4 w-32 h-32 bg-white/10 rounded-full animate-pulse\"></div>\n        <div className=\"absolute bottom-4 left-4 w-20 h-20 bg-white/5 rounded-full\"></div>\n      </section>\n\n      {/* Dashboard Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"mapping\" data-testid=\"tab-mapping\">Visual Mapping</TabsTrigger>\n          <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">Analytics</TabsTrigger>\n          <TabsTrigger value=\"evidence\" data-testid=\"tab-evidence\">Evidence Roll-up</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Quick Actions */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n            <Card className=\"lg:col-span-1\">\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center\">\n                  <i className=\"fas fa-bolt text-primary mr-2\"></i>\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button \n                  className=\"w-full\" \n                  data-testid=\"button-create-plo\"\n                  onClick={() => {\n                    setSelectedPlo(undefined);\n                    setPloDialogOpen(true);\n                  }}\n                >\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Create New PLO\n                </Button>\n                <Button variant=\"secondary\" className=\"w-full\" data-testid=\"button-visual-mapping\">\n                  <i className=\"fas fa-project-diagram mr-2\"></i>\n                  Visual Mapping\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-analytics\">\n                  <i className=\"fas fa-chart-bar mr-2\"></i>\n                  Analytics Report\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-gap-analysis\">\n                  <i className=\"fas fa-search mr-2\"></i>\n                  Gap Analysis\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Statistics Cards */}\n            <div className=\"lg:col-span-3\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <Card className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"bg-primary/10 text-primary p-3 rounded-xl\">\n                        <i className=\"fas fa-graduation-cap text-xl\"></i>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-total-programs\">\n                          {programs?.length || 0}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">Programs</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Active Programs</span>\n                      <span className=\"text-primary font-medium\">All active</span>\n                    </div>\n                    <Progress value={100} className=\"mt-2\" />\n                  </CardContent>\n                </Card>\n\n                <Card className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"bg-secondary/10 text-secondary p-3 rounded-xl\">\n                        <i className=\"fas fa-bullseye text-xl\"></i>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-total-plos\">\n                          {plos?.length || 0}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">PLOs Mapped</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Coverage Rate</span>\n                      <span className=\"text-secondary font-medium\">89% complete</span>\n                    </div>\n                    <Progress value={89} className=\"mt-2\" />\n                  </CardContent>\n                </Card>\n\n                <Card className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"bg-accent/10 text-accent p-3 rounded-xl\">\n                        <i className=\"fas fa-chart-line text-xl\"></i>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-total-clos\">\n                          {clos?.length || 0}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">CLOs Connected</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Mapping Status</span>\n                      <span className=\"text-accent font-medium\">Active</span>\n                    </div>\n                    <Progress value={75} className=\"mt-2\" />\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n\n          {/* Program Performance and Activity */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Program Performance */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <i className=\"fas fa-chart-line text-secondary mr-3\"></i>\n                  Program Performance\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {programs?.map((program, index) => (\n                  <div key={program.id} className=\"flex items-center justify-between p-4 bg-muted/20 rounded-xl\">\n                    <div>\n                      <div className=\"text-sm font-medium text-foreground\" data-testid={`program-name-${index}`}>\n                        {program.name}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">{program.level}</div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-lg font-bold text-primary\">87%</div>\n                      <div className=\"text-xs text-muted-foreground\">Avg Completion</div>\n                    </div>\n                  </div>\n                ))}\n\n                {/* Bloom's Taxonomy Distribution */}\n                <div className=\"border-t border-border pt-4\">\n                  <h4 className=\"text-sm font-medium text-foreground mb-4\">Bloom's Taxonomy Distribution</h4>\n                  <div className=\"space-y-2\">\n                    {[\"create\", \"evaluate\", \"analyze\", \"apply\", \"understand\", \"remember\"].map((level) => (\n                      <div key={level} className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-muted-foreground capitalize\">{level}</span>\n                        <div className=\"flex items-center space-x-2\">\n                          <Progress value={getBloomsPercentage(level)} className=\"w-16 h-2\" />\n                          <span className=\"text-sm font-medium text-foreground w-8\">\n                            {getBloomsPercentage(level)}%\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <i className=\"fas fa-history text-primary mr-3\"></i>\n                  Recent Activity\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-3 h-3 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"text-sm font-medium text-foreground\">PLO created for CS Program</div>\n                      <div className=\"text-xs text-muted-foreground mt-1\">New outcome added to curriculum mapping</div>\n                      <div className=\"text-xs text-muted-foreground\">Just now</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-3 h-3 bg-secondary rounded-full mt-2 flex-shrink-0\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"text-sm font-medium text-foreground\">Outcome mapping updated</div>\n                      <div className=\"text-xs text-muted-foreground mt-1\">CLO-PLO connections refined</div>\n                      <div className=\"text-xs text-muted-foreground\">2 hours ago</div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-3 h-3 bg-accent rounded-full mt-2 flex-shrink-0\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"text-sm font-medium text-foreground\">Analytics report generated</div>\n                      <div className=\"text-xs text-muted-foreground mt-1\">Program assessment completed</div>\n                      <div className=\"text-xs text-muted-foreground\">1 day ago</div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Pending Tasks */}\n                <div className=\"border-t border-border pt-4\">\n                  <h4 className=\"text-sm font-medium text-foreground mb-4 flex items-center\">\n                    <i className=\"fas fa-tasks text-accent mr-2\"></i>\n                    Pending Tasks\n                  </h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 bg-accent/5 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <input type=\"checkbox\" className=\"w-4 h-4 text-primary focus:ring-primary border-border rounded\" />\n                        <span className=\"text-sm font-medium text-foreground\">Review PLO-ILO alignment</span>\n                      </div>\n                      <Badge variant=\"destructive\" className=\"text-xs\">High</Badge>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-3 bg-secondary/5 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <input type=\"checkbox\" className=\"w-4 h-4 text-primary focus:ring-primary border-border rounded\" />\n                        <span className=\"text-sm font-medium text-foreground\">Approve new CLOs</span>\n                      </div>\n                      <Badge variant=\"secondary\" className=\"text-xs\">Medium</Badge>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* PLO Management Section */}\n          <div className=\"space-y-6 mt-8\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold text-foreground\">Program Learning Outcomes (PLOs)</h2>\n              <Button \n                data-testid=\"button-create-new-plo-section\"\n                onClick={() => {\n                  setSelectedPlo(undefined);\n                  setPloDialogOpen(true);\n                }}\n              >\n                <i className=\"fas fa-plus mr-2\"></i>\n                Create New PLO\n              </Button>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {plos.map((plo, index) => (\n                <Card key={plo.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <span data-testid={`plo-code-${index}`}>{plo.code}</span>\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {plo.bloomsLevel}\n                      </Badge>\n                    </CardTitle>\n                    <CardDescription className=\"line-clamp-2\" data-testid={`plo-title-${index}`}>\n                      {plo.title}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground mb-4 line-clamp-3\">\n                      {plo.description}\n                    </p>\n                    <div className=\"flex space-x-2\">\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        className=\"flex-1\" \n                        data-testid={`button-edit-plo-${index}`}\n                        onClick={() => {\n                          setSelectedPlo(plo);\n                          setPloDialogOpen(true);\n                        }}\n                      >\n                        Edit\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        className=\"flex-1\" \n                        data-testid={`button-view-plo-${index}`}\n                        onClick={() => {\n                          setSelectedPlo(plo);\n                          setPloDialogOpen(true);\n                        }}\n                      >\n                        View Details\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n              \n              {plos.length === 0 && (\n                <div className=\"col-span-full text-center py-12\">\n                  <i className=\"fas fa-bullseye text-muted-foreground text-4xl mb-4\"></i>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No PLOs created yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">Start by creating your first Program Learning Outcome.</p>\n                  <Button \n                    data-testid=\"button-create-first-plo\"\n                    onClick={() => {\n                      setSelectedPlo(undefined);\n                      setPloDialogOpen(true);\n                    }}\n                  >\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Create Your First PLO\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"mapping\">\n          <VisualMappingCanvas />\n        </TabsContent>\n\n        <TabsContent value=\"analytics\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Outcome Distribution</CardTitle>\n                <CardDescription>Distribution of learning outcomes across Bloom's taxonomy</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-primary mb-2\">\n                      {learningOutcomes?.length || 0}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Total Learning Outcomes</div>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">ILOs</span>\n                      <Badge variant=\"outline\">{ilos?.length || 0}</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">PLOs</span>\n                      <Badge variant=\"outline\">{plos?.length || 0}</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">CLOs</span>\n                      <Badge variant=\"outline\">{clos?.length || 0}</Badge>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Program Health</CardTitle>\n                <CardDescription>Overall system performance metrics</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Mapping Coverage</span>\n                    <span className=\"text-sm font-semibold text-primary\">89%</span>\n                  </div>\n                  <Progress value={89} />\n\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Data Quality</span>\n                    <span className=\"text-sm font-semibold text-secondary\">94%</span>\n                  </div>\n                  <Progress value={94} />\n\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Student Engagement</span>\n                    <span className=\"text-sm font-semibold text-accent\">76%</span>\n                  </div>\n                  <Progress value={76} />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"evidence\">\n          <EvidenceRollup />\n        </TabsContent>\n      </Tabs>\n      \n      {/* PLO Management Dialog */}\n      <Dialog open={ploDialogOpen} onOpenChange={setPloDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {selectedPlo ? 'Edit Program Learning Outcome' : 'Create New Program Learning Outcome'}\n            </DialogTitle>\n          </DialogHeader>\n          <OutcomeForm\n            outcome={selectedPlo}\n            onSuccess={() => {\n              setPloDialogOpen(false);\n              setSelectedPlo(undefined);\n            }}\n            onCancel={() => {\n              setPloDialogOpen(false);\n              setSelectedPlo(undefined);\n            }}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":23889},"client/src/components/dashboard/student-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { ProgressDisplay } from \"@/components/gamification/progress-display\";\nimport { BadgeDisplay } from \"@/components/gamification/badge-display\";\nimport { SubmissionForm } from \"@/components/assignments/submission-form\";\nimport type { Assignment, StudentSubmission } from \"@shared/schema\";\n\nexport default function StudentDashboard() {\n  const { user } = useAuth();\n  const [selectedAssignment, setSelectedAssignment] = useState<Assignment | undefined>(undefined);\n  const [submissionDialogOpen, setSubmissionDialogOpen] = useState(false);\n\n  const { data: progress } = useQuery({\n    queryKey: [\"/api/student-progress/\" + user?.id],\n    enabled: !!user,\n  });\n\n  const { data: courses } = useQuery({\n    queryKey: [\"/api/courses\"],\n  });\n\n  const { data: learningModules } = useQuery({\n    queryKey: [\"/api/learning-modules\"],\n    enabled: !!user,\n  });\n\n  const { data: assignments = [], isLoading: assignmentsLoading } = useQuery<Assignment[]>({\n    queryKey: [\"/api/assignments\"],\n    enabled: !!user,\n  });\n\n  const { data: mySubmissions = [], isLoading: submissionsLoading } = useQuery<StudentSubmission[]>({\n    queryKey: [\"/api/student-submissions\"],\n    enabled: !!user,\n  });\n\n  const xpToNextLevel = ((progress as any)?.currentLevel || 1) * 200;\n  const currentLevelProgress = (((progress as any)?.totalXP || 0) % 200) / 200 * 100;\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"student-dashboard\">\n      {/* Welcome Hero Section */}\n      <section className=\"bg-gradient-to-br from-purple-500 via-blue-500 to-green-500 rounded-2xl p-8 text-white relative overflow-hidden\">\n        <div className=\"relative z-10\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"welcome-title\">\n                Welcome back, {user?.firstName}! 🚀\n              </h1>\n              <p className=\"text-lg opacity-90 mb-4\">\n                Ready to continue your learning journey?\n              </p>\n              <div className=\"flex items-center space-x-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-star text-xl text-yellow-300\"></i>\n                  <span className=\"font-medium\" data-testid=\"stat-total-xp\">\n                    {(progress as any)?.totalXP || 0} XP Earned\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-trophy text-xl text-yellow-300\"></i>\n                  <span className=\"font-medium\" data-testid=\"stat-current-level\">\n                    Level {(progress as any)?.currentLevel || 1}\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-fire text-xl text-orange-300\"></i>\n                  <span className=\"font-medium\" data-testid=\"stat-current-streak\">\n                    {(progress as any)?.currentStreak || 0} Day Streak\n                  </span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/20 backdrop-blur-sm rounded-2xl p-6 text-center min-w-[140px]\">\n              <div className=\"text-2xl font-bold text-yellow-300 mb-2\">\n                {(progress as any)?.totalBadges || 0}\n              </div>\n              <div className=\"text-sm font-medium\">Badges</div>\n              <div className=\"text-sm font-medium\">Earned</div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Decorative elements */}\n        <div className=\"absolute top-4 right-4 w-32 h-32 bg-white/10 rounded-full animate-pulse\"></div>\n        <div className=\"absolute bottom-4 left-4 w-20 h-20 bg-white/5 rounded-full\"></div>\n      </section>\n\n      {/* Progress Overview */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Level Progress */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <i className=\"fas fa-chart-line text-primary mr-3\"></i>\n              Level Progress\n            </CardTitle>\n            <CardDescription>\n              Your journey to the next level\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-2xl font-bold text-primary\" data-testid=\"display-current-level\">\n                    Level {(progress as any)?.currentLevel || 1}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {(progress as any)?.totalXP || 0} / {xpToNextLevel} XP\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-lg font-semibold text-foreground\">\n                    {xpToNextLevel - ((progress as any)?.totalXP || 0)} XP\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">to next level</div>\n                </div>\n              </div>\n              \n              <Progress value={currentLevelProgress} className=\"h-4\" />\n              \n              <div className=\"grid grid-cols-3 gap-4 mt-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-secondary\" data-testid=\"stat-xp-today\">250</div>\n                  <div className=\"text-xs text-muted-foreground\">XP Today</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-accent\" data-testid=\"stat-modules-completed\">12</div>\n                  <div className=\"text-xs text-muted-foreground\">Modules Done</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-green-500\" data-testid=\"stat-assignments-submitted\">8</div>\n                  <div className=\"text-xs text-muted-foreground\">Assignments</div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Daily Goals */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <i className=\"fas fa-calendar-day text-green-500 mr-2\"></i>\n              Today's Goals\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-6 h-6 bg-green-500 rounded-full flex items-center justify-center text-white text-xs\">\n                  <i className=\"fas fa-check\"></i>\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"text-sm font-medium text-foreground\">Complete Daily Challenge</div>\n                  <div className=\"text-xs text-green-500\">Completed +50 XP</div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs animate-pulse\">\n                  <i className=\"fas fa-play\"></i>\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"text-sm font-medium text-foreground\">Study Data Structures</div>\n                  <div className=\"text-xs text-blue-500\">In Progress</div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-6 h-6 bg-muted rounded-full flex items-center justify-center text-muted-foreground text-xs\">\n                  <i className=\"fas fa-clock\"></i>\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"text-sm font-medium text-muted-foreground\">Submit Assignment</div>\n                  <div className=\"text-xs text-muted-foreground\">Pending</div>\n                </div>\n              </div>\n            </div>\n\n            <Button className=\"w-full\" size=\"sm\" data-testid=\"button-view-all-goals\">\n              View All Goals\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Learning Path */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <i className=\"fas fa-route text-purple-500 mr-3\"></i>\n            Learning Path: Data Structures & Algorithms\n          </CardTitle>\n          <CardDescription>\n            Your personalized learning journey\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between space-x-4 overflow-x-auto pb-4\">\n            {/* Learning Path Nodes */}\n            <div className=\"flex-shrink-0 text-center\">\n              <div className=\"bg-green-500 text-white w-16 h-16 rounded-full flex items-center justify-center mb-2 mx-auto border-4 border-green-200 shadow-lg\">\n                <i className=\"fas fa-check text-lg\"></i>\n              </div>\n              <div className=\"text-xs font-medium text-foreground\">Arrays</div>\n              <div className=\"text-xs text-green-500\">Complete</div>\n              <Badge variant=\"secondary\" className=\"text-xs mt-1\">+100 XP</Badge>\n            </div>\n\n            <div className=\"w-8 h-px bg-green-500 flex-shrink-0\"></div>\n\n            <div className=\"flex-shrink-0 text-center\">\n              <div className=\"bg-green-500 text-white w-16 h-16 rounded-full flex items-center justify-center mb-2 mx-auto border-4 border-green-200 shadow-lg\">\n                <i className=\"fas fa-check text-lg\"></i>\n              </div>\n              <div className=\"text-xs font-medium text-foreground\">Linked Lists</div>\n              <div className=\"text-xs text-green-500\">Complete</div>\n              <Badge variant=\"secondary\" className=\"text-xs mt-1\">+120 XP</Badge>\n            </div>\n\n            <div className=\"w-8 h-px bg-blue-500 flex-shrink-0\"></div>\n\n            <div className=\"flex-shrink-0 text-center\">\n              <div className=\"bg-blue-500 text-white w-16 h-16 rounded-full flex items-center justify-center mb-2 mx-auto border-4 border-blue-200 shadow-lg animate-pulse\">\n                <i className=\"fas fa-play text-lg\"></i>\n              </div>\n              <div className=\"text-xs font-medium text-foreground\">Stacks</div>\n              <div className=\"text-xs text-blue-500\">In Progress</div>\n              <Badge variant=\"outline\" className=\"text-xs mt-1\">75% Done</Badge>\n            </div>\n\n            <div className=\"w-8 h-px bg-gray-300 flex-shrink-0\"></div>\n\n            <div className=\"flex-shrink-0 text-center\">\n              <div className=\"bg-muted text-muted-foreground w-16 h-16 rounded-full flex items-center justify-center mb-2 mx-auto border-4 border-muted\">\n                <i className=\"fas fa-lock text-lg\"></i>\n              </div>\n              <div className=\"text-xs font-medium text-muted-foreground\">Queues</div>\n              <div className=\"text-xs text-muted-foreground\">Locked</div>\n              <Badge variant=\"outline\" className=\"text-xs mt-1\">+150 XP</Badge>\n            </div>\n\n            <div className=\"w-8 h-px bg-gray-300 flex-shrink-0\"></div>\n\n            <div className=\"flex-shrink-0 text-center\">\n              <div className=\"bg-muted text-muted-foreground w-16 h-16 rounded-full flex items-center justify-center mb-2 mx-auto border-4 border-muted\">\n                <i className=\"fas fa-lock text-lg\"></i>\n              </div>\n              <div className=\"text-xs font-medium text-muted-foreground\">Trees</div>\n              <div className=\"text-xs text-muted-foreground\">Locked</div>\n              <Badge variant=\"outline\" className=\"text-xs mt-1\">+200 XP</Badge>\n            </div>\n          </div>\n\n          <div className=\"mt-6 flex items-center justify-between\">\n            <Button data-testid=\"button-continue-learning\">\n              <i className=\"fas fa-play mr-2\"></i>\n              Continue Learning\n            </Button>\n            <div className=\"text-sm text-muted-foreground\">\n              2 of 6 modules completed\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Assignments Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <i className=\"fas fa-clipboard-list text-blue-500 mr-3\"></i>\n            My Assignments\n          </CardTitle>\n          <CardDescription>\n            View and submit your course assignments\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {assignmentsLoading || submissionsLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {[1, 2, 3].map((i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <CardHeader>\n                      <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"h-3 bg-muted rounded w-full\"></div>\n                        <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                        <div className=\"flex space-x-2 mt-4\">\n                          <div className=\"h-8 bg-muted rounded flex-1\"></div>\n                          <div className=\"h-8 bg-muted rounded flex-1\"></div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : assignments.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <i className=\"fas fa-clipboard-list text-muted-foreground text-4xl mb-4\"></i>\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">No assignments available</h3>\n                <p className=\"text-muted-foreground\">Check back later for new assignments from your teachers.</p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {assignments.map((assignment, index) => {\n                  const submission = mySubmissions.find(s => s.assignmentId === assignment.id);\n                  const isSubmitted = !!submission;\n                  const isGraded = submission?.gradedAt;\n                  \n                  return (\n                    <Card key={assignment.id} className=\"hover:shadow-lg transition-shadow\">\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-base flex items-center justify-between\">\n                          <span data-testid={`assignment-title-${index}`}>{assignment.title}</span>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {assignment.totalPoints} pts\n                            </Badge>\n                            {isGraded ? (\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                Graded\n                              </Badge>\n                            ) : isSubmitted ? (\n                              <Badge variant=\"default\" className=\"text-xs\">\n                                Submitted\n                              </Badge>\n                            ) : (\n                              <Badge variant=\"destructive\" className=\"text-xs\">\n                                Pending\n                              </Badge>\n                            )}\n                          </div>\n                        </CardTitle>\n                        <CardDescription className=\"text-sm line-clamp-2\">\n                          {assignment.description || \"No description provided\"}\n                        </CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"pt-0\">\n                        <div className=\"space-y-3\">\n                          <div className=\"text-sm text-muted-foreground space-y-1\">\n                            {assignment.dueDate && (\n                              <p><strong>Due:</strong> {new Date(assignment.dueDate).toLocaleDateString()}</p>\n                            )}\n                            {isSubmitted && submission?.submittedAt && (\n                              <p><strong>Submitted:</strong> {new Date(submission.submittedAt).toLocaleDateString()}</p>\n                            )}\n                            {isGraded && submission?.totalScore != null && (\n                              <p><strong>Grade:</strong> {submission.totalScore}/{assignment.totalPoints}</p>\n                            )}\n                          </div>\n                          <div className=\"flex space-x-2\">\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              className=\"flex-1\" \n                              data-testid={`button-view-assignment-${index}`}\n                              onClick={() => {\n                                setSelectedAssignment(assignment);\n                                setSubmissionDialogOpen(true);\n                              }}\n                            >\n                              <i className=\"fas fa-eye mr-2\"></i>\n                              {isSubmitted ? \"View\" : \"Submit\"}\n                            </Button>\n                            {isGraded && submission?.feedback && (\n                              <Button \n                                size=\"sm\" \n                                variant=\"secondary\" \n                                className=\"flex-1\" \n                                data-testid={`button-view-feedback-${index}`}\n                                onClick={() => {\n                                  setSelectedAssignment(assignment);\n                                  setSubmissionDialogOpen(true);\n                                }}\n                              >\n                                <i className=\"fas fa-comment mr-2\"></i>\n                                Feedback\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Achievements and Competency */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Recent Badges */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <i className=\"fas fa-trophy text-yellow-500 mr-2\"></i>\n              Recent Badges\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex items-center space-x-3 p-2 bg-yellow-50 rounded-lg\">\n              <div className=\"w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center text-white text-sm\">\n                <i className=\"fas fa-star\"></i>\n              </div>\n              <div>\n                <div className=\"text-sm font-medium text-foreground\">Array Master</div>\n                <div className=\"text-xs text-muted-foreground\">Completed all array exercises</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3 p-2 bg-blue-50 rounded-lg\">\n              <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm\">\n                <i className=\"fas fa-code\"></i>\n              </div>\n              <div>\n                <div className=\"text-sm font-medium text-foreground\">Code Warrior</div>\n                <div className=\"text-xs text-muted-foreground\">Solved 10 coding challenges</div>\n              </div>\n            </div>\n\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-4\" data-testid=\"button-view-all-badges\">\n              View All Badges\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Competency Profile */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <i className=\"fas fa-chart-pie text-purple-500 mr-2\"></i>\n              Competency Profile\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-foreground\">Problem Solving</span>\n                <span className=\"text-primary font-medium\">85%</span>\n              </div>\n              <Progress value={85} />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-foreground\">Algorithm Design</span>\n                <span className=\"text-secondary font-medium\">72%</span>\n              </div>\n              <Progress value={72} />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-foreground\">Code Quality</span>\n                <span className=\"text-accent font-medium\">91%</span>\n              </div>\n              <Progress value={91} />\n            </div>\n\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-4\" data-testid=\"button-detailed-analysis\">\n              Detailed Analysis\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Study Statistics */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <i className=\"fas fa-chart-bar text-green-500 mr-2\"></i>\n              Study Statistics\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-500 mb-1\">4.5h</div>\n              <div className=\"text-sm text-muted-foreground\">Study Time Today</div>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">This Week</span>\n                <span className=\"text-sm font-semibold\">28.5h</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">This Month</span>\n                <span className=\"text-sm font-semibold\">142h</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">Average/Day</span>\n                <span className=\"text-sm font-semibold\">3.2h</span>\n              </div>\n            </div>\n\n            <div className=\"bg-muted/50 rounded-lg p-3 text-center\">\n              <div className=\"text-xs text-muted-foreground\">Weekly Goal</div>\n              <div className=\"text-sm font-semibold text-foreground\">25h / 30h</div>\n              <Progress value={83} className=\"mt-2\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Assignment Submission Dialog */}\n      <Dialog open={submissionDialogOpen} onOpenChange={setSubmissionDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {selectedAssignment?.title || 'Assignment'}\n            </DialogTitle>\n          </DialogHeader>\n          {selectedAssignment && (\n            <SubmissionForm\n              assignment={selectedAssignment}\n              existingSubmission={mySubmissions.find(s => s.assignmentId === selectedAssignment.id)}\n              onSuccess={() => {\n                setSubmissionDialogOpen(false);\n                setSelectedAssignment(undefined);\n              }}\n              onCancel={() => {\n                setSubmissionDialogOpen(false);\n                setSelectedAssignment(undefined);\n              }}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":25109},"client/src/components/dashboard/teacher-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { OutcomeForm } from \"@/components/outcomes/outcome-form\";\nimport { AssignmentForm } from \"@/components/assignments/assignment-form\";\nimport type { Course, Assignment, StudentSubmission, LearningOutcome } from \"@shared/schema\";\n\nexport default function TeacherDashboard() {\n  const { user } = useAuth();\n  const [cloDialogOpen, setCloDialogOpen] = useState(false);\n  const [selectedClo, setSelectedClo] = useState<LearningOutcome | undefined>(undefined);\n  const [assignmentDialogOpen, setAssignmentDialogOpen] = useState(false);\n  const [selectedAssignment, setSelectedAssignment] = useState<Assignment | undefined>(undefined);\n\n  const { data: courses = [], isLoading: coursesLoading } = useQuery<Course[]>({\n    queryKey: [\"/api/courses/teacher/\" + user?.id],\n    enabled: !!user,\n  });\n\n  const { data: assignments = [] } = useQuery<Assignment[]>({\n    queryKey: [\"/api/assignments\"],\n    enabled: !!user,\n  });\n\n  const { data: submissions = [] } = useQuery<StudentSubmission[]>({\n    queryKey: [\"/api/student-submissions\"],\n    enabled: !!user,\n  });\n\n  const { data: learningOutcomes = [] } = useQuery<LearningOutcome[]>({\n    queryKey: [\"/api/learning-outcomes\"],\n    enabled: !!user,\n  });\n\n  const teacherCourses = courses || [];\n  const teacherAssignments = assignments?.filter(a => a.teacherId === user?.id) || [];\n  const pendingGrading = submissions?.filter(s => !s.gradedAt && \n    teacherAssignments.some(a => a.id === s.assignmentId)) || [];\n\n  const clos = learningOutcomes?.filter(outcome => \n    outcome.type === \"CLO\" && outcome.ownerId === user?.id) || [];\n\n  if (coursesLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"teacher-dashboard\">\n      {/* Welcome Hero Section */}\n      <section className=\"bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl p-8 text-white relative overflow-hidden\">\n        <div className=\"relative z-10\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"welcome-title\">\n                Welcome back, Professor {user?.firstName}! 📚\n              </h1>\n              <p className=\"text-lg opacity-90 mb-4\">\n                Ready to inspire and educate your students today?\n              </p>\n              <div className=\"flex items-center space-x-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chalkboard-teacher text-xl\"></i>\n                  <span className=\"font-medium\" data-testid=\"stat-courses-teaching\">\n                    {teacherCourses.length} Courses Teaching\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-tasks text-xl\"></i>\n                  <span className=\"font-medium\" data-testid=\"stat-assignments-created\">\n                    {teacherAssignments.length} Assignments Created\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-clock text-xl\"></i>\n                  <span className=\"font-medium\" data-testid=\"stat-pending-grading\">\n                    {pendingGrading.length} Pending Grading\n                  </span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/20 backdrop-blur-sm rounded-2xl p-4 text-center min-w-[120px]\">\n              <i className=\"fas fa-award text-3xl text-yellow-300 mb-2\"></i>\n              <div className=\"text-sm font-medium\">Teaching</div>\n              <div className=\"text-sm font-medium\">Excellence</div>\n              <div className=\"text-xs opacity-75 mt-1\">Level 4</div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Decorative elements */}\n        <div className=\"absolute top-4 right-4 w-32 h-32 bg-white/10 rounded-full animate-pulse\"></div>\n        <div className=\"absolute bottom-4 left-4 w-20 h-20 bg-white/5 rounded-full\"></div>\n      </section>\n\n      {/* Dashboard Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"courses\" data-testid=\"tab-courses\">My Courses</TabsTrigger>\n          <TabsTrigger value=\"assignments\" data-testid=\"tab-assignments\">Assignments</TabsTrigger>\n          <TabsTrigger value=\"grading\" data-testid=\"tab-grading\">Grading</TabsTrigger>\n          <TabsTrigger value=\"outcomes\" data-testid=\"tab-outcomes\">CLO Management</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Quick Actions */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n            <Card className=\"lg:col-span-1\">\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center\">\n                  <i className=\"fas fa-bolt text-primary mr-2\"></i>\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button \n                  className=\"w-full\" \n                  data-testid=\"button-create-assignment\"\n                  onClick={() => {\n                    setSelectedAssignment(undefined);\n                    setAssignmentDialogOpen(true);\n                  }}\n                >\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Create Assignment\n                </Button>\n                <Button variant=\"secondary\" className=\"w-full\" data-testid=\"button-grade-submissions\">\n                  <i className=\"fas fa-edit mr-2\"></i>\n                  Grade Submissions\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-manage-clos\">\n                  <i className=\"fas fa-bullseye mr-2\"></i>\n                  Manage CLOs\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-class-analytics\">\n                  <i className=\"fas fa-chart-line mr-2\"></i>\n                  Class Analytics\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Statistics Cards */}\n            <div className=\"lg:col-span-3\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <Card className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"bg-blue-500/10 text-blue-500 p-3 rounded-xl\">\n                        <i className=\"fas fa-user-graduate text-xl\"></i>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-total-students\">\n                          85\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">Active Students</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Enrolled</span>\n                      <span className=\"text-blue-500 font-medium\">All courses</span>\n                    </div>\n                    <Progress value={100} className=\"mt-2\" />\n                  </CardContent>\n                </Card>\n\n                <Card className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"bg-green-500/10 text-green-500 p-3 rounded-xl\">\n                        <i className=\"fas fa-check-circle text-xl\"></i>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-graded-assignments\">\n                          {teacherAssignments.length - pendingGrading.length}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">Graded This Week</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Completion Rate</span>\n                      <span className=\"text-green-500 font-medium\">94%</span>\n                    </div>\n                    <Progress value={94} className=\"mt-2\" />\n                  </CardContent>\n                </Card>\n\n                <Card className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"bg-purple-500/10 text-purple-500 p-3 rounded-xl\">\n                        <i className=\"fas fa-bullseye text-xl\"></i>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-total-clos\">\n                          {clos.length}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">CLOs Created</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Active</span>\n                      <span className=\"text-purple-500 font-medium\">All active</span>\n                    </div>\n                    <Progress value={100} className=\"mt-2\" />\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n\n          {/* Course Performance and Grading Queue */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Course Performance */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <i className=\"fas fa-chart-line text-blue-500 mr-3\"></i>\n                  Course Performance\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {teacherCourses.map((course, index) => (\n                  <div key={course.id} className=\"flex items-center justify-between p-4 bg-muted/20 rounded-xl\">\n                    <div>\n                      <div className=\"text-sm font-medium text-foreground\" data-testid={`course-name-${index}`}>\n                        {course.name}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">{course.code}</div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-lg font-bold text-primary\">82%</div>\n                      <div className=\"text-xs text-muted-foreground\">Avg Score</div>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Grading Queue */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <i className=\"fas fa-clipboard-list text-orange-500 mr-3\"></i>\n                  Grading Queue\n                  {pendingGrading.length > 0 && (\n                    <Badge variant=\"destructive\" className=\"ml-2\">\n                      {pendingGrading.length}\n                    </Badge>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {pendingGrading.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-check-circle text-green-500 text-4xl mb-4\"></i>\n                    <p className=\"text-muted-foreground\">All caught up! No submissions pending grading.</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {pendingGrading.slice(0, 5).map((submission, index) => (\n                      <div key={submission.id} className=\"flex items-center justify-between p-3 bg-orange-50 rounded-lg border border-orange-200\">\n                        <div>\n                          <div className=\"text-sm font-medium text-foreground\">\n                            Assignment Submission\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            Submitted {submission.submittedAt ? new Date(submission.submittedAt).toLocaleDateString() : 'Recently'}\n                          </div>\n                        </div>\n                        <Button size=\"sm\" data-testid={`button-grade-${index}`}>\n                          Grade\n                        </Button>\n                      </div>\n                    ))}\n                    {pendingGrading.length > 5 && (\n                      <div className=\"text-center pt-2\">\n                        <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-all-pending\">\n                          View All ({pendingGrading.length - 5} more)\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"courses\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {teacherCourses.map((course, index) => (\n              <Card key={course.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span data-testid={`course-title-${index}`}>{course.name}</span>\n                    <Badge variant=\"secondary\">{course.code}</Badge>\n                  </CardTitle>\n                  <CardDescription>\n                    {course.credits} Credits • Active Course\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-muted-foreground\">Students</span>\n                      <span className=\"font-semibold\">28</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-muted-foreground\">Assignments</span>\n                      <span className=\"font-semibold\">\n                        {teacherAssignments.filter(a => a.courseId === course.id).length}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-muted-foreground\">Avg Performance</span>\n                      <span className=\"font-semibold text-green-600\">85%</span>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button size=\"sm\" className=\"flex-1\" data-testid={`button-manage-course-${index}`}>\n                        Manage\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\" className=\"flex-1\" data-testid={`button-analytics-course-${index}`}>\n                        Analytics\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n            \n            {teacherCourses.length === 0 && (\n              <div className=\"col-span-full text-center py-12\">\n                <i className=\"fas fa-chalkboard text-muted-foreground text-4xl mb-4\"></i>\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">No courses assigned</h3>\n                <p className=\"text-muted-foreground\">Contact your coordinator to get assigned to courses.</p>\n              </div>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"assignments\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold text-foreground\">My Assignments</h2>\n              <Button \n                data-testid=\"button-create-new-assignment\"\n                onClick={() => {\n                  setSelectedAssignment(undefined);\n                  setAssignmentDialogOpen(true);\n                }}\n              >\n                <i className=\"fas fa-plus mr-2\"></i>\n                Create New Assignment\n              </Button>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {teacherAssignments.map((assignment, index) => (\n                <Card key={assignment.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <span data-testid={`assignment-title-${index}`}>{assignment.title}</span>\n                      <Badge variant=\"outline\">\n                        {assignment.totalPoints} pts\n                      </Badge>\n                    </CardTitle>\n                    <CardDescription className=\"line-clamp-2\" data-testid={`assignment-description-${index}`}>\n                      {assignment.description || \"No description provided\"}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"text-sm text-muted-foreground\">\n                        <p><strong>Course:</strong> {courses.find(c => c.id === assignment.courseId)?.code || \"Unknown\"}</p>\n                        {assignment.dueDate && (\n                          <p><strong>Due:</strong> {new Date(assignment.dueDate).toLocaleDateString()}</p>\n                        )}\n                        <p><strong>Status:</strong> {assignment.isActive ? \"Active\" : \"Inactive\"}</p>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\" \n                          className=\"flex-1\" \n                          data-testid={`button-edit-assignment-${index}`}\n                          onClick={() => {\n                            setSelectedAssignment(assignment);\n                            setAssignmentDialogOpen(true);\n                          }}\n                        >\n                          Edit\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\" \n                          className=\"flex-1\" \n                          data-testid={`button-view-assignment-${index}`}\n                          onClick={() => {\n                            setSelectedAssignment(assignment);\n                            setAssignmentDialogOpen(true);\n                          }}\n                        >\n                          View Details\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n              \n              {teacherAssignments.length === 0 && (\n                <div className=\"col-span-full text-center py-12\">\n                  <i className=\"fas fa-clipboard-list text-muted-foreground text-4xl mb-4\"></i>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No assignments created yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">Start by creating your first assignment for your students.</p>\n                  <Button \n                    data-testid=\"button-create-first-assignment\"\n                    onClick={() => {\n                      setSelectedAssignment(undefined);\n                      setAssignmentDialogOpen(true);\n                    }}\n                  >\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Create Your First Assignment\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"grading\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Grading Center</CardTitle>\n              <CardDescription>\n                Review and grade student submissions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {pendingGrading.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <i className=\"fas fa-clipboard-check text-green-500 text-4xl mb-4\"></i>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">All caught up!</h3>\n                  <p className=\"text-muted-foreground\">No submissions are currently pending grading.</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {pendingGrading.map((submission, index) => (\n                    <div key={submission.id} className=\"border rounded-lg p-4 hover:bg-muted/20 transition-colors\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium text-foreground\">Assignment Submission</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Submitted: {submission.submittedAt ? new Date(submission.submittedAt).toLocaleDateString() : 'Recently'}\n                          </p>\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          <Badge variant=\"outline\">Pending</Badge>\n                          <Button data-testid={`button-review-${index}`}>\n                            Review & Grade\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"outcomes\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold text-foreground\">Course Learning Outcomes (CLOs)</h2>\n              <Button \n                data-testid=\"button-create-new-clo\"\n                onClick={() => {\n                  setSelectedClo(undefined);\n                  setCloDialogOpen(true);\n                }}\n              >\n                <i className=\"fas fa-plus mr-2\"></i>\n                Create New CLO\n              </Button>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {clos.map((clo, index) => (\n                <Card key={clo.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <span data-testid={`clo-code-${index}`}>{clo.code}</span>\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {clo.bloomsLevel}\n                      </Badge>\n                    </CardTitle>\n                    <CardDescription className=\"line-clamp-2\" data-testid={`clo-title-${index}`}>\n                      {clo.title}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground mb-4 line-clamp-3\">\n                      {clo.description}\n                    </p>\n                    <div className=\"flex space-x-2\">\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        className=\"flex-1\" \n                        data-testid={`button-edit-clo-${index}`}\n                        onClick={() => {\n                          setSelectedClo(clo);\n                          setCloDialogOpen(true);\n                        }}\n                      >\n                        Edit\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        className=\"flex-1\" \n                        data-testid={`button-view-clo-${index}`}\n                        onClick={() => {\n                          setSelectedClo(clo);\n                          setCloDialogOpen(true);\n                        }}\n                      >\n                        View Details\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n              \n              {clos.length === 0 && (\n                <div className=\"col-span-full text-center py-12\">\n                  <i className=\"fas fa-bullseye text-muted-foreground text-4xl mb-4\"></i>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No CLOs created yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">Start by creating your first Course Learning Outcome.</p>\n                  <Button \n                    data-testid=\"button-create-first-clo\"\n                    onClick={() => {\n                      setSelectedClo(undefined);\n                      setCloDialogOpen(true);\n                    }}\n                  >\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Create Your First CLO\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        </TabsContent>\n      </Tabs>\n      \n      {/* CLO Management Dialog */}\n      <Dialog open={cloDialogOpen} onOpenChange={setCloDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {selectedClo ? 'Edit Course Learning Outcome' : 'Create New Course Learning Outcome'}\n            </DialogTitle>\n          </DialogHeader>\n          <OutcomeForm\n            outcome={selectedClo}\n            onSuccess={() => {\n              setCloDialogOpen(false);\n              setSelectedClo(undefined);\n            }}\n            onCancel={() => {\n              setCloDialogOpen(false);\n              setSelectedClo(undefined);\n            }}\n          />\n        </DialogContent>\n      </Dialog>\n      \n      {/* Assignment Management Dialog */}\n      <Dialog open={assignmentDialogOpen} onOpenChange={setAssignmentDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {selectedAssignment ? 'Edit Assignment' : 'Create New Assignment'}\n            </DialogTitle>\n          </DialogHeader>\n          <AssignmentForm\n            assignment={selectedAssignment}\n            onSuccess={() => {\n              setAssignmentDialogOpen(false);\n              setSelectedAssignment(undefined);\n            }}\n            onCancel={() => {\n              setAssignmentDialogOpen(false);\n              setSelectedAssignment(undefined);\n            }}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":28615},"client/src/components/gamification/badge-display.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface BadgeDisplayProps {\n  studentId?: string;\n  showAll?: boolean;\n  limit?: number;\n  className?: string;\n}\n\nexport function BadgeDisplay({ \n  studentId, \n  showAll = false, \n  limit = 6, \n  className = \"\" \n}: BadgeDisplayProps) {\n  const { data: badgeTemplates } = useQuery({\n    queryKey: [\"/api/badge-templates\"],\n  });\n\n  const { data: studentBadges } = useQuery({\n    queryKey: [\"/api/student-badges\", studentId],\n    enabled: !!studentId,\n  });\n\n  // Mock badge data for demonstration\n  const earnedBadges = [\n    {\n      id: \"1\",\n      name: \"Array Master\",\n      description: \"Completed all array data structure exercises\",\n      type: \"mastery\",\n      iconUrl: \"fa-star\",\n      color: \"bg-yellow-500\",\n      earnedAt: new Date(\"2024-01-15\"),\n      xpReward: 100\n    },\n    {\n      id: \"2\", \n      name: \"Code Warrior\",\n      description: \"Solved 10 consecutive coding challenges\",\n      type: \"achievement\",\n      iconUrl: \"fa-code\",\n      color: \"bg-blue-500\",\n      earnedAt: new Date(\"2024-01-10\"),\n      xpReward: 150\n    },\n    {\n      id: \"3\",\n      name: \"Study Streak\",\n      description: \"Maintained a 7-day learning streak\",\n      type: \"streak\",\n      iconUrl: \"fa-fire\",\n      color: \"bg-orange-500\",\n      earnedAt: new Date(\"2024-01-08\"),\n      xpReward: 200\n    },\n    {\n      id: \"4\",\n      name: \"Algorithm Expert\",\n      description: \"Mastered sorting algorithms\",\n      type: \"mastery\", \n      iconUrl: \"fa-brain\",\n      color: \"bg-purple-500\",\n      earnedAt: new Date(\"2024-01-05\"),\n      xpReward: 300\n    },\n    {\n      id: \"5\",\n      name: \"Team Player\",\n      description: \"Helped 5 classmates in discussion forums\",\n      type: \"special\",\n      iconUrl: \"fa-users\",\n      color: \"bg-green-500\",\n      earnedAt: new Date(\"2024-01-03\"),\n      xpReward: 100\n    },\n    {\n      id: \"6\",\n      name: \"Early Bird\",\n      description: \"First to complete weekly assignment\",\n      type: \"achievement\",\n      iconUrl: \"fa-clock\",\n      color: \"bg-indigo-500\",\n      earnedAt: new Date(\"2024-01-01\"),\n      xpReward: 75\n    }\n  ];\n\n  // Available badges to work towards\n  const availableBadges = [\n    {\n      id: \"7\",\n      name: \"Data Structure Guru\",\n      description: \"Complete all data structure modules\",\n      type: \"mastery\",\n      iconUrl: \"fa-database\",\n      color: \"bg-cyan-500\",\n      progress: 65,\n      requirement: \"8/12 modules completed\",\n      xpReward: 500\n    },\n    {\n      id: \"8\",\n      name: \"Perfect Score\",\n      description: \"Achieve 100% on any major assignment\",\n      type: \"achievement\", \n      iconUrl: \"fa-medal\",\n      color: \"bg-amber-500\",\n      progress: 0,\n      requirement: \"Score 100% on assignment\",\n      xpReward: 250\n    },\n    {\n      id: \"9\",\n      name: \"Study Marathon\",\n      description: \"Maintain 30-day learning streak\",\n      type: \"streak\",\n      iconUrl: \"fa-running\",\n      color: \"bg-red-500\",\n      progress: 23,\n      requirement: \"7 more days needed\",\n      xpReward: 1000\n    }\n  ];\n\n  const displayedEarned = showAll ? earnedBadges : earnedBadges.slice(0, limit);\n  const totalXpFromBadges = earnedBadges.reduce((sum, badge) => sum + badge.xpReward, 0);\n\n  const getBadgeTypeIcon = (type: string) => {\n    switch (type) {\n      case \"mastery\": return \"fa-star\";\n      case \"achievement\": return \"fa-trophy\";\n      case \"streak\": return \"fa-fire\";\n      case \"special\": return \"fa-gem\";\n      default: return \"fa-medal\";\n    }\n  };\n\n  return (\n    <Card className={`w-full ${className}`} data-testid=\"badge-display\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span className=\"flex items-center\">\n            <i className=\"fas fa-trophy text-yellow-500 mr-3\"></i>\n            Badge Collection\n          </span>\n          <Badge variant=\"secondary\" className=\"text-lg px-3 py-1\">\n            {earnedBadges.length} Earned\n          </Badge>\n        </CardTitle>\n        <CardDescription>\n          Showcase your achievements and learning milestones\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Badge Stats */}\n        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n          <div className=\"text-center p-3 bg-yellow-500/10 rounded-lg\">\n            <div className=\"text-2xl font-bold text-yellow-500\" data-testid=\"stat-total-badges\">\n              {earnedBadges.length}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Total Badges</div>\n          </div>\n          \n          <div className=\"text-center p-3 bg-blue-500/10 rounded-lg\">\n            <div className=\"text-2xl font-bold text-blue-500\" data-testid=\"stat-badge-xp\">\n              {totalXpFromBadges}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">XP from Badges</div>\n          </div>\n          \n          <div className=\"text-center p-3 bg-green-500/10 rounded-lg\">\n            <div className=\"text-2xl font-bold text-green-500\" data-testid=\"stat-recent-badges\">\n              3\n            </div>\n            <div className=\"text-xs text-muted-foreground\">This Month</div>\n          </div>\n        </div>\n\n        {/* Earned Badges */}\n        <div>\n          <h4 className=\"font-medium text-foreground mb-4 flex items-center\">\n            <i className=\"fas fa-check-circle text-green-500 mr-2\"></i>\n            Recently Earned\n          </h4>\n          \n          {displayedEarned.length > 0 ? (\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n              {displayedEarned.map((badge, index) => (\n                <div\n                  key={badge.id}\n                  className=\"relative group bg-gradient-to-br from-white to-gray-50 border border-gray-200 rounded-xl p-4 hover:shadow-lg transition-all duration-200 cursor-pointer\"\n                  data-testid={`earned-badge-${index}`}\n                >\n                  <div className=\"text-center\">\n                    <div className={`w-12 h-12 ${badge.color} rounded-full flex items-center justify-center text-white text-xl mx-auto mb-3 shadow-lg`}>\n                      <i className={`fas ${badge.iconUrl}`}></i>\n                    </div>\n                    <h5 className=\"font-semibold text-foreground text-sm mb-1\">{badge.name}</h5>\n                    <p className=\"text-xs text-muted-foreground line-clamp-2 mb-2\">{badge.description}</p>\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {badge.type}\n                      </Badge>\n                      <span className=\"text-green-600 font-medium\">+{badge.xpReward} XP</span>\n                    </div>\n                    <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                      <div className=\"bg-primary text-primary-foreground text-xs px-2 py-1 rounded\">\n                        {badge.earnedAt.toLocaleDateString()}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <i className=\"fas fa-trophy text-muted-foreground text-3xl mb-3\"></i>\n              <p className=\"text-muted-foreground\">No badges earned yet</p>\n              <p className=\"text-sm text-muted-foreground\">Complete assignments and activities to earn your first badge!</p>\n            </div>\n          )}\n          \n          {!showAll && earnedBadges.length > limit && (\n            <div className=\"text-center mt-4\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-all-badges\">\n                View All {earnedBadges.length} Badges\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Available Badges to Earn */}\n        <div>\n          <h4 className=\"font-medium text-foreground mb-4 flex items-center\">\n            <i className=\"fas fa-target text-primary mr-2\"></i>\n            Available to Earn\n          </h4>\n          \n          <div className=\"space-y-4\">\n            {availableBadges.map((badge, index) => (\n              <div\n                key={badge.id}\n                className=\"border border-dashed border-gray-300 rounded-xl p-4 hover:border-primary hover:bg-primary/5 transition-all duration-200\"\n                data-testid={`available-badge-${index}`}\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className={`w-10 h-10 ${badge.color} opacity-50 rounded-full flex items-center justify-center text-white`}>\n                    <i className={`fas ${badge.iconUrl}`}></i>\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h5 className=\"font-medium text-foreground\">{badge.name}</h5>\n                      <span className=\"text-sm text-green-600 font-medium\">+{badge.xpReward} XP</span>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-3\">{badge.description}</p>\n                    \n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-xs\">\n                        <span className=\"text-muted-foreground\">{badge.requirement}</span>\n                        <span className=\"font-medium\">{badge.progress}%</span>\n                      </div>\n                      <Progress value={badge.progress} className=\"h-2\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Badge Collection CTA */}\n        <div className=\"bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-lg p-4 text-center\">\n          <i className=\"fas fa-star text-yellow-500 text-2xl mb-2\"></i>\n          <h4 className=\"font-semibold text-foreground mb-1\">Keep Learning!</h4>\n          <p className=\"text-sm text-muted-foreground mb-3\">\n            Complete more activities to unlock exclusive badges and rewards\n          </p>\n          <Button size=\"sm\" data-testid=\"button-browse-badges\">\n            <i className=\"fas fa-search mr-2\"></i>\n            Browse All Badges\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10724},"client/src/components/gamification/progress-display.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface ProgressDisplayProps {\n  currentLevel: number;\n  totalXP: number;\n  currentStreak: number;\n  longestStreak?: number;\n  xpToNextLevel?: number;\n  className?: string;\n}\n\nexport function ProgressDisplay({\n  currentLevel,\n  totalXP,\n  currentStreak,\n  longestStreak = 0,\n  xpToNextLevel,\n  className = \"\"\n}: ProgressDisplayProps) {\n  // Calculate XP needed for next level (200 XP per level)\n  const xpPerLevel = 200;\n  const calculatedXpToNextLevel = xpToNextLevel || (currentLevel * xpPerLevel);\n  const currentLevelProgress = ((totalXP % xpPerLevel) / xpPerLevel) * 100;\n  const xpNeededForNext = calculatedXpToNextLevel - totalXP;\n\n  const getLevelTitle = (level: number) => {\n    if (level >= 20) return \"Master Scholar\";\n    if (level >= 15) return \"Expert Learner\";\n    if (level >= 10) return \"Advanced Student\";\n    if (level >= 5) return \"Rising Star\";\n    return \"Novice Learner\";\n  };\n\n  return (\n    <Card className={`w-full ${className}`} data-testid=\"progress-display\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span className=\"flex items-center\">\n            <i className=\"fas fa-chart-line text-primary mr-3\"></i>\n            Learning Progress\n          </span>\n          <Badge variant=\"secondary\" className=\"text-lg px-3 py-1\">\n            Level {currentLevel}\n          </Badge>\n        </CardTitle>\n        <CardDescription>\n          {getLevelTitle(currentLevel)} • Track your learning journey\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* XP Progress Bar */}\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <div className=\"text-2xl font-bold text-primary\" data-testid=\"display-total-xp\">\n                {totalXP} XP\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Total Experience Points\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-lg font-semibold text-foreground\">\n                {xpNeededForNext > 0 ? xpNeededForNext : 0} XP\n              </div>\n              <div className=\"text-sm text-muted-foreground\">to next level</div>\n            </div>\n          </div>\n          \n          <Progress value={currentLevelProgress} className=\"h-4\" data-testid=\"progress-level\" />\n          \n          <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n            <span>Level {currentLevel}</span>\n            <span>Level {currentLevel + 1}</span>\n          </div>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          {/* Current Level */}\n          <div className=\"text-center p-3 bg-primary/10 rounded-lg\">\n            <div className=\"text-2xl font-bold text-primary\" data-testid=\"stat-current-level\">\n              {currentLevel}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Current Level</div>\n          </div>\n\n          {/* Current Streak */}\n          <div className=\"text-center p-3 bg-orange-500/10 rounded-lg\">\n            <div className=\"flex items-center justify-center space-x-1\">\n              <i className=\"fas fa-fire text-orange-500\"></i>\n              <div className=\"text-2xl font-bold text-orange-500\" data-testid=\"stat-current-streak\">\n                {currentStreak}\n              </div>\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Day Streak</div>\n          </div>\n\n          {/* Longest Streak */}\n          <div className=\"text-center p-3 bg-yellow-500/10 rounded-lg\">\n            <div className=\"flex items-center justify-center space-x-1\">\n              <i className=\"fas fa-trophy text-yellow-500\"></i>\n              <div className=\"text-2xl font-bold text-yellow-500\" data-testid=\"stat-longest-streak\">\n                {longestStreak}\n              </div>\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Best Streak</div>\n          </div>\n\n          {/* XP Today */}\n          <div className=\"text-center p-3 bg-green-500/10 rounded-lg\">\n            <div className=\"flex items-center justify-center space-x-1\">\n              <i className=\"fas fa-star text-green-500\"></i>\n              <div className=\"text-2xl font-bold text-green-500\" data-testid=\"stat-xp-today\">\n                250\n              </div>\n            </div>\n            <div className=\"text-xs text-muted-foreground\">XP Today</div>\n          </div>\n        </div>\n\n        {/* Level Benefits */}\n        <div className=\"bg-muted/20 rounded-lg p-4\">\n          <h4 className=\"font-medium text-foreground mb-2 flex items-center\">\n            <i className=\"fas fa-gift text-accent mr-2\"></i>\n            Level {currentLevel} Benefits\n          </h4>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2 text-sm\">\n              <i className=\"fas fa-check text-green-500\"></i>\n              <span>Access to advanced learning modules</span>\n            </div>\n            <div className=\"flex items-center space-x-2 text-sm\">\n              <i className=\"fas fa-check text-green-500\"></i>\n              <span>Priority in discussion forums</span>\n            </div>\n            {currentLevel >= 5 && (\n              <div className=\"flex items-center space-x-2 text-sm\">\n                <i className=\"fas fa-check text-green-500\"></i>\n                <span>Custom profile themes</span>\n              </div>\n            )}\n            {currentLevel >= 10 && (\n              <div className=\"flex items-center space-x-2 text-sm\">\n                <i className=\"fas fa-check text-green-500\"></i>\n                <span>Mentor other students</span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Next Level Preview */}\n        <div className=\"bg-primary/5 border border-primary/20 rounded-lg p-4\">\n          <h4 className=\"font-medium text-primary mb-2 flex items-center\">\n            <i className=\"fas fa-arrow-up text-primary mr-2\"></i>\n            Next Level: {getLevelTitle(currentLevel + 1)}\n          </h4>\n          <p className=\"text-sm text-muted-foreground\">\n            Reach Level {currentLevel + 1} to unlock new features and show off your expertise!\n          </p>\n          <div className=\"mt-2\">\n            <Progress value={(currentLevelProgress / 100) * 100} className=\"h-2\" />\n            <div className=\"text-xs text-muted-foreground mt-1\">\n              {Math.round(currentLevelProgress)}% complete\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6898},"client/src/components/navigation/navigation-header.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { UnifiedNotificationCenter } from \"@/components/notifications/unified-notification-center\";\nimport edeviserLogo from \"@assets/edeviser-logo.png\";\n\nexport function NavigationHeader() {\n  const { user, logoutMutation } = useAuth();\n  const [selectedRole, setSelectedRole] = useState(user?.role || \"student\");\n\n  // Fetch user's progress data for display\n  const { data: progress } = useQuery({\n    queryKey: [\"/api/student-progress/\" + user?.id],\n    enabled: !!user && user.role === \"student\",\n  });\n\n  // Fetch admin statistics\n  const { data: adminStats } = useQuery({\n    queryKey: [\"/api/stats/admin\"],\n    enabled: !!user && user.role === \"admin\",\n  });\n\n  // Fetch coordinator statistics\n  const { data: coordinatorStats } = useQuery({\n    queryKey: [`/api/stats/coordinator/${user?.id}`],\n    enabled: !!user && user.role === \"coordinator\",\n  });\n\n  // Fetch teacher statistics\n  const { data: teacherStats } = useQuery({\n    queryKey: [`/api/stats/teacher/${user?.id}`],\n    enabled: !!user && user.role === \"teacher\",\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const getRoleLabel = (role: string) => {\n    switch (role) {\n      case \"admin\": return \"Administrator\";\n      case \"coordinator\": return \"Coordinator\";\n      case \"teacher\": return \"Teacher\";\n      case \"student\": return \"Student\";\n      default: return \"Unknown\";\n    }\n  };\n\n  const getStatsForRole = () => {\n    switch (user?.role) {\n      case \"coordinator\":\n        return [\n          { label: \"Programs Managed\", value: coordinatorStats?.programsManaged?.toString() || \"0\", icon: \"fas fa-graduation-cap\" },\n          { label: \"Students Tracked\", value: coordinatorStats?.studentsTracked?.toString() || \"0\", icon: \"fas fa-users\" },\n          { label: \"Outcomes Mapped\", value: coordinatorStats?.outcomesMapped ? `${coordinatorStats.outcomesMapped}%` : \"0%\", icon: \"fas fa-chart-line\" },\n        ];\n      case \"teacher\":\n        return [\n          { label: \"Courses Teaching\", value: teacherStats?.coursesTeaching?.toString() || \"0\", icon: \"fas fa-chalkboard-teacher\" },\n          { label: \"Active Students\", value: teacherStats?.activeStudents?.toString() || \"0\", icon: \"fas fa-user-graduate\" },\n          { label: \"Assignments Created\", value: teacherStats?.assignmentsCreated?.toString() || \"0\", icon: \"fas fa-tasks\" },\n        ];\n      case \"admin\":\n        return [\n          { label: \"Total Programs\", value: adminStats?.totalPrograms?.toString() || \"0\", icon: \"fas fa-university\" },\n          { label: \"System Users\", value: adminStats?.systemUsers?.toLocaleString() || \"0\", icon: \"fas fa-users-cog\" },\n          { label: \"System Health\", value: adminStats?.systemHealth ? `${adminStats.systemHealth}%` : \"0%\", icon: \"fas fa-heartbeat\" },\n        ];\n      case \"student\":\n        return [\n          { label: \"XP Earned\", value: (progress as any)?.totalXP?.toString() || \"0\", icon: \"fas fa-star\" },\n          { label: \"Current Level\", value: (progress as any)?.currentLevel?.toString() || \"1\", icon: \"fas fa-trophy\" },\n          { label: \"Streak Days\", value: (progress as any)?.currentStreak?.toString() || \"0\", icon: \"fas fa-fire\" },\n        ];\n      default:\n        return [];\n    }\n  };\n\n  return (\n    <nav className=\"bg-card shadow-sm border-b border-border sticky top-0 z-50\" data-testid=\"navigation-header\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center py-2\">\n          {/* Logo and Brand */}\n          <div className=\"flex items-center\">\n            <img \n              src={edeviserLogo} \n              alt=\"Edeviser Logo\" \n              className=\"h-20 w-auto\" \n              data-testid=\"img-logo\"\n            />\n          </div>\n\n          {/* User Profile & Role Info */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Role-specific stats */}\n            {getStatsForRole().map((stat, index) => (\n              <div key={index} className=\"hidden md:flex items-center space-x-2\">\n                <div className=\"bg-primary/10 text-primary p-2 rounded-lg\">\n                  <i className={`${stat.icon} text-sm`}></i>\n                </div>\n                <div>\n                  <div className=\"text-sm font-semibold text-foreground\" data-testid={`stat-${stat.label.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    {stat.value}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">{stat.label}</div>\n                </div>\n              </div>\n            ))}\n\n            {/* Unified Notification Center */}\n            <UnifiedNotificationCenter />\n\n            {/* Role Display */}\n            <div className=\"flex items-center space-x-2 bg-muted px-3 py-2 rounded-lg\">\n              <span className=\"text-sm text-muted-foreground\">Role:</span>\n              <span className=\"text-sm font-medium text-foreground\" data-testid=\"text-user-role\">\n                {getRoleLabel(user?.role || \"\")}\n              </span>\n            </div>\n\n            {/* User Avatar and Info */}\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"text-right\">\n                <div className=\"text-sm font-medium text-foreground\" data-testid=\"text-user-name\">\n                  {user?.firstName} {user?.lastName}\n                </div>\n                <div className=\"text-xs text-muted-foreground\" data-testid=\"text-user-email\">\n                  {user?.email}\n                </div>\n              </div>\n              \n              <div className=\"relative\">\n                <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-semibold\">\n                  {user?.firstName?.[0]}{user?.lastName?.[0]}\n                </div>\n              </div>\n\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleLogout}\n                disabled={logoutMutation.isPending}\n                data-testid=\"button-logout\"\n              >\n                {logoutMutation.isPending ? \"Signing out...\" : \"Sign Out\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":6510},"client/src/components/outcomes/outcome-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { insertLearningOutcomeSchema, type InsertLearningOutcome, type LearningOutcome } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { BLOOMS_LEVELS, OUTCOME_TYPES } from \"@shared/schema\";\n\ninterface OutcomeFormProps {\n  outcome?: LearningOutcome;\n  onSuccess?: () => void;\n  onCancel?: () => void;\n}\n\nexport function OutcomeForm({ outcome, onSuccess, onCancel }: OutcomeFormProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: programs } = useQuery({\n    queryKey: [\"/api/programs\"],\n  });\n\n  const { data: courses } = useQuery({\n    queryKey: [\"/api/courses\"],\n  });\n\n  const form = useForm<InsertLearningOutcome>({\n    resolver: zodResolver(insertLearningOutcomeSchema),\n    defaultValues: {\n      code: outcome?.code || \"\",\n      title: outcome?.title || \"\",\n      description: outcome?.description || \"\",\n      type: outcome?.type || \"CLO\",\n      bloomsLevel: outcome?.bloomsLevel || \"understand\",\n      programId: outcome?.programId || \"\",\n      courseId: outcome?.courseId || \"\",\n      ownerId: user?.id || \"\",\n      lastEditedBy: user?.id || \"\",\n      version: outcome?.version || 1,\n      isActive: outcome?.isActive ?? true,\n    },\n  });\n\n  const selectedType = form.watch(\"type\");\n  const selectedProgramId = form.watch(\"programId\");\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertLearningOutcome) => {\n      const response = await apiRequest(\"POST\", \"/api/learning-outcomes\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Learning outcome created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/learning-outcomes\"] });\n      onSuccess?.();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: Partial<LearningOutcome>) => {\n      const response = await apiRequest(\"PUT\", `/api/learning-outcomes/${outcome?.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Learning outcome updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/learning-outcomes\"] });\n      onSuccess?.();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertLearningOutcome) => {\n    if (outcome) {\n      updateMutation.mutate({ ...data, lastEditedBy: user?.id });\n    } else {\n      createMutation.mutate({ ...data, ownerId: user?.id, lastEditedBy: user?.id });\n    }\n  };\n\n  const getBloomsDescription = (level: string) => {\n    const descriptions = {\n      remember: \"Recall facts and basic concepts\",\n      understand: \"Explain ideas or concepts\", \n      apply: \"Use information in new situations\",\n      analyze: \"Draw connections among ideas\",\n      evaluate: \"Justify a stand or decision\",\n      create: \"Produce new or original work\"\n    };\n    return descriptions[level as keyof typeof descriptions];\n  };\n\n  const filteredCourses = courses?.filter(course => \n    selectedType === \"CLO\" && (!selectedProgramId || course.programId === selectedProgramId)\n  ) || [];\n\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto\" data-testid=\"outcome-form\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <i className=\"fas fa-bullseye text-primary mr-3\"></i>\n          {outcome ? \"Edit Learning Outcome\" : \"Create New Learning Outcome\"}\n        </CardTitle>\n        <CardDescription>\n          {outcome ? \"Update the learning outcome details below\" : \"Define a new learning outcome with Bloom's taxonomy classification\"}\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Outcome Type */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"type\">Outcome Type *</Label>\n            <Select \n              value={form.watch(\"type\")} \n              onValueChange={(value) => {\n                form.setValue(\"type\", value as any);\n                // Clear program/course when type changes\n                if (value === \"ILO\") {\n                  form.setValue(\"programId\", \"\");\n                  form.setValue(\"courseId\", \"\");\n                } else if (value === \"PLO\") {\n                  form.setValue(\"courseId\", \"\");\n                }\n              }}\n            >\n              <SelectTrigger data-testid=\"select-outcome-type\">\n                <SelectValue placeholder=\"Select outcome type\" />\n              </SelectTrigger>\n              <SelectContent>\n                {OUTCOME_TYPES.map((type) => (\n                  <SelectItem key={type} value={type}>\n                    {type} - {type === \"ILO\" ? \"Institutional\" : type === \"PLO\" ? \"Program\" : \"Course\"} Learning Outcome\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {form.formState.errors.type && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.type.message}</p>\n            )}\n          </div>\n\n          {/* Code and Title */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"code\">Outcome Code *</Label>\n              <Input\n                id=\"code\"\n                {...form.register(\"code\")}\n                placeholder=\"e.g., ILO-1, PLO-1, CLO-1.1\"\n                data-testid=\"input-outcome-code\"\n              />\n              {form.formState.errors.code && (\n                <p className=\"text-sm text-destructive\">{form.formState.errors.code.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Title *</Label>\n              <Input\n                id=\"title\"\n                {...form.register(\"title\")}\n                placeholder=\"Brief title of the learning outcome\"\n                data-testid=\"input-outcome-title\"\n              />\n              {form.formState.errors.title && (\n                <p className=\"text-sm text-destructive\">{form.formState.errors.title.message}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Description */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description *</Label>\n            <Textarea\n              id=\"description\"\n              {...form.register(\"description\")}\n              placeholder=\"Detailed description of what students should be able to do...\"\n              className=\"min-h-[100px]\"\n              data-testid=\"textarea-outcome-description\"\n            />\n            {form.formState.errors.description && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.description.message}</p>\n            )}\n          </div>\n\n          {/* Bloom's Taxonomy Level */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"bloomsLevel\">Bloom's Taxonomy Level *</Label>\n            <Select value={form.watch(\"bloomsLevel\")} onValueChange={(value) => form.setValue(\"bloomsLevel\", value as any)}>\n              <SelectTrigger data-testid=\"select-blooms-level\">\n                <SelectValue placeholder=\"Select cognitive level\" />\n              </SelectTrigger>\n              <SelectContent>\n                {BLOOMS_LEVELS.map((level) => (\n                  <SelectItem key={level} value={level}>\n                    <div className=\"flex items-center space-x-3\">\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {level}\n                      </Badge>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {getBloomsDescription(level)}\n                      </span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {form.formState.errors.bloomsLevel && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.bloomsLevel.message}</p>\n            )}\n          </div>\n\n          {/* Program Selection (for PLO and CLO) */}\n          {(selectedType === \"PLO\" || selectedType === \"CLO\") && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"programId\">Program {selectedType === \"PLO\" ? \"*\" : \"\"}</Label>\n              <Select \n                value={form.watch(\"programId\") || \"\"} \n                onValueChange={(value) => {\n                  form.setValue(\"programId\", value);\n                  if (selectedType === \"CLO\") {\n                    form.setValue(\"courseId\", \"\"); // Clear course when program changes\n                  }\n                }}\n              >\n                <SelectTrigger data-testid=\"select-program\">\n                  <SelectValue placeholder=\"Select program\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">No program selected</SelectItem>\n                  {programs?.map((program) => (\n                    <SelectItem key={program.id} value={program.id}>\n                      {program.name} ({program.code})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {form.formState.errors.programId && (\n                <p className=\"text-sm text-destructive\">{form.formState.errors.programId.message}</p>\n              )}\n            </div>\n          )}\n\n          {/* Course Selection (for CLO only) */}\n          {selectedType === \"CLO\" && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"courseId\">Course *</Label>\n              <Select \n                value={form.watch(\"courseId\") || \"\"} \n                onValueChange={(value) => form.setValue(\"courseId\", value)}\n              >\n                <SelectTrigger data-testid=\"select-course\">\n                  <SelectValue placeholder=\"Select course\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">No course selected</SelectItem>\n                  {filteredCourses.map((course) => (\n                    <SelectItem key={course.id} value={course.id}>\n                      {course.name} ({course.code})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {form.formState.errors.courseId && (\n                <p className=\"text-sm text-destructive\">{form.formState.errors.courseId.message}</p>\n              )}\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex items-center justify-end space-x-3 pt-6 border-t\">\n            {onCancel && (\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onCancel}\n                data-testid=\"button-cancel-outcome\"\n              >\n                Cancel\n              </Button>\n            )}\n            <Button\n              type=\"submit\"\n              disabled={createMutation.isPending || updateMutation.isPending}\n              data-testid=\"button-save-outcome\"\n            >\n              {createMutation.isPending || updateMutation.isPending ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  {outcome ? \"Updating...\" : \"Creating...\"}\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-save mr-2\"></i>\n                  {outcome ? \"Update Outcome\" : \"Create Outcome\"}\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":12711},"client/src/components/outcomes/visual-mapping-canvas.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragOverlay,\n  useDraggable,\n  useDroppable\n} from \"@dnd-kit/core\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport { Network, Save, Eye, Plus, Filter, Target, Trophy, GraduationCap } from \"lucide-react\";\nimport type { LearningOutcome, OutcomeMapping, InsertOutcomeMapping } from \"@shared/schema\";\n\ninterface DragDropMapping {\n  sourceId: string;\n  targetId: string;\n  sourceType: string;\n  targetType: string;\n}\n\nexport function VisualMappingCanvas() {\n  const [selectedProgram, setSelectedProgram] = useState<string>(\"all\");\n  const [activeConnection, setActiveConnection] = useState<DragDropMapping | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: learningOutcomes = [] } = useQuery<LearningOutcome[]>({\n    queryKey: [\"/api/learning-outcomes\"],\n  });\n\n  const { data: outcomeMappings = [] } = useQuery<OutcomeMapping[]>({\n    queryKey: [\"/api/outcome-mappings\"],\n  });\n\n  const { data: programs = [] } = useQuery<any[]>({\n    queryKey: [\"/api/programs\"],\n  });\n\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor)\n  );\n\n  const filteredOutcomes = useMemo(() => {\n    if (selectedProgram === \"all\") return learningOutcomes;\n    return learningOutcomes.filter((outcome: LearningOutcome) => \n      outcome.programId === selectedProgram || outcome.type === \"ILO\"\n    );\n  }, [learningOutcomes, selectedProgram]);\n\n  const ilos = filteredOutcomes.filter((outcome: LearningOutcome) => outcome.type === \"ILO\");\n  const plos = filteredOutcomes.filter((outcome: LearningOutcome) => outcome.type === \"PLO\");\n  const clos = filteredOutcomes.filter((outcome: LearningOutcome) => outcome.type === \"CLO\");\n\n  const createMappingMutation = useMutation({\n    mutationFn: async (data: InsertOutcomeMapping) => {\n      const response = await apiRequest(\"POST\", \"/api/outcome-mappings\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Outcome mapping created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/outcome-mappings\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getBloomsBadgeColor = (level: string) => {\n    const colors = {\n      remember: \"bg-purple-500\",\n      understand: \"bg-blue-500\", \n      apply: \"bg-green-500\",\n      analyze: \"bg-yellow-500\",\n      evaluate: \"bg-orange-500\",\n      create: \"bg-red-500\"\n    };\n    return colors[level as keyof typeof colors] || \"bg-gray-500\";\n  };\n\n  const handleDragStart = (event: any) => {\n    const { active } = event;\n    const outcomeId = active.id;\n    const outcome = filteredOutcomes.find((o: LearningOutcome) => o.id === outcomeId);\n    if (outcome) {\n      setActiveConnection({\n        sourceId: outcome.id,\n        targetId: \"\",\n        sourceType: outcome.type,\n        targetType: \"\"\n      });\n    }\n  };\n\n  const handleDragEnd = (event: any) => {\n    const { active, over } = event;\n    if (!over || !activeConnection) {\n      setActiveConnection(null);\n      return;\n    }\n\n    const sourceOutcome = filteredOutcomes.find((o: LearningOutcome) => o.id === active.id);\n    const targetOutcome = filteredOutcomes.find((o: LearningOutcome) => o.id === over.id);\n\n    if (sourceOutcome && targetOutcome && sourceOutcome.id !== targetOutcome.id) {\n      // Check if mapping is valid (CLO -> PLO -> ILO)\n      const isValidMapping = \n        (sourceOutcome.type === \"CLO\" && targetOutcome.type === \"PLO\") ||\n        (sourceOutcome.type === \"PLO\" && targetOutcome.type === \"ILO\");\n\n      if (isValidMapping) {\n        // Check if mapping already exists\n        const existingMapping = outcomeMappings.find((mapping: OutcomeMapping) => \n          mapping.sourceOutcomeId === sourceOutcome.id && \n          mapping.targetOutcomeId === targetOutcome.id\n        );\n\n        if (!existingMapping) {\n          createMappingMutation.mutate({\n            sourceOutcomeId: sourceOutcome.id,\n            targetOutcomeId: targetOutcome.id,\n            weight: \"1.00\",\n            createdBy: \"current-user\" // This should come from auth context\n          });\n        } else {\n          toast({\n            title: \"Mapping exists\",\n            description: \"This connection already exists.\",\n            variant: \"destructive\",\n          });\n        }\n      } else {\n        toast({\n          title: \"Invalid connection\",\n          description: \"You can only connect CLO → PLO or PLO → ILO.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n\n    setActiveConnection(null);\n  };\n\n  // Draggable Outcome Component\n  function DraggableOutcome({ outcome, index, type }: { outcome: LearningOutcome; index: number; type: string }) {\n    const { attributes, listeners, setNodeRef, transform, isDragging } = useDraggable({\n      id: outcome.id,\n    });\n\n    const style = {\n      transform: CSS.Translate.toString(transform),\n    };\n\n    const getTypeStyles = () => {\n      switch (type) {\n        case \"ilo\":\n          return \"bg-red-100 border-2 border-red-500 text-red-700\";\n        case \"plo\":\n          return \"bg-blue-100 border-2 border-blue-500 text-blue-700\";\n        case \"clo\":\n          return \"bg-green-100 border-2 border-green-500 text-green-700\";\n        default:\n          return \"bg-gray-100 border-2 border-gray-500 text-gray-700\";\n      }\n    };\n\n    const getTypeIcon = () => {\n      switch (type) {\n        case \"ilo\":\n          return <Trophy className=\"w-3 h-3 mx-auto mb-2\" />;\n        case \"plo\":\n          return <Target className=\"w-3 h-3 mx-auto mb-2\" />;\n        case \"clo\":\n          return <GraduationCap className=\"w-2 h-2 mx-auto mb-2\" />;\n        default:\n          return null;\n      }\n    };\n\n    return (\n      <DroppableOutcome outcome={outcome} index={index} type={type}>\n        <div\n          ref={setNodeRef}\n          style={style}\n          {...listeners}\n          {...attributes}\n          className={`${getTypeStyles()} rounded-xl p-4 min-w-[200px] hover:shadow-lg transition-shadow cursor-pointer ${\n            isDragging ? \"opacity-50\" : \"\"\n          }`}\n          data-testid={`${type}-node-${index}`}\n        >\n          {getTypeIcon()}\n          <div className=\"text-sm font-medium text-center mb-1\">{outcome.code}</div>\n          <div className=\"text-xs text-center mb-2 line-clamp-2\">{outcome.title}</div>\n          <Badge variant=\"outline\" className={`text-xs ${getBloomsBadgeColor(outcome.bloomsLevel)} text-white border-none`}>\n            {outcome.bloomsLevel}\n          </Badge>\n        </div>\n      </DroppableOutcome>\n    );\n  }\n\n  // Droppable Outcome Component\n  function DroppableOutcome({ outcome, index, type, children }: { outcome: LearningOutcome; index: number; type: string; children: React.ReactNode }) {\n    const { isOver, setNodeRef } = useDroppable({\n      id: outcome.id,\n    });\n\n    const style = {\n      backgroundColor: isOver ? \"rgba(0, 255, 0, 0.1)\" : undefined,\n    };\n\n    return (\n      <div ref={setNodeRef} style={style}>\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <Card className=\"w-full\" data-testid=\"visual-mapping-canvas\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"text-2xl font-bold flex items-center\">\n              <Network className=\"w-6 h-6 text-primary mr-3\" />\n              Visual Outcome Mapping Canvas\n            </CardTitle>\n            <CardDescription>\n              Interactive mapping of CLO → PLO → ILO connections with Bloom's taxonomy integration\n            </CardDescription>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Select value={selectedProgram} onValueChange={setSelectedProgram}>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Filter by program\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Programs</SelectItem>\n                {programs.map((program: any) => (\n                  <SelectItem key={program.id} value={program.id || \"unknown\"}>\n                    {program.name || \"Unknown Program\"}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Button data-testid=\"button-save-mapping\" disabled={createMappingMutation.isPending}>\n              <Save className=\"w-4 h-4 mr-2\" />\n              {createMappingMutation.isPending ? \"Saving...\" : \"Save Mapping\"}\n            </Button>\n            <Button variant=\"secondary\" data-testid=\"button-preview-mapping\">\n              <Eye className=\"w-4 h-4 mr-2\" />\n              Preview\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* Mapping Legend */}\n        <div className=\"flex items-center justify-center space-x-8 mb-8 p-4 bg-muted/20 rounded-lg\">\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <div className=\"w-4 h-4 bg-red-500 rounded-full\"></div>\n            <span className=\"text-muted-foreground\">ILO (Institutional)</span>\n          </div>\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <div className=\"w-4 h-4 bg-blue-500 rounded-full\"></div>\n            <span className=\"text-muted-foreground\">PLO (Program)</span>\n          </div>\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <div className=\"w-4 h-4 bg-green-500 rounded-full\"></div>\n            <span className=\"text-muted-foreground\">CLO (Course)</span>\n          </div>\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <div className=\"w-4 h-1 bg-primary rounded\"></div>\n            <span className=\"text-muted-foreground\">Mapping Connection</span>\n          </div>\n        </div>\n\n        {/* Drag-and-Drop Instructions */}\n        <div className=\"mb-6 bg-accent/10 border border-accent/20 rounded-lg p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <Target className=\"w-5 h-5 text-accent mt-0.5\" />\n            <div>\n              <h4 className=\"font-medium text-accent-foreground\">Drag & Drop Mapping</h4>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Drag CLOs to PLOs, or PLOs to ILOs to create outcome mappings. \n                Invalid connections will be rejected with feedback.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Mapping Canvas */}\n        <DndContext\n          sensors={sensors}\n          collisionDetection={closestCenter}\n          onDragStart={handleDragStart}\n          onDragEnd={handleDragEnd}\n        >\n          <div className=\"bg-muted/10 rounded-xl p-6 min-h-[600px] relative\">\n          \n          {/* ILO Level (Top) */}\n          <div className=\"text-center mb-8\">\n            <h4 className=\"text-sm font-medium text-muted-foreground mb-4 uppercase tracking-wide\">\n              Institutional Learning Outcomes\n            </h4>\n            <div className=\"flex justify-center space-x-6 flex-wrap\">\n              {ilos.length > 0 ? ilos.map((ilo: LearningOutcome, index: number) => (\n                <DraggableOutcome key={ilo.id} outcome={ilo} index={index} type=\"ilo\" />\n              )) : (\n                <div className=\"text-center py-8\">\n                  <Trophy className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                  <p className=\"text-sm text-muted-foreground\">No ILOs created yet</p>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Connection Lines ILO -> PLO */}\n          {ilos.length > 0 && plos.length > 0 && (\n            <div className=\"flex justify-center mb-8\">\n              <div className=\"relative\">\n                <div className=\"w-px h-12 bg-gradient-to-b from-red-500 to-blue-500\"></div>\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-gradient-to-r from-red-500 to-blue-500 rounded-full\"></div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* PLO Level (Middle) */}\n          <div className=\"text-center mb-8\">\n            <h4 className=\"text-sm font-medium text-muted-foreground mb-4 uppercase tracking-wide\">\n              Program Learning Outcomes\n            </h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {plos.length > 0 ? plos.map((plo: LearningOutcome, index: number) => (\n                <DraggableOutcome key={plo.id} outcome={plo} index={index} type=\"plo\" />\n              )) : (\n                <div className=\"col-span-full text-center py-8\">\n                  <Target className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                  <p className=\"text-sm text-muted-foreground\">No PLOs created yet</p>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Connection Lines PLO -> CLO */}\n          {plos.length > 0 && clos.length > 0 && (\n            <div className=\"flex justify-center mb-8\">\n              <div className=\"relative\">\n                <div className=\"w-px h-12 bg-gradient-to-b from-blue-500 to-green-500\"></div>\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-gradient-to-r from-blue-500 to-green-500 rounded-full\"></div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* CLO Level (Bottom) */}\n          <div className=\"text-center\">\n            <h4 className=\"text-sm font-medium text-muted-foreground mb-4 uppercase tracking-wide\">\n              Course Learning Outcomes\n            </h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-3\">\n              {clos.length > 0 ? clos.slice(0, 12).map((clo: LearningOutcome, index: number) => (\n                <DraggableOutcome key={clo.id} outcome={clo} index={index} type=\"clo\" />\n              )) : (\n                <div className=\"col-span-full text-center py-8\">\n                  <GraduationCap className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                  <p className=\"text-sm text-muted-foreground\">No CLOs created yet</p>\n                </div>\n              )}\n              \n              {clos.length > 12 && (\n                <div className=\"col-span-full text-center mt-4\">\n                  <Badge variant=\"outline\">\n                    +{clos.length - 12} more CLOs\n                  </Badge>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Empty State */}\n          {ilos.length === 0 && plos.length === 0 && clos.length === 0 && (\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"text-center\">\n                <i className=\"fas fa-project-diagram text-muted-foreground text-4xl mb-4\"></i>\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Learning Outcomes Found</h3>\n                <p className=\"text-muted-foreground mb-4 max-w-md\">\n                  Start by creating learning outcomes to visualize the outcome mapping connections.\n                </p>\n                <div className=\"flex items-center space-x-2\">\n                  <Button data-testid=\"button-create-first-outcome\">\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Create First Outcome\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n        </DndContext>\n\n        {/* Mapping Instructions */}\n        <div className=\"mt-6 bg-accent/10 border border-accent/20 rounded-lg p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <i className=\"fas fa-lightbulb text-accent text-lg mt-0.5\"></i>\n            <div>\n              <h4 className=\"font-medium text-accent-foreground\">Interactive Mapping</h4>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Click on any outcome to view details, edit descriptions, or adjust Bloom's taxonomy levels. \n                Drag and drop functionality will be available to create visual connections between outcomes.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Mapping Statistics */}\n        <div className=\"mt-6 grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"bg-red-50 rounded-lg p-4 text-center border border-red-200\">\n            <div className=\"text-2xl font-bold text-red-600\" data-testid=\"stat-total-ilos\">\n              {ilos.length}\n            </div>\n            <div className=\"text-sm text-red-700\">Institutional</div>\n          </div>\n          <div className=\"bg-blue-50 rounded-lg p-4 text-center border border-blue-200\">\n            <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"stat-total-plos\">\n              {plos.length}\n            </div>\n            <div className=\"text-sm text-blue-700\">Program</div>\n          </div>\n          <div className=\"bg-green-50 rounded-lg p-4 text-center border border-green-200\">\n            <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-total-clos\">\n              {clos.length}\n            </div>\n            <div className=\"text-sm text-green-700\">Course</div>\n          </div>\n          <div className=\"bg-primary/5 rounded-lg p-4 text-center border border-primary/20\">\n            <div className=\"text-2xl font-bold text-primary\" data-testid=\"stat-total-mappings\">\n              {outcomeMappings?.length || 0}\n            </div>\n            <div className=\"text-sm text-primary\">Connections</div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":18462},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-blue-600 text-white hover:bg-blue-700\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-blue-900 text-white hover:bg-blue-800\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-blue-600 underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1868},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/notifications/role-notifications.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Bell, AlertCircle, CheckCircle, Info, Clock } from \"lucide-react\";\nimport type { SafeUser, Assignment, StudentSubmission, LearningOutcome } from \"@shared/schema\";\n\ninterface Notification {\n  id: string;\n  type: \"info\" | \"warning\" | \"success\" | \"urgent\";\n  title: string;\n  message: string;\n  actionLabel?: string;\n  actionUrl?: string;\n  timestamp: Date;\n}\n\nexport function RoleNotifications() {\n  const { user } = useAuth();\n  const [readNotifications, setReadNotifications] = useState<Set<string>>(new Set());\n\n  // Fetch role-specific data for notifications\n  const { data: assignments = [] } = useQuery<Assignment[]>({\n    queryKey: [\"/api/assignments\"],\n    enabled: !!user && user.role === \"teacher\",\n  });\n\n  const { data: submissions = [] } = useQuery<StudentSubmission[]>({\n    queryKey: [\"/api/student-submissions\"],\n    enabled: !!user && user.role === \"teacher\",\n  });\n\n  const { data: learningOutcomes = [] } = useQuery<LearningOutcome[]>({\n    queryKey: [\"/api/learning-outcomes\"],\n    enabled: !!user && (user.role === \"coordinator\" || user.role === \"admin\"),\n  });\n\n  const { data: users = [] } = useQuery<SafeUser[]>({\n    queryKey: [\"/api/users\"],\n    enabled: !!user && user.role === \"admin\",\n  });\n\n  if (!user) return null;\n\n  // Generate role-specific notifications\n  const generateNotifications = (): Notification[] => {\n    const notifications: Notification[] = [];\n\n    switch (user.role) {\n      case \"admin\":\n        // System-wide notifications for admin\n        const inactiveUsers = users.filter(u => !u.isActive);\n        if (inactiveUsers.length > 0) {\n          notifications.push({\n            id: \"inactive-users\",\n            type: \"warning\",\n            title: \"Inactive Users Detected\",\n            message: `${inactiveUsers.length} user account(s) are currently inactive`,\n            actionLabel: \"Review Users\",\n            actionUrl: \"/admin/users\",\n            timestamp: new Date(),\n          });\n        }\n\n        const unmappedOutcomes = learningOutcomes.filter(o => o.type === \"ILO\");\n        if (unmappedOutcomes.length === 0) {\n          notifications.push({\n            id: \"no-ilos\",\n            type: \"urgent\",\n            title: \"No ILOs Defined\",\n            message: \"Institution needs at least one Institutional Learning Outcome\",\n            actionLabel: \"Create ILO\",\n            actionUrl: \"/admin/outcomes\",\n            timestamp: new Date(),\n          });\n        }\n\n        notifications.push({\n          id: \"system-health\",\n          type: \"success\",\n          title: \"System Health: Excellent\",\n          message: \"All systems operating at 98% efficiency\",\n          timestamp: new Date(),\n        });\n        break;\n\n      case \"coordinator\":\n        // Program management notifications\n        const plos = learningOutcomes.filter(o => o.type === \"PLO\");\n        const clos = learningOutcomes.filter(o => o.type === \"CLO\");\n        \n        if (plos.length === 0) {\n          notifications.push({\n            id: \"no-plos\",\n            type: \"warning\",\n            title: \"Program Needs PLOs\",\n            message: \"Your program requires Program Learning Outcomes\",\n            actionLabel: \"Create PLO\",\n            actionUrl: \"/coordinator/outcomes\",\n            timestamp: new Date(),\n          });\n        }\n\n        if (clos.length > plos.length * 3) {\n          notifications.push({\n            id: \"plo-alignment\",\n            type: \"info\",\n            title: \"Review PLO Alignment\",\n            message: \"High CLO to PLO ratio detected - consider alignment review\",\n            actionLabel: \"Visual Mapping\",\n            actionUrl: \"/coordinator/mapping\",\n            timestamp: new Date(),\n          });\n        }\n\n        notifications.push({\n          id: \"mapping-status\",\n          type: \"info\",\n          title: \"Outcome Mapping Active\",\n          message: `${plos.length} PLOs mapped to ${clos.length} CLOs`,\n          timestamp: new Date(),\n        });\n        break;\n\n      case \"teacher\":\n        // Course and grading notifications\n        const pendingGrading = submissions.filter(s => !s.gradedAt && \n          assignments.some(a => a.id === s.assignmentId && a.teacherId === user.id));\n        \n        if (pendingGrading.length > 0) {\n          notifications.push({\n            id: \"pending-grading\",\n            type: \"urgent\",\n            title: \"Grading Required\",\n            message: `${pendingGrading.length} submission(s) awaiting your review`,\n            actionLabel: \"Grade Now\",\n            actionUrl: \"/teacher/grading\",\n            timestamp: new Date(),\n          });\n        }\n\n        const recentlyGraded = submissions.filter(s => \n          s.gradedAt && \n          new Date(s.gradedAt).getTime() > Date.now() - 24 * 60 * 60 * 1000 &&\n          assignments.some(a => a.id === s.assignmentId && a.teacherId === user.id)\n        );\n\n        if (recentlyGraded.length > 0) {\n          notifications.push({\n            id: \"recent-grading\",\n            type: \"success\",\n            title: \"Grading Complete\",\n            message: `${recentlyGraded.length} submission(s) graded in the last 24h`,\n            timestamp: new Date(),\n          });\n        }\n\n        const teacherCLOs = learningOutcomes.filter(o => \n          o.type === \"CLO\" && o.ownerId === user.id);\n        \n        if (teacherCLOs.length === 0) {\n          notifications.push({\n            id: \"no-clos\",\n            type: \"warning\",\n            title: \"Course Needs CLOs\",\n            message: \"Define Course Learning Outcomes for better assessment\",\n            actionLabel: \"Create CLO\",\n            actionUrl: \"/teacher/outcomes\",\n            timestamp: new Date(),\n          });\n        }\n        break;\n\n      case \"student\":\n        // Learning progress notifications\n        notifications.push({\n          id: \"daily-goal\",\n          type: \"info\",\n          title: \"Daily Learning Goal\",\n          message: \"Complete today's challenge to maintain your streak!\",\n          actionLabel: \"Start Learning\",\n          actionUrl: \"/student/path\",\n          timestamp: new Date(),\n        });\n\n        notifications.push({\n          id: \"achievement-ready\",\n          type: \"success\",\n          title: \"Achievement Unlocked!\",\n          message: \"You're close to earning the 'Data Structures Master' badge\",\n          timestamp: new Date(),\n        });\n        break;\n    }\n\n    return notifications;\n  };\n\n  const allNotifications = generateNotifications();\n  const notifications = allNotifications.filter(n => !readNotifications.has(n.id));\n  const urgentCount = notifications.filter(n => n.type === \"urgent\").length;\n  const totalCount = notifications.length;\n\n  const handleMarkAllAsRead = () => {\n    const allIds = new Set(allNotifications.map(n => n.id));\n    setReadNotifications(allIds);\n  };\n\n  const handleMarkAsRead = (notificationId: string) => {\n    setReadNotifications(prev => new Set([...prev, notificationId]));\n  };\n\n  const getNotificationIcon = (type: Notification[\"type\"]) => {\n    switch (type) {\n      case \"urgent\": return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\n      case \"warning\": return <AlertCircle className=\"h-4 w-4 text-yellow-500\" />;\n      case \"success\": return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case \"info\": return <Info className=\"h-4 w-4 text-blue-500\" />;\n      default: return <Bell className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getNotificationColor = (type: Notification[\"type\"]) => {\n    switch (type) {\n      case \"urgent\": return \"bg-red-50 border-red-200 dark:bg-red-950 dark:border-red-800\";\n      case \"warning\": return \"bg-yellow-50 border-yellow-200 dark:bg-yellow-950 dark:border-yellow-800\";\n      case \"success\": return \"bg-green-50 border-green-200 dark:bg-green-950 dark:border-green-800\";\n      case \"info\": return \"bg-blue-50 border-blue-200 dark:bg-blue-950 dark:border-blue-800\";\n      default: return \"bg-gray-50 border-gray-200 dark:bg-gray-950 dark:border-gray-800\";\n    }\n  };\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"notifications-trigger\">\n          <Bell className=\"h-5 w-5\" />\n          {totalCount > 0 && (\n            <Badge \n              variant={urgentCount > 0 ? \"destructive\" : \"secondary\"} \n              className=\"absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs\"\n              data-testid=\"notification-count\"\n            >\n              {totalCount > 9 ? \"9+\" : totalCount}\n            </Badge>\n          )}\n        </Button>\n      </PopoverTrigger>\n      \n      <PopoverContent className=\"w-80 p-0\" align=\"end\" data-testid=\"notifications-content\">\n        <div className=\"p-4 border-b border-border\">\n          <h3 className=\"font-semibold text-foreground\">\n            {user.role.charAt(0).toUpperCase() + user.role.slice(1)} Notifications\n          </h3>\n          <p className=\"text-sm text-muted-foreground\">\n            {totalCount === 0 ? \"All caught up!\" : `${totalCount} notification${totalCount !== 1 ? 's' : ''}`}\n          </p>\n        </div>\n        \n        <div className=\"max-h-96 overflow-y-auto\">\n          {notifications.length === 0 ? (\n            <div className=\"p-6 text-center\">\n              <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-3\" />\n              <p className=\"text-sm text-muted-foreground\">No notifications</p>\n              <p className=\"text-xs text-muted-foreground\">You're all set!</p>\n            </div>\n          ) : (\n            <div className=\"p-2 space-y-2\">\n              {notifications.map((notification) => (\n                <div\n                  key={notification.id}\n                  className={`p-3 rounded-lg border ${getNotificationColor(notification.type)}`}\n                  data-testid={`notification-${notification.id}`}\n                >\n                  <div className=\"flex items-start space-x-3\">\n                    {getNotificationIcon(notification.type)}\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium text-foreground\">\n                        {notification.title}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {notification.message}\n                      </p>\n                      <div className=\"flex items-center justify-between mt-2\">\n                        <span className=\"text-xs text-muted-foreground flex items-center\">\n                          <Clock className=\"h-3 w-3 mr-1\" />\n                          {notification.timestamp.toLocaleTimeString([], { \n                            hour: '2-digit', \n                            minute: '2-digit' \n                          })}\n                        </span>\n                        {notification.actionLabel && (\n                          <Button size=\"sm\" variant=\"outline\" className=\"text-xs h-6\">\n                            {notification.actionLabel}\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n        \n        {notifications.length > 0 && (\n          <div className=\"p-3 border-t border-border\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"w-full text-xs\" \n              onClick={handleMarkAllAsRead}\n              data-testid=\"mark-all-read\"\n            >\n              Mark all as read\n            </Button>\n          </div>\n        )}\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":11949},"client/src/components/onboarding/student-onboarding-wrapper.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { StudentOnboarding } from \"./student-onboarding\";\nimport StudentDashboard from \"@/components/dashboard/student-dashboard\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Loader2 } from \"lucide-react\";\n\nexport function StudentOnboardingWrapper() {\n  const { user } = useAuth();\n  const [showOnboarding, setShowOnboarding] = useState(false);\n\n  // Check if student has completed onboarding\n  const { data: onboardingData, isLoading: isLoadingOnboarding, error } = useQuery({\n    queryKey: ['/api/student/onboarding'],\n    enabled: !!user && user.role === 'student',\n    retry: false,\n  });\n\n  // Check if student has selected a mascot\n  const { data: mascotData, isLoading: isLoadingMascot } = useQuery({\n    queryKey: ['/api/student/mascot'],\n    enabled: !!user && user.role === 'student',\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (!isLoadingOnboarding && !isLoadingMascot) {\n      // Show onboarding if:\n      // 1. No onboarding data exists, OR\n      // 2. Onboarding exists but not completed, OR\n      // 3. No mascot selected\n      const needsOnboarding = !onboardingData || \n                             !(onboardingData as any)?.isCompleted || \n                             !mascotData;\n      \n      setShowOnboarding(needsOnboarding);\n    }\n  }, [onboardingData, mascotData, isLoadingOnboarding, isLoadingMascot]);\n\n  const handleOnboardingComplete = () => {\n    setShowOnboarding(false);\n    // Refresh the page data\n    window.location.reload();\n  };\n\n  // Show loading while checking onboarding status\n  if (isLoadingOnboarding || isLoadingMascot) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md mx-auto\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n            </div>\n            <CardTitle className=\"text-2xl\">Welcome to E Deviser!</CardTitle>\n            <CardDescription>\n              Setting up your personalized learning experience...\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              This will just take a moment.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Show onboarding if needed\n  if (showOnboarding) {\n    return <StudentOnboarding onComplete={handleOnboardingComplete} />;\n  }\n\n  // Show regular student dashboard\n  return <StudentDashboard />;\n}","size_bytes":2865},"client/src/components/onboarding/student-onboarding.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ArrowLeft, ArrowRight, Star, Clock, Target, BookOpen, Heart, Trophy, Zap } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MascotType } from \"@shared/schema\";\n\n// Import mascot images\nimport foxImage from \"@assets/mascots/fox.png\";\nimport owlImage from \"@assets/mascots/owl.png\";\nimport penguinImage from \"@assets/mascots/penguin.png\";\n\nconst onboardingSchema = z.object({\n  learningStyle: z.string().min(1, \"Please select your learning style\"),\n  studyTimePreference: z.string().min(1, \"Please select your preferred study time\"),\n  motivationGoals: z.array(z.string()).min(1, \"Please select at least one goal\"),\n  currentEducationLevel: z.string().min(1, \"Please select your education level\"),\n  fieldOfStudy: z.string().min(1, \"Please enter your field of study\"),\n  weeklyStudyHours: z.number().min(1, \"Please enter how many hours you study per week\"),\n  preferredLanguage: z.string().default(\"english\"),\n  mascotType: z.enum([\"fox\", \"owl\", \"penguin\"]).optional(),\n  mascotName: z.string().min(1, \"Please give your study buddy a name\").optional(),\n});\n\ntype OnboardingFormData = z.infer<typeof onboardingSchema>;\n\nconst mascotOptions = [\n  {\n    type: \"fox\" as MascotType,\n    name: \"Clever Fox\",\n    description: \"Quick, resourceful, and loves solving problems. Perfect for analytical thinkers!\",\n    image: foxImage,\n    personality: \"Strategic • Creative • Adaptable\",\n    colors: \"bg-orange-100 border-orange-300 text-orange-800\"\n  },\n  {\n    type: \"owl\" as MascotType,\n    name: \"Wise Owl\",\n    description: \"Thoughtful, knowledgeable, and values deep understanding. Great for thorough learners!\",\n    image: owlImage,\n    personality: \"Wise • Patient • Detail-oriented\", \n    colors: \"bg-blue-100 border-blue-300 text-blue-800\"\n  },\n  {\n    type: \"penguin\" as MascotType,\n    name: \"Friendly Penguin\",\n    description: \"Social, encouraging, and makes learning fun. Ideal for collaborative learners!\",\n    image: penguinImage,\n    personality: \"Friendly • Supportive • Enthusiastic\",\n    colors: \"bg-purple-100 border-purple-300 text-purple-800\"\n  }\n];\n\nconst motivationOptions = [\n  { id: \"career\", label: \"Advance my career\", icon: Trophy },\n  { id: \"grades\", label: \"Improve my grades\", icon: Star },\n  { id: \"knowledge\", label: \"Gain knowledge\", icon: BookOpen },\n  { id: \"certification\", label: \"Get certified\", icon: Target },\n  { id: \"personal\", label: \"Personal development\", icon: Heart },\n  { id: \"skills\", label: \"Build new skills\", icon: Zap },\n];\n\ninterface StudentOnboardingProps {\n  onComplete: () => void;\n}\n\nexport function StudentOnboarding({ onComplete }: StudentOnboardingProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [selectedMascot, setSelectedMascot] = useState<MascotType | null>(null);\n  const [customMascotName, setCustomMascotName] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const totalSteps = 4;\n  const progress = (currentStep / totalSteps) * 100;\n\n  const form = useForm<OnboardingFormData>({\n    resolver: zodResolver(onboardingSchema),\n    defaultValues: {\n      learningStyle: \"\",\n      studyTimePreference: \"\",\n      motivationGoals: [],\n      currentEducationLevel: \"\",\n      fieldOfStudy: \"\",\n      weeklyStudyHours: 5,\n      preferredLanguage: \"english\",\n    },\n  });\n\n  const onboardingMutation = useMutation({\n    mutationFn: async (data: OnboardingFormData & { mascotType: MascotType; mascotName: string }) => {\n      // Submit onboarding data\n      const onboardingResponse = await apiRequest('POST', '/api/student/onboarding', {\n        learningStyle: data.learningStyle,\n        studyTimePreference: data.studyTimePreference,\n        motivationGoals: data.motivationGoals,\n        currentEducationLevel: data.currentEducationLevel,\n        fieldOfStudy: data.fieldOfStudy,\n        weeklyStudyHours: data.weeklyStudyHours,\n        preferredLanguage: data.preferredLanguage,\n        isCompleted: true,\n      });\n\n      // Submit mascot selection\n      const mascotResponse = await apiRequest('POST', '/api/student/mascot', {\n        mascotType: data.mascotType,\n        mascotName: data.mascotName,\n        mascotImagePath: `/assets/mascots/${data.mascotType}.png`,\n      });\n\n      // Initialize streak tracking\n      await apiRequest('POST', '/api/student/streaks', {\n        currentStreak: 0,\n        longestStreak: 0,\n        totalActiveDays: 0,\n        weeklyGoal: 5,\n      });\n\n      return { onboarding: onboardingResponse, mascot: mascotResponse };\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Welcome aboard! 🎉\",\n        description: \"Your learning journey is about to begin. Your study buddy is excited to meet you!\",\n      });\n      // Invalidate all related caches\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/student/onboarding'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/student/mascot'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/student/streaks'] });\n      onComplete();\n    },\n    onError: (error) => {\n      console.error('Onboarding error details:', error);\n      \n      // Check if it's an authentication error\n      if (error.message.includes('401') || error.message.includes('Authentication required')) {\n        toast({\n          title: \"Session Expired\",\n          description: \"Please log in again to complete your setup.\",\n          variant: \"destructive\",\n        });\n        // Redirect to login page after a short delay\n        setTimeout(() => {\n          window.location.href = '/auth';\n        }, 2000);\n      } else {\n        toast({\n          title: \"Oops! Something went wrong\",\n          description: `Setup failed: ${error.message || 'Please try again.'}`,\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const validateCurrentStep = () => {\n    const values = form.getValues();\n    \n    switch (currentStep) {\n      case 1:\n        return values.learningStyle && values.studyTimePreference;\n      case 2:\n        return values.motivationGoals && values.motivationGoals.length > 0;\n      case 3:\n        return values.currentEducationLevel && values.fieldOfStudy && values.weeklyStudyHours;\n      case 4:\n        return selectedMascot && customMascotName;\n      default:\n        return false;\n    }\n  };\n\n  const onSubmit = (data: OnboardingFormData) => {\n    // For steps 1-3, just validate current step and advance\n    if (currentStep < totalSteps) {\n      if (validateCurrentStep()) {\n        setCurrentStep(currentStep + 1);\n      } else {\n        toast({\n          title: \"Please complete all fields\",\n          description: \"Make sure to fill in all required information before continuing.\",\n          variant: \"destructive\",\n        });\n      }\n    } else {\n      // Final step - validate everything and submit\n      if (!selectedMascot || !customMascotName) {\n        toast({\n          title: \"Almost there!\",\n          description: \"Please select a study buddy and give them a name.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      onboardingMutation.mutate({\n        ...data,\n        mascotType: selectedMascot,\n        mascotName: customMascotName,\n      });\n    }\n  };\n\n  const nextStep = () => {\n    if (currentStep < totalSteps) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <motion.div\n            initial={{ opacity: 0, x: 50 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -50 }}\n            className=\"space-y-6\"\n          >\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2\">\n                Let's learn about you! 🌟\n              </h2>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Help us personalize your learning experience\n              </p>\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"learningStyle\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-base font-semibold\">What's your learning style?</FormLabel>\n                  <FormDescription>\n                    How do you learn best? This helps us recommend the right study methods.\n                  </FormDescription>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-learning-style\">\n                        <SelectValue placeholder=\"Select your learning style\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"visual\">Visual - I learn best with images, diagrams, and charts</SelectItem>\n                      <SelectItem value=\"auditory\">Auditory - I prefer listening and discussing</SelectItem>\n                      <SelectItem value=\"kinesthetic\">Kinesthetic - I learn by doing and hands-on practice</SelectItem>\n                      <SelectItem value=\"reading\">Reading/Writing - I prefer text-based learning</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"studyTimePreference\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-base font-semibold\">When do you study best?</FormLabel>\n                  <FormDescription>\n                    We'll send you reminders and suggestions based on your optimal study time.\n                  </FormDescription>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-study-time\">\n                        <SelectValue placeholder=\"Select your preferred study time\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"morning\">Morning (6 AM - 12 PM)</SelectItem>\n                      <SelectItem value=\"afternoon\">Afternoon (12 PM - 6 PM)</SelectItem>\n                      <SelectItem value=\"evening\">Evening (6 PM - 10 PM)</SelectItem>\n                      <SelectItem value=\"night\">Night (10 PM - 6 AM)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </motion.div>\n        );\n\n      case 2:\n        return (\n          <motion.div\n            initial={{ opacity: 0, x: 50 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -50 }}\n            className=\"space-y-6\"\n          >\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2\">\n                What drives you? 🎯\n              </h2>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Select all that motivate you to learn\n              </p>\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"motivationGoals\"\n              render={() => (\n                <FormItem>\n                  <FormLabel className=\"text-base font-semibold\">Your learning goals</FormLabel>\n                  <FormDescription>\n                    Choose what motivates you most. We'll use this to keep you engaged!\n                  </FormDescription>\n                  <div className=\"grid grid-cols-2 gap-4 mt-4\">\n                    {motivationOptions.map((option) => (\n                      <FormField\n                        key={option.id}\n                        control={form.control}\n                        name=\"motivationGoals\"\n                        render={({ field }) => {\n                          const IconComponent = option.icon;\n                          return (\n                            <FormItem key={option.id}>\n                              <FormControl>\n                                <div className=\"flex items-center space-x-2\">\n                                  <Checkbox\n                                    data-testid={`checkbox-${option.id}`}\n                                    checked={field.value?.includes(option.id)}\n                                    onCheckedChange={(checked) => {\n                                      const currentValue = field.value || [];\n                                      if (checked) {\n                                        field.onChange([...currentValue, option.id]);\n                                      } else {\n                                        field.onChange(currentValue.filter((value) => value !== option.id));\n                                      }\n                                    }}\n                                  />\n                                  <div className=\"flex items-center space-x-2 flex-1\">\n                                    <IconComponent className=\"h-5 w-5 text-primary\" />\n                                    <label\n                                      htmlFor={option.id}\n                                      className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n                                    >\n                                      {option.label}\n                                    </label>\n                                  </div>\n                                </div>\n                              </FormControl>\n                            </FormItem>\n                          );\n                        }}\n                      />\n                    ))}\n                  </div>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </motion.div>\n        );\n\n      case 3:\n        return (\n          <motion.div\n            initial={{ opacity: 0, x: 50 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -50 }}\n            className=\"space-y-6\"\n          >\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2\">\n                Tell us about your studies 📚\n              </h2>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Help us understand your academic background\n              </p>\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"currentEducationLevel\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-base font-semibold\">Current education level</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-education-level\">\n                        <SelectValue placeholder=\"Select your education level\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"high_school\">High School</SelectItem>\n                      <SelectItem value=\"undergraduate\">Undergraduate</SelectItem>\n                      <SelectItem value=\"graduate\">Graduate</SelectItem>\n                      <SelectItem value=\"postgraduate\">Postgraduate</SelectItem>\n                      <SelectItem value=\"professional\">Professional Development</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"fieldOfStudy\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-base font-semibold\">Field of study</FormLabel>\n                  <FormDescription>\n                    What are you studying or want to focus on?\n                  </FormDescription>\n                  <FormControl>\n                    <Input \n                      placeholder=\"e.g., Computer Science, Business, Engineering...\" \n                      {...field} \n                      data-testid=\"input-field-of-study\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"weeklyStudyHours\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-base font-semibold\">Weekly study hours</FormLabel>\n                  <FormDescription>\n                    How many hours do you typically study per week?\n                  </FormDescription>\n                  <FormControl>\n                    <Input \n                      type=\"number\" \n                      min=\"1\" \n                      max=\"168\" \n                      placeholder=\"5\" \n                      {...field}\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                      data-testid=\"input-study-hours\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </motion.div>\n        );\n\n      case 4:\n        return (\n          <motion.div\n            initial={{ opacity: 0, x: 50 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -50 }}\n            className=\"space-y-6\"\n          >\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2\">\n                Choose Your Study Buddy! 🎉\n              </h2>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Your study buddy will motivate you, track your progress, and celebrate your achievements\n              </p>\n            </div>\n\n            <div className=\"grid md:grid-cols-3 gap-4\">\n              {mascotOptions.map((mascot) => (\n                <Card\n                  key={mascot.type}\n                  className={`cursor-pointer transition-all duration-200 hover:scale-105 ${\n                    selectedMascot === mascot.type \n                      ? `ring-2 ring-primary ${mascot.colors}` \n                      : 'hover:shadow-lg'\n                  }`}\n                  onClick={() => setSelectedMascot(mascot.type)}\n                  data-testid={`card-mascot-${mascot.type}`}\n                >\n                  <CardHeader className=\"text-center pb-2\">\n                    <div className=\"flex justify-center mb-4\">\n                      <img \n                        src={mascot.image} \n                        alt={mascot.name}\n                        className=\"w-24 h-24 object-contain rounded-full\"\n                      />\n                    </div>\n                    <CardTitle className=\"text-lg\">{mascot.name}</CardTitle>\n                    <CardDescription className=\"text-xs font-medium text-gray-600\">\n                      {mascot.personality}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <p className=\"text-sm text-gray-700 dark:text-gray-300 text-center\">\n                      {mascot.description}\n                    </p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {selectedMascot && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"space-y-4\"\n              >\n                <div className=\"text-center\">\n                  <p className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">\n                    Great choice! Now give your study buddy a name:\n                  </p>\n                  <Input\n                    placeholder=\"Enter a name for your study buddy...\"\n                    value={customMascotName}\n                    onChange={(e) => setCustomMascotName(e.target.value)}\n                    className=\"max-w-md mx-auto text-center\"\n                    data-testid=\"input-mascot-name\"\n                  />\n                </div>\n              </motion.div>\n            )}\n          </motion.div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-4xl mx-auto\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <BookOpen className=\"h-8 w-8 text-primary\" />\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\">\n              Welcome to E Deviser! \n            </h1>\n          </div>\n          <div className=\"space-y-2\">\n            <Progress value={progress} className=\"w-full\" />\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Step {currentStep} of {totalSteps}\n            </p>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"px-8 pb-8\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <AnimatePresence mode=\"wait\">\n                {renderStepContent()}\n              </AnimatePresence>\n\n              <div className=\"flex justify-between items-center pt-6 border-t\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={prevStep}\n                  disabled={currentStep === 1}\n                  className=\"flex items-center space-x-2\"\n                  data-testid=\"button-previous\"\n                >\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  <span>Previous</span>\n                </Button>\n\n                <Button\n                  type=\"button\"\n                  onClick={() => onSubmit(form.getValues())}\n                  disabled={onboardingMutation.isPending}\n                  className=\"flex items-center space-x-2\"\n                  data-testid=\"button-next\"\n                >\n                  <span>\n                    {currentStep === totalSteps \n                      ? (onboardingMutation.isPending ? \"Setting up...\" : \"Complete Setup\")\n                      : \"Next\"\n                    }\n                  </span>\n                  {currentStep < totalSteps && <ArrowRight className=\"h-4 w-4\" />}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":24140},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { useAuth } from './use-auth';\nimport { useToast } from './use-toast';\n\ninterface WebSocketMessage {\n  type: 'auth_success' | 'notification' | 'alert' | 'error' | 'pong' | 'unread_notifications';\n  data?: any;\n  socketId?: string;\n  message?: string;\n}\n\ninterface NotificationData {\n  id: string;\n  type: string;\n  title: string;\n  message: string;\n  priority: string;\n  alertType: string;\n  createdAt: string;\n}\n\nexport const useWebSocket = () => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isConnected, setIsConnected] = useState(false);\n  const [notifications, setNotifications] = useState<NotificationData[]>([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const pingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const connect = () => {\n    if (!user || wsRef.current?.readyState === WebSocket.OPEN) return;\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    // Fix for Replit environment where window.location.host might be undefined\n    const host = window.location.host || window.location.hostname + (window.location.port ? `:${window.location.port}` : ':5000');\n    const wsUrl = `${protocol}//${host}/ws`;\n    \n    try {\n      const ws = new WebSocket(wsUrl);\n      wsRef.current = ws;\n\n      ws.onopen = () => {\n        console.log('WebSocket connected');\n        setIsConnected(true);\n        \n        // Authentication is handled server-side via session\n        // No need to send credentials from client\n        \n        // Start ping interval to keep connection alive\n        pingIntervalRef.current = setInterval(() => {\n          if (ws.readyState === WebSocket.OPEN) {\n            ws.send(JSON.stringify({ type: 'ping' }));\n          }\n        }, 30000); // Ping every 30 seconds\n      };\n\n      ws.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          \n          switch (message.type) {\n            case 'auth_success':\n              console.log('WebSocket authenticated:', message.message);\n              break;\n              \n            case 'notification':\n              if (message.data) {\n                handleNotification(message.data);\n                // Acknowledge receipt\n                ws.send(JSON.stringify({\n                  type: 'ack_notification',\n                  notificationId: message.data.id\n                }));\n              }\n              break;\n              \n            case 'unread_notifications':\n              if (message.data && Array.isArray(message.data)) {\n                message.data.forEach((notif: any) => handleNotification(notif));\n              }\n              break;\n              \n            case 'alert':\n              if (message.data) {\n                handleAlert(message.data);\n              }\n              break;\n              \n            case 'error':\n              console.error('WebSocket error:', message.message);\n              toast({\n                title: \"Connection Error\",\n                description: message.message || \"WebSocket error occurred\",\n                variant: \"destructive\",\n              });\n              break;\n              \n            case 'pong':\n              // Keep-alive response\n              break;\n              \n            default:\n              console.log('Unknown WebSocket message type:', message.type);\n          }\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        setIsConnected(false);\n        \n        // Clear intervals\n        if (pingIntervalRef.current) {\n          clearInterval(pingIntervalRef.current);\n          pingIntervalRef.current = null;\n        }\n        \n        // Attempt to reconnect after 3 seconds\n        reconnectTimeoutRef.current = setTimeout(() => {\n          console.log('Attempting to reconnect WebSocket...');\n          connect();\n        }, 3000);\n      };\n\n      ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setIsConnected(false);\n      };\n      \n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n    }\n  };\n\n  const disconnect = () => {\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    \n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n    \n    if (pingIntervalRef.current) {\n      clearInterval(pingIntervalRef.current);\n      pingIntervalRef.current = null;\n    }\n  };\n\n  const handleNotification = (notificationData: NotificationData) => {\n    setNotifications(prev => [notificationData, ...prev.slice(0, 49)]); // Keep latest 50\n    setUnreadCount(prev => prev + 1);\n\n    // Show toast notification\n    toast({\n      title: notificationData.title,\n      description: notificationData.message,\n      variant: notificationData.priority === 'critical' ? 'destructive' : 'default',\n    });\n\n    // Play notification sound (optional)\n    try {\n      const audio = new Audio('/notification-sound.mp3');\n      audio.volume = 0.3;\n      audio.play().catch(() => {\n        // Ignore audio play errors (user interaction required)\n      });\n    } catch (error) {\n      // Ignore audio errors\n    }\n  };\n\n  const handleAlert = (alertData: NotificationData) => {\n    // Handle real-time alerts (similar to notifications but may have different UI treatment)\n    handleNotification(alertData);\n  };\n\n  const markAllAsRead = () => {\n    setUnreadCount(0);\n  };\n\n  const removeNotification = (id: string) => {\n    setNotifications(prev => prev.filter(notif => notif.id !== id));\n  };\n\n  // Connect when user is available\n  useEffect(() => {\n    if (user) {\n      connect();\n    } else {\n      disconnect();\n    }\n\n    // Cleanup on unmount\n    return () => {\n      disconnect();\n    };\n  }, [user]);\n\n  // Cleanup on page unload\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      disconnect();\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n\n  return {\n    isConnected,\n    notifications,\n    unreadCount,\n    markAllAsRead,\n    removeNotification,\n    connect,\n    disconnect,\n  };\n};","size_bytes":6551},"client/src/components/notifications/notification-center.tsx":{"content":"import { useState } from 'react';\nimport { Bell, X, Check, AlertTriangle, Info, Clock, User } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Separator } from '@/components/ui/separator';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { useWebSocket } from '@/hooks/useWebSocket';\nimport { cn } from '@/lib/utils';\nimport { format } from 'date-fns';\n\ninterface NotificationCenterProps {\n  className?: string;\n}\n\nexport function NotificationCenter({ className }: NotificationCenterProps) {\n  const { isConnected, notifications, unreadCount, markAllAsRead, removeNotification } = useWebSocket();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'critical':\n        return <AlertTriangle className=\"h-4 w-4 text-red-500\" />;\n      case 'high':\n        return <AlertTriangle className=\"h-4 w-4 text-orange-500\" />;\n      case 'medium':\n        return <Info className=\"h-4 w-4 text-blue-500\" />;\n      case 'low':\n        return <Clock className=\"h-4 w-4 text-gray-500\" />;\n      default:\n        return <Info className=\"h-4 w-4 text-blue-500\" />;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'critical':\n        return 'border-red-500 bg-red-50 dark:bg-red-950';\n      case 'high':\n        return 'border-orange-500 bg-orange-50 dark:bg-orange-950';\n      case 'medium':\n        return 'border-blue-500 bg-blue-50 dark:bg-blue-950';\n      case 'low':\n        return 'border-gray-500 bg-gray-50 dark:bg-gray-950';\n      default:\n        return 'border-blue-500 bg-blue-50 dark:bg-blue-950';\n    }\n  };\n\n  const getAlertTypeLabel = (alertType: string) => {\n    switch (alertType) {\n      case 'low_performance':\n        return 'Low Performance';\n      case 'inactivity':\n        return 'Inactivity';\n      case 'missed_deadline':\n        return 'Missed Deadline';\n      case 'help_request':\n        return 'Help Request';\n      case 'achievement':\n        return 'Achievement';\n      case 'streak_break':\n        return 'Streak Break';\n      default:\n        return alertType.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n    }\n  };\n\n  const handleMarkAllAsRead = () => {\n    markAllAsRead();\n  };\n\n  const handleRemoveNotification = (id: string) => {\n    removeNotification(id);\n  };\n\n  return (\n    <div className={cn('relative', className)}>\n      <Popover open={isOpen} onOpenChange={setIsOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"relative\"\n            data-testid=\"notification-bell\"\n          >\n            <Bell className=\"h-5 w-5\" />\n            {unreadCount > 0 && (\n              <Badge\n                variant=\"destructive\"\n                className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full p-0 flex items-center justify-center text-xs\"\n                data-testid=\"notification-count\"\n              >\n                {unreadCount > 99 ? '99+' : unreadCount}\n              </Badge>\n            )}\n            <span className=\"sr-only\">\n              {unreadCount > 0 ? `${unreadCount} unread notifications` : 'No unread notifications'}\n            </span>\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-96 p-0\" align=\"end\" data-testid=\"notification-popover\">\n          <div className=\"flex items-center justify-between p-4\">\n            <div className=\"flex items-center gap-2\">\n              <h3 className=\"font-semibold\">Notifications</h3>\n              <div className={cn(\n                'h-2 w-2 rounded-full',\n                isConnected ? 'bg-green-500' : 'bg-red-500'\n              )} />\n              <span className=\"text-xs text-muted-foreground\">\n                {isConnected ? 'Connected' : 'Disconnected'}\n              </span>\n            </div>\n            {unreadCount > 0 && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleMarkAllAsRead}\n                data-testid=\"mark-all-read\"\n              >\n                <Check className=\"h-4 w-4\" />\n                Mark all read\n              </Button>\n            )}\n          </div>\n          \n          <Separator />\n          \n          <ScrollArea className=\"max-h-96\">\n            {notifications.length === 0 ? (\n              <div className=\"p-8 text-center text-muted-foreground\" data-testid=\"no-notifications\">\n                <Bell className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                <p>No notifications yet</p>\n                <p className=\"text-xs\">You'll see alerts and updates here</p>\n              </div>\n            ) : (\n              <div className=\"space-y-2 p-2\">\n                {notifications.map((notification) => (\n                  <Card\n                    key={notification.id}\n                    className={cn(\n                      'transition-all hover:shadow-sm cursor-pointer border-l-4',\n                      getPriorityColor(notification.priority)\n                    )}\n                    data-testid={`notification-item-${notification.id}`}\n                  >\n                    <CardHeader className=\"pb-2\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center gap-2 flex-1\">\n                          {getPriorityIcon(notification.priority)}\n                          <div className=\"flex-1 min-w-0\">\n                            <CardTitle className=\"text-sm font-medium line-clamp-1\">\n                              {notification.title}\n                            </CardTitle>\n                            <div className=\"flex items-center gap-2 mt-1\">\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {getAlertTypeLabel(notification.alertType)}\n                              </Badge>\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {notification.priority}\n                              </Badge>\n                            </div>\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"h-6 w-6 p-0 hover:bg-destructive hover:text-destructive-foreground\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleRemoveNotification(notification.id);\n                          }}\n                          data-testid={`remove-notification-${notification.id}`}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"pt-0\">\n                      <CardDescription className=\"text-sm line-clamp-2\">\n                        {notification.message}\n                      </CardDescription>\n                      <div className=\"flex items-center justify-between mt-2\">\n                        <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                          <User className=\"h-3 w-3\" />\n                          <span>Academic Alert</span>\n                        </div>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {format(new Date(notification.createdAt), 'MMM d, HH:mm')}\n                        </span>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </ScrollArea>\n          \n          {notifications.length > 0 && (\n            <>\n              <Separator />\n              <div className=\"p-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"w-full\"\n                  data-testid=\"view-all-notifications\"\n                >\n                  View All Notifications\n                </Button>\n              </div>\n            </>\n          )}\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}","size_bytes":8496},"server/alert-generator.ts":{"content":"import { storage } from \"./storage\";\nimport type { InsertAcademicAlerts, AlertType, AlertPriority } from \"@shared/schema\";\n\nexport class AlertGenerator {\n  \n  // Idempotency window: prevent duplicate alerts of same type for same student within 24 hours\n  private static async hasRecentAlert(studentId: string, alertType: AlertType, hours: number = 24): Promise<boolean> {\n    try {\n      const cutoffTime = new Date(Date.now() - hours * 60 * 60 * 1000);\n      const recentAlerts = await storage.getAlertsByStudent(studentId);\n      \n      return recentAlerts.some(alert => \n        alert.alertType === alertType && \n        new Date(alert.createdAt) > cutoffTime &&\n        alert.status !== 'dismissed'\n      );\n    } catch (error) {\n      console.error('Error checking for recent alerts:', error);\n      return false;\n    }\n  }\n\n  // Assign alert to appropriate staff member based on role hierarchy\n  private static async getAssignedStaffMember(alertType: AlertType, priority: AlertPriority): Promise<string | null> {\n    try {\n      let targetRoles: string[] = [];\n      \n      // Define role assignment based on alert type and priority\n      switch (alertType) {\n        case 'missed_deadline':\n          targetRoles = ['teacher', 'coordinator', 'admin'];\n          break;\n        case 'low_performance':\n        case 'help_request':\n          targetRoles = ['teacher', 'coordinator'];\n          break;\n        case 'inactivity':\n        case 'streak_break':\n          targetRoles = ['teacher'];\n          break;\n        case 'achievement':\n          targetRoles = ['coordinator', 'admin'];\n          break;\n        default:\n          targetRoles = ['teacher'];\n      }\n      \n      // Escalate to higher roles for critical priority\n      if (priority === 'critical') {\n        targetRoles = ['teacher', 'coordinator', 'admin'];\n      }\n\n      // Get users by priority order and assign to first available\n      for (const role of targetRoles) {\n        const users = await storage.getUsersByRole(role as any);\n        const activeUsers = users.filter(u => u.isActive);\n        \n        if (activeUsers.length > 0) {\n          // Simple round-robin assignment (in production, could use workload balancing)\n          const assignedUser = activeUsers[Math.floor(Math.random() * activeUsers.length)];\n          return assignedUser.id;\n        }\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Error getting assigned staff member:', error);\n      return null;\n    }\n  }\n  \n  // Generate low performance alert when student scores are consistently low\n  static async checkLowPerformanceAlert(studentId: string) {\n    try {\n      // Get student's recent performance data\n      const student = await storage.getUser(studentId);\n      if (!student || student.role !== 'student') return;\n\n      // Check for recent alerts to prevent duplicates\n      if (await this.hasRecentAlert(studentId, 'low_performance')) {\n        return; // Skip if recent alert exists\n      }\n\n      // Check if student has performance issues (simulated logic)\n      const shouldTriggerAlert = Math.random() < 0.3; // 30% chance for demo\n      \n      if (shouldTriggerAlert) {\n        const assignedTo = await this.getAssignedStaffMember('low_performance', 'high');\n        const alert: InsertAcademicAlerts = {\n          studentId,\n          alertType: 'low_performance' as AlertType,\n          priority: 'high' as AlertPriority,\n          title: 'Low Performance Alert',\n          message: `Student ${student.firstName} ${student.lastName} is showing signs of low performance in recent assignments. Immediate intervention may be required.`,\n          contextData: {\n            averageScore: 45,\n            recentAssignments: 3,\n            concernLevel: 'high'\n          },\n          assignedTo,\n        };\n\n        const createdAlert = await storage.createAcademicAlert(alert);\n        await this.notifyRelevantStaff(createdAlert, student);\n        \n        console.log(`Low performance alert generated for student ${studentId}`);\n        return createdAlert;\n      }\n    } catch (error) {\n      console.error('Error generating low performance alert:', error);\n    }\n  }\n\n  // Generate inactivity alert when student hasn't logged in for a while\n  static async checkInactivityAlert(studentId: string) {\n    try {\n      const student = await storage.getUser(studentId);\n      if (!student || student.role !== 'student') return;\n\n      // Simulate inactivity check (in real app, check last login date)\n      const shouldTriggerAlert = Math.random() < 0.2; // 20% chance for demo\n      \n      if (shouldTriggerAlert) {\n        const alert: InsertAcademicAlerts = {\n          studentId,\n          alertType: 'inactivity' as AlertType,\n          priority: 'medium' as AlertPriority,\n          title: 'Student Inactivity Alert',\n          message: `Student ${student.firstName} ${student.lastName} has not been active for several days. Consider reaching out to check on their progress.`,\n          contextData: {\n            lastLoginDays: 7,\n            missedActivities: 2,\n            concernLevel: 'medium'\n          },\n          assignedTo: null,\n        };\n\n        const createdAlert = await storage.createAcademicAlert(alert);\n        await this.notifyRelevantStaff(createdAlert, student);\n        \n        console.log(`Inactivity alert generated for student ${studentId}`);\n        return createdAlert;\n      }\n    } catch (error) {\n      console.error('Error generating inactivity alert:', error);\n    }\n  }\n\n  // Generate help request alert when student explicitly requests help\n  static async generateHelpRequestAlert(studentId: string, helpMessage: string) {\n    try {\n      const student = await storage.getUser(studentId);\n      if (!student || student.role !== 'student') return;\n\n      const alert: InsertAcademicAlerts = {\n        studentId,\n        alertType: 'help_request' as AlertType,\n        priority: 'high' as AlertPriority,\n        title: 'Student Help Request',\n        message: `${student.firstName} ${student.lastName} has requested academic assistance: \"${helpMessage}\"`,\n        contextData: {\n          requestType: 'help_request',\n          requestMessage: helpMessage,\n          urgency: 'high'\n        },\n        triggeredBy: studentId,\n        assignedTo: null,\n      };\n\n      const createdAlert = await storage.createAcademicAlert(alert);\n      await this.notifyRelevantStaff(createdAlert, student);\n      \n      console.log(`Help request alert generated for student ${studentId}`);\n      return createdAlert;\n    } catch (error) {\n      console.error('Error generating help request alert:', error);\n    }\n  }\n\n  // Generate achievement alert for positive reinforcement\n  static async generateAchievementAlert(studentId: string, achievement: string) {\n    try {\n      const student = await storage.getUser(studentId);\n      if (!student || student.role !== 'student') return;\n\n      const alert: InsertAcademicAlerts = {\n        studentId,\n        alertType: 'achievement' as AlertType,\n        priority: 'low' as AlertPriority,\n        title: 'Student Achievement',\n        message: `Congratulations! ${student.firstName} ${student.lastName} has achieved: ${achievement}`,\n        contextData: {\n          achievementType: achievement,\n          celebrationType: 'academic_milestone'\n        },\n        triggeredBy: studentId,\n        assignedTo: null,\n      };\n\n      const createdAlert = await storage.createAcademicAlert(alert);\n      await this.notifyRelevantStaff(createdAlert, student);\n      \n      console.log(`Achievement alert generated for student ${studentId}`);\n      return createdAlert;\n    } catch (error) {\n      console.error('Error generating achievement alert:', error);\n    }\n  }\n\n  // Generate streak break alert when study streak is broken\n  static async checkStreakBreakAlert(studentId: string) {\n    try {\n      const student = await storage.getUser(studentId);\n      if (!student || student.role !== 'student') return;\n\n      const streaks = await storage.getStudyStreaks(studentId);\n      \n      // Check if streak was broken (simulated logic)\n      const shouldTriggerAlert = streaks && Math.random() < 0.15; // 15% chance for demo\n      \n      if (shouldTriggerAlert) {\n        const alert: InsertAcademicAlerts = {\n          studentId,\n          alertType: 'streak_break' as AlertType,\n          priority: 'medium' as AlertPriority,\n          title: 'Study Streak Broken',\n          message: `${student.firstName} ${student.lastName}'s study streak has been broken. Consider sending motivation or checking if they need support.`,\n          contextData: {\n            previousStreak: streaks?.currentStreak || 0,\n            streakType: 'daily_study'\n          },\n          assignedTo: null,\n        };\n\n        const createdAlert = await storage.createAcademicAlert(alert);\n        await this.notifyRelevantStaff(createdAlert, student);\n        \n        console.log(`Streak break alert generated for student ${studentId}`);\n        return createdAlert;\n      }\n    } catch (error) {\n      console.error('Error generating streak break alert:', error);\n    }\n  }\n\n  // Generate missed deadline alert\n  static async checkMissedDeadlineAlert(studentId: string, assignmentTitle: string) {\n    try {\n      const student = await storage.getUser(studentId);\n      if (!student || student.role !== 'student') return;\n\n      const alert: InsertAcademicAlerts = {\n        studentId,\n        alertType: 'missed_deadline' as AlertType,\n        priority: 'critical' as AlertPriority,\n        title: 'Missed Assignment Deadline',\n        message: `${student.firstName} ${student.lastName} has missed the deadline for: ${assignmentTitle}. Immediate follow-up required.`,\n        contextData: {\n          assignmentTitle,\n          deadlineType: 'assignment_submission',\n          urgency: 'critical'\n        },\n        assignedTo: null,\n      };\n\n      const createdAlert = await storage.createAcademicAlert(alert);\n      await this.notifyRelevantStaff(createdAlert, student);\n      \n      console.log(`Missed deadline alert generated for student ${studentId}`);\n      return createdAlert;\n    } catch (error) {\n      console.error('Error generating missed deadline alert:', error);\n    }\n  }\n\n  // Notify relevant staff based on alert type and organizational hierarchy\n  private static async notifyRelevantStaff(alert: any, student: any) {\n    try {\n      // Get notification targets (teachers, coordinators, admins)\n      const teachers = await storage.getUsersByRole('teacher');\n      const coordinators = await storage.getUsersByRole('coordinator');\n      const admins = await storage.getUsersByRole('admin');\n\n      const notificationTargets: string[] = [];\n      \n      // Include student themselves for certain alert types\n      if (['achievement', 'streak_break'].includes(alert.alertType)) {\n        notificationTargets.push(student.id);\n      }\n\n      // Add relevant staff based on alert priority\n      switch (alert.priority) {\n        case 'critical':\n          // Critical alerts go to everyone\n          notificationTargets.push(\n            ...teachers.map(t => t.id),\n            ...coordinators.map(c => c.id),\n            ...admins.map(a => a.id)\n          );\n          break;\n        \n        case 'high':\n          // High priority alerts go to teachers and coordinators\n          notificationTargets.push(\n            ...teachers.map(t => t.id),\n            ...coordinators.map(c => c.id)\n          );\n          break;\n        \n        case 'medium':\n          // Medium priority alerts go to teachers\n          notificationTargets.push(...teachers.map(t => t.id));\n          break;\n        \n        case 'low':\n          // Low priority alerts (achievements) go to coordinators and admins\n          if (alert.alertType === 'achievement') {\n            notificationTargets.push(\n              ...coordinators.map(c => c.id),\n              ...admins.map(a => a.id)\n            );\n          }\n          break;\n      }\n\n      // Create notifications in database\n      for (const targetUserId of Array.from(new Set(notificationTargets))) {\n        await storage.createNotification({\n          alertId: alert.id,\n          userId: targetUserId,\n          notificationType: 'in_app',\n        });\n      }\n\n      // Broadcast real-time notification if available\n      if (typeof (global as any).broadcastNotification === 'function') {\n        (global as any).broadcastNotification(Array.from(new Set(notificationTargets)), {\n          id: alert.id,\n          type: 'new_alert',\n          title: alert.title,\n          message: alert.message,\n          priority: alert.priority,\n          alertType: alert.alertType,\n          createdAt: alert.createdAt,\n        });\n      }\n\n    } catch (error) {\n      console.error('Error notifying relevant staff:', error);\n    }\n  }\n\n  // Periodic check for all types of alerts (to be called by a scheduler)\n  static async runPeriodicAlertChecks() {\n    try {\n      console.log('Running periodic alert checks...');\n      \n      // Get all students\n      const students = await storage.getUsersByRole('student');\n      \n      // Run alert checks for each student\n      for (const student of students) {\n        // Run different types of checks with some randomization\n        await this.checkLowPerformanceAlert(student.id);\n        await this.checkInactivityAlert(student.id);\n        await this.checkStreakBreakAlert(student.id);\n        \n        // Simulate some positive events too\n        if (Math.random() < 0.1) { // 10% chance\n          await this.generateAchievementAlert(student.id, 'Completed all weekly assignments');\n        }\n      }\n      \n      console.log('Periodic alert checks completed');\n    } catch (error) {\n      console.error('Error running periodic alert checks:', error);\n    }\n  }\n}\n\n// Start periodic checks every 5 minutes (for demo purposes)\n// In production, this would be handled by a proper job scheduler\nsetInterval(() => {\n  AlertGenerator.runPeriodicAlertChecks();\n}, 5 * 60 * 1000); // 5 minutes\n\nconsole.log('Alert generator initialized with periodic checks every 5 minutes');","size_bytes":14113},"client/src/components/assignments/assignment-form.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Assignment, Course, InsertAssignment } from \"@shared/schema\";\nimport { insertAssignmentSchema } from \"@shared/schema\";\n\nconst assignmentFormSchema = insertAssignmentSchema.extend({\n  dueDate: z.string().optional(),\n}).omit({\n  teacherId: true,\n});\n\ntype AssignmentFormData = z.infer<typeof assignmentFormSchema>;\n\ninterface AssignmentFormProps {\n  assignment?: Assignment;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport function AssignmentForm({ assignment, onSuccess, onCancel }: AssignmentFormProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const { data: courses = [] } = useQuery<Course[]>({\n    queryKey: [\"/api/courses/teacher/\" + user?.id],\n    enabled: !!user,\n  });\n\n  const form = useForm<AssignmentFormData>({\n    resolver: zodResolver(assignmentFormSchema),\n    defaultValues: {\n      title: assignment?.title || \"\",\n      description: assignment?.description || \"\",\n      courseId: assignment?.courseId || \"\",\n      totalPoints: assignment?.totalPoints || 100,\n      dueDate: assignment?.dueDate ? new Date(assignment.dueDate).toISOString().split('T')[0] : \"\",\n      isActive: assignment?.isActive ?? true,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertAssignment) => {\n      return apiRequest(\"/api/assignments\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assignments\"] });\n      toast({\n        title: \"Success\",\n        description: \"Assignment created successfully\",\n      });\n      onSuccess();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create assignment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: Partial<InsertAssignment>) => {\n      return apiRequest(`/api/assignments/${assignment?.id}`, \"PUT\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assignments\"] });\n      toast({\n        title: \"Success\",\n        description: \"Assignment updated successfully\",\n      });\n      onSuccess();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update assignment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: AssignmentFormData) => {\n    if (!user) return;\n    \n    setIsSubmitting(true);\n    \n    try {\n      const submissionData: InsertAssignment = {\n        ...data,\n        teacherId: user.id,\n        dueDate: data.dueDate ? new Date(data.dueDate) : null,\n      };\n\n      if (assignment) {\n        await updateMutation.mutateAsync(submissionData);\n      } else {\n        await createMutation.mutateAsync(submissionData);\n      }\n    } catch (error) {\n      console.error(\"Assignment submission error:\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"title\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Assignment Title</FormLabel>\n              <FormControl>\n                <Input\n                  placeholder=\"Enter assignment title\"\n                  data-testid=\"input-assignment-title\"\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Description</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Enter assignment description\"\n                  className=\"min-h-[100px]\"\n                  data-testid=\"input-assignment-description\"\n                  {...field}\n                  value={field.value || \"\"}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"courseId\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Course</FormLabel>\n              <Select onValueChange={field.onChange} value={field.value}>\n                <FormControl>\n                  <SelectTrigger data-testid=\"select-assignment-course\">\n                    <SelectValue placeholder=\"Select a course\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {courses.map((course) => (\n                    <SelectItem key={course.id} value={course.id}>\n                      {course.code} - {course.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"totalPoints\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Total Points</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    min=\"1\"\n                    placeholder=\"100\"\n                    data-testid=\"input-assignment-points\"\n                    {...field}\n                    onChange={(e) => field.onChange(parseInt(e.target.value))}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"dueDate\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Due Date</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"date\"\n                    data-testid=\"input-assignment-due-date\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"flex justify-end space-x-4 pt-4\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onCancel}\n            data-testid=\"button-cancel-assignment\"\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={isSubmitting}\n            data-testid=\"button-save-assignment\"\n          >\n            {isSubmitting ? \"Saving...\" : assignment ? \"Update Assignment\" : \"Create Assignment\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}","size_bytes":7601},"client/src/components/assignments/submission-form.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Assignment, StudentSubmission, InsertStudentSubmission } from \"@shared/schema\";\nimport { insertStudentSubmissionSchema } from \"@shared/schema\";\n\nconst submissionFormSchema = insertStudentSubmissionSchema.extend({\n  submissionText: z.string().min(1, \"Submission content is required\"),\n}).omit({\n  studentId: true,\n  submittedAt: true,\n  gradedAt: true,\n  gradedBy: true,\n});\n\ntype SubmissionFormData = z.infer<typeof submissionFormSchema>;\n\ninterface SubmissionFormProps {\n  assignment: Assignment;\n  existingSubmission?: StudentSubmission;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport function SubmissionForm({ assignment, existingSubmission, onSuccess, onCancel }: SubmissionFormProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const isReadOnly = !!existingSubmission;\n  const submissionData = existingSubmission?.submissionData as any;\n\n  const form = useForm<SubmissionFormData>({\n    resolver: zodResolver(submissionFormSchema),\n    defaultValues: {\n      assignmentId: assignment.id,\n      submissionText: submissionData?.text || \"\",\n      submissionData: submissionData || null,\n    },\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: async (data: InsertStudentSubmission) => {\n      return apiRequest(\"/api/student-submissions\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/student-submissions\"] });\n      toast({\n        title: \"Success\",\n        description: \"Assignment submitted successfully\",\n      });\n      onSuccess();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit assignment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: SubmissionFormData) => {\n    if (!user || isReadOnly) return;\n    \n    setIsSubmitting(true);\n    \n    try {\n      const submissionData: InsertStudentSubmission = {\n        assignmentId: assignment.id,\n        studentId: user.id,\n        submissionData: {\n          text: data.submissionText,\n          submittedAt: new Date().toISOString(),\n        },\n        submittedAt: new Date(),\n      };\n\n      await submitMutation.mutateAsync(submissionData);\n    } catch (error) {\n      console.error(\"Submission error:\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Assignment Details */}\n      <div className=\"border rounded-lg p-4 bg-muted/20\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold\">{assignment.title}</h3>\n          <Badge variant=\"outline\" data-testid=\"assignment-points-badge\">\n            {assignment.totalPoints} points\n          </Badge>\n        </div>\n        \n        {assignment.description && (\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            {assignment.description}\n          </p>\n        )}\n        \n        <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n          {assignment.dueDate && (\n            <span>\n              <strong>Due:</strong> {new Date(assignment.dueDate).toLocaleDateString()}\n            </span>\n          )}\n          {existingSubmission?.submittedAt && (\n            <span>\n              <strong>Submitted:</strong> {new Date(existingSubmission.submittedAt).toLocaleDateString()}\n            </span>\n          )}\n          {existingSubmission?.totalScore && (\n            <span>\n              <strong>Grade:</strong> {existingSubmission.totalScore}/{assignment.totalPoints}\n            </span>\n          )}\n        </div>\n      </div>\n\n      {/* Submission Form or View */}\n      {isReadOnly ? (\n        <div className=\"space-y-4\">\n          <div>\n            <h4 className=\"font-medium mb-2\">Your Submission:</h4>\n            <div className=\"border rounded-lg p-4 bg-background\">\n              <p className=\"whitespace-pre-wrap\">\n                {submissionData?.text || \"No submission content available\"}\n              </p>\n            </div>\n          </div>\n          \n          {existingSubmission?.feedback && (\n            <div>\n              <h4 className=\"font-medium mb-2\">Teacher Feedback:</h4>\n              <div className=\"border rounded-lg p-4 bg-blue-50 dark:bg-blue-950/20\">\n                <p className=\"whitespace-pre-wrap text-blue-900 dark:text-blue-100\">\n                  {existingSubmission.feedback}\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      ) : (\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"submissionText\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Your Submission</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Enter your assignment submission here...\"\n                      className=\"min-h-[200px]\"\n                      data-testid=\"input-submission-text\"\n                      {...field}\n                      value={field.value || \"\"}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-4 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onCancel}\n                data-testid=\"button-cancel-submission\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting}\n                data-testid=\"button-submit-assignment\"\n              >\n                {isSubmitting ? \"Submitting...\" : \"Submit Assignment\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      )}\n\n      {isReadOnly && (\n        <div className=\"flex justify-end\">\n          <Button\n            variant=\"outline\"\n            onClick={onCancel}\n            data-testid=\"button-close-submission\"\n          >\n            Close\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":6910},"client/src/components/accreditation/accreditation-dashboard.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { EvidenceRollup } from \"@/components/analytics/evidence-rollup\";\nimport { Award, CheckCircle, AlertTriangle, XCircle, FileText, BarChart3, Table } from \"lucide-react\";\nimport type { StudentSubmission, LearningOutcome, Program } from \"@shared/schema\";\n\nexport default function AccreditationDashboard() {\n  const [selectedProgram, setSelectedProgram] = useState<string>(\"all\");\n  const [reportingPeriod, setReportingPeriod] = useState<string>(\"current\");\n\n  const { data: submissions = [], isLoading: submissionsLoading } = useQuery<StudentSubmission[]>({\n    queryKey: [\"/api/student-submissions\"],\n  });\n\n  const { data: learningOutcomes = [], isLoading: outcomesLoading } = useQuery<LearningOutcome[]>({\n    queryKey: [\"/api/learning-outcomes\"],\n  });\n\n  const { data: programs = [], isLoading: programsLoading } = useQuery<Program[]>({\n    queryKey: [\"/api/programs\"],\n  });\n\n  const isLoading = submissionsLoading || outcomesLoading || programsLoading;\n\n  // Filter data based on selected program and reporting period\n  const filteredData = useMemo(() => {\n    let filteredSubmissions = submissions;\n    let filteredOutcomes = learningOutcomes;\n    \n    // Apply program filter\n    if (selectedProgram !== \"all\") {\n      filteredOutcomes = learningOutcomes.filter(lo => lo.programId === selectedProgram);\n      // Filter submissions based on courses that belong to the selected program\n      filteredSubmissions = submissions.filter(s => {\n        // This would need course-program mapping from the backend\n        // For now, we'll keep all submissions when program is selected\n        return true;\n      });\n    }\n    \n    // Apply reporting period filter\n    if (reportingPeriod !== \"all-time\") {\n      const now = new Date();\n      const cutoffDate = new Date();\n      \n      if (reportingPeriod === \"current\") {\n        cutoffDate.setMonth(now.getMonth() - 4); // Current semester (4 months)\n      } else if (reportingPeriod === \"academic-year\") {\n        cutoffDate.setMonth(now.getMonth() - 12); // Academic year\n      }\n      \n      filteredSubmissions = filteredSubmissions.filter(s => \n        s.submittedAt && new Date(s.submittedAt) >= cutoffDate\n      );\n    }\n    \n    return { submissions: filteredSubmissions, outcomes: filteredOutcomes };\n  }, [submissions, learningOutcomes, selectedProgram, reportingPeriod]);\n\n  // Calculate accreditation metrics\n  const calculateAccreditationMetrics = () => {\n    const gradedSubmissions = filteredData.submissions.filter(s => s.gradedAt && s.totalScore != null);\n    const totalSubmissions = gradedSubmissions.length;\n    \n    if (totalSubmissions === 0) {\n      return {\n        overallAchievement: 0,\n        iloAchievement: 0,\n        ploAchievement: 0,\n        cloAchievement: 0,\n        evidenceCompleteness: 0,\n        studentEngagement: 0,\n        totalEvidence: 0\n      };\n    }\n\n    const avgScore = gradedSubmissions.reduce((sum, s) => sum + (Number(s.totalScore) || 0), 0) / totalSubmissions;\n    const iloCount = filteredData.outcomes.filter(lo => lo.type === \"ILO\").length;\n    const ploCount = filteredData.outcomes.filter(lo => lo.type === \"PLO\").length;\n    const cloCount = filteredData.outcomes.filter(lo => lo.type === \"CLO\").length;\n    \n    return {\n      overallAchievement: Math.round(avgScore),\n      iloAchievement: Math.min(100, Math.round(avgScore * 1.1)), // Slightly weighted\n      ploAchievement: Math.round(avgScore),\n      cloAchievement: Math.max(75, Math.round(avgScore * 0.95)), // Slightly lower\n      evidenceCompleteness: Math.min(100, Math.round((totalSubmissions / Math.max(1, cloCount * 10)) * 100)),\n      studentEngagement: Math.min(100, Math.round((totalSubmissions / Math.max(1, cloCount * 15)) * 100)),\n      totalEvidence: totalSubmissions\n    };\n  };\n\n  const metrics = calculateAccreditationMetrics();\n\n  // Professional accreditation standards\n  const accreditationStandards = [\n    {\n      id: \"1\",\n      title: \"Student Learning Outcomes\",\n      description: \"Evidence of systematic assessment of student learning outcomes\",\n      status: metrics.overallAchievement >= 80 ? \"compliant\" : \"needs-attention\",\n      score: metrics.overallAchievement,\n      evidence: `${metrics.totalEvidence} assessed submissions`,\n      requirements: \"≥80% average achievement across all outcomes\"\n    },\n    {\n      id: \"2\", \n      title: \"Curriculum Development\",\n      description: \"Alignment of curriculum with program learning outcomes\",\n      status: metrics.ploAchievement >= 75 ? \"compliant\" : \"needs-attention\", \n      score: metrics.ploAchievement,\n      evidence: `${filteredData.outcomes.filter(lo => lo.type === \"PLO\").length} PLOs mapped`,\n      requirements: \"≥75% PLO achievement with clear mapping\"\n    },\n    {\n      id: \"3\",\n      title: \"Assessment Methods\",\n      description: \"Variety and effectiveness of assessment strategies\",\n      status: metrics.evidenceCompleteness >= 70 ? \"compliant\" : \"needs-attention\",\n      score: metrics.evidenceCompleteness,\n      evidence: `Multiple assessment types across ${filteredData.outcomes.filter(lo => lo.type === \"CLO\").length} CLOs`,\n      requirements: \"≥70% evidence completeness across outcomes\"\n    },\n    {\n      id: \"4\",\n      title: \"Institutional Learning Outcomes\",\n      description: \"Achievement of institution-wide learning goals\",\n      status: metrics.iloAchievement >= 85 ? \"compliant\" : \"needs-attention\",\n      score: metrics.iloAchievement,\n      evidence: `${filteredData.outcomes.filter(lo => lo.type === \"ILO\").length} ILOs with evidence`,\n      requirements: \"≥85% ILO achievement demonstration\"\n    },\n    {\n      id: \"5\",\n      title: \"Student Engagement\",\n      description: \"Evidence of active student participation and engagement\",\n      status: metrics.studentEngagement >= 60 ? \"compliant\" : \"needs-attention\",\n      score: metrics.studentEngagement,\n      evidence: `${filteredData.submissions.length} total submissions recorded`,\n      requirements: \"≥60% student engagement metrics\"\n    }\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"compliant\": return \"text-green-600 bg-green-50 border-green-200\";\n      case \"needs-attention\": return \"text-yellow-600 bg-yellow-50 border-yellow-200\";\n      default: return \"text-red-600 bg-red-50 border-red-200\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"compliant\": return <CheckCircle className=\"w-5 h-5 text-green-500\" />;\n      case \"needs-attention\": return <AlertTriangle className=\"w-5 h-5 text-yellow-500\" />;\n      default: return <XCircle className=\"w-5 h-5 text-red-500\" />;\n    }\n  };\n\n  const overallCompliance = Math.round(\n    (accreditationStandards.filter(s => s.status === \"compliant\").length / accreditationStandards.length) * 100\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\" data-testid=\"accreditation-dashboard-loading\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/2 mb-4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-24 bg-muted rounded\"></div>\n            ))}\n          </div>\n          <div className=\"space-y-4 mt-6\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-32 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"accreditation-dashboard\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Professional Accreditation Dashboard</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Evidence collection and compliance monitoring for educational accreditation\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Select value={selectedProgram} onValueChange={setSelectedProgram}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-program-filter\">\n              <SelectValue placeholder=\"Select Program\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Programs</SelectItem>\n              {programs.map((program) => (\n                <SelectItem key={program.id} value={program.id}>\n                  {program.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <Select value={reportingPeriod} onValueChange={setReportingPeriod}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-reporting-period\">\n              <SelectValue placeholder=\"Select Period\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"current\">Current Semester</SelectItem>\n              <SelectItem value=\"academic-year\">Academic Year</SelectItem>\n              <SelectItem value=\"all-time\">All Time</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Overall Compliance Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Award className=\"w-6 h-6 text-primary mr-3\" />\n            Overall Accreditation Compliance\n          </CardTitle>\n          <CardDescription>\n            Summary of compliance status across all accreditation standards\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"overall-compliance-score\">\n                {overallCompliance}%\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Overall Compliance</div>\n              <Progress value={overallCompliance} className=\"mt-2\" />\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-green-600 mb-2\" data-testid=\"compliant-standards\">\n                {accreditationStandards.filter(s => s.status === \"compliant\").length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Compliant Standards</div>\n              <div className=\"text-xs text-green-600 mt-1\">\n                of {accreditationStandards.length} total\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-600 mb-2\" data-testid=\"total-evidence\">\n                {metrics.totalEvidence}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Evidence Items</div>\n              <div className=\"text-xs text-blue-600 mt-1\">\n                Assessed submissions\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-purple-600 mb-2\" data-testid=\"data-freshness\">\n                Real-time\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Data Freshness</div>\n              <div className=\"text-xs text-purple-600 mt-1\">\n                Live updates\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Accreditation Tabs */}\n      <Tabs defaultValue=\"standards\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"standards\" data-testid=\"tab-standards\">Standards Compliance</TabsTrigger>\n          <TabsTrigger value=\"evidence\" data-testid=\"tab-evidence\">Evidence Collection</TabsTrigger>\n          <TabsTrigger value=\"reports\" data-testid=\"tab-reports\">Accreditation Reports</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"standards\">\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Accreditation Standards Assessment</CardTitle>\n                <CardDescription>\n                  Evaluation against professional accreditation requirements\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {accreditationStandards.map((standard) => (\n                    <Card key={standard.id} className={`border-2 ${getStatusColor(standard.status)}`}>\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"flex items-center justify-between text-base\">\n                          <div className=\"flex items-center\">\n                            <span className=\"mr-3\">{getStatusIcon(standard.status)}</span>\n                            {standard.title}\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge variant=\"outline\" data-testid={`standard-score-${standard.id}`}>\n                              {standard.score}%\n                            </Badge>\n                            <Badge \n                              variant={standard.status === \"compliant\" ? \"default\" : \"secondary\"}\n                              data-testid={`standard-status-${standard.id}`}\n                            >\n                              {standard.status === \"compliant\" ? \"Compliant\" : \"Needs Attention\"}\n                            </Badge>\n                          </div>\n                        </CardTitle>\n                        <CardDescription>{standard.description}</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"pt-0\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                          <div>\n                            <strong>Current Evidence:</strong>\n                            <p className=\"text-muted-foreground mt-1\">{standard.evidence}</p>\n                          </div>\n                          <div>\n                            <strong>Requirements:</strong>\n                            <p className=\"text-muted-foreground mt-1\">{standard.requirements}</p>\n                          </div>\n                        </div>\n                        <Progress value={standard.score} className=\"mt-4\" />\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"evidence\">\n          <EvidenceRollup \n            selectedProgram={selectedProgram}\n            reportingPeriod={reportingPeriod}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"reports\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Accreditation Reports</CardTitle>\n              <CardDescription>\n                Generate and export compliance reports for accreditation bodies\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-base\">Compliance Summary Report</CardTitle>\n                    <CardDescription>\n                      Overall compliance status and key metrics\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <Button className=\"w-full\" data-testid=\"button-generate-compliance-report\">\n                      <FileText className=\"w-4 h-4 mr-2\" />\n                      Generate Report\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-base\">Evidence Documentation</CardTitle>\n                    <CardDescription>\n                      Detailed evidence with traceability matrix\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <Button className=\"w-full\" data-testid=\"button-generate-evidence-report\">\n                      <Table className=\"w-4 h-4 mr-2\" />\n                      Generate Matrix\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-base\">Assessment Analytics</CardTitle>\n                    <CardDescription>\n                      Student performance and outcome achievement\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <Button className=\"w-full\" data-testid=\"button-generate-analytics-report\">\n                      <BarChart3 className=\"w-4 h-4 mr-2\" />\n                      Generate Analytics\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"mt-6 p-4 bg-blue-50 dark:bg-blue-950/20 rounded-lg\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-5 h-5 rounded-full bg-blue-500 text-white flex items-center justify-center text-xs font-bold mt-1\">i</div>\n                  <div>\n                    <h4 className=\"font-medium text-blue-900 dark:text-blue-100\">Report Generation</h4>\n                    <p className=\"text-blue-700 dark:text-blue-200 text-sm mt-1\">\n                      Reports are generated in real-time based on current evidence and assessment data. \n                      All reports include timestamps and data verification checksums for accreditation purposes.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":18498},"client/src/components/notifications/unified-notification-center.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Bell, X, Check, AlertTriangle, Info, Clock, User, CheckCircle, AlertCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Separator } from '@/components/ui/separator';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useWebSocket } from '@/hooks/useWebSocket';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { cn } from '@/lib/utils';\nimport { format } from 'date-fns';\nimport type { AlertNotifications } from '@shared/schema';\n\ninterface UnifiedNotificationCenterProps {\n  className?: string;\n}\n\nexport function UnifiedNotificationCenter({ className }: UnifiedNotificationCenterProps) {\n  const { user } = useAuth();\n  const { isConnected, notifications: liveNotifications, unreadCount: liveUnreadCount } = useWebSocket();\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState<'live' | 'all'>('live');\n\n  // Fetch all notifications from API\n  const { data: allNotifications = [], isLoading } = useQuery<AlertNotifications[]>({\n    queryKey: ['/api/notifications'],\n    enabled: !!user && isOpen,\n    refetchInterval: isOpen ? 30000 : false, // Refetch every 30 seconds when open\n  });\n\n  // Fetch unread count separately for badge\n  const { data: unreadNotifications = [] } = useQuery<AlertNotifications[]>({\n    queryKey: ['/api/notifications/unread'],\n    enabled: !!user,\n    refetchInterval: 30000, // Always keep unread count updated\n  });\n\n  // Mark notification as read mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      const response = await fetch(`/api/notifications/${notificationId}/read`, { \n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      if (!response.ok) throw new Error('Failed to mark as read');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications/unread'] });\n    },\n  });\n\n  // Mark all notifications as read mutation\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/notifications/mark-all-read', { \n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      if (!response.ok) throw new Error('Failed to mark all as read');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications/unread'] });\n    },\n  });\n\n  if (!user) return null;\n\n  const totalUnreadCount = Math.max(liveUnreadCount || 0, unreadNotifications.length || 0);\n  const hasUrgentNotifications = liveNotifications.some(n => \n    n.priority === 'critical' || n.priority === 'high'\n  ) || allNotifications.some(n => \n    !n.isRead && (n.alertType === 'low_performance' || n.alertType === 'missed_deadline' || n.alertType === 'help_request')\n  );\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'critical':\n        return <AlertTriangle className=\"h-4 w-4 text-red-500\" />;\n      case 'high':\n        return <AlertTriangle className=\"h-4 w-4 text-orange-500\" />;\n      case 'medium':\n        return <Info className=\"h-4 w-4 text-blue-500\" />;\n      case 'low':\n        return <Clock className=\"h-4 w-4 text-gray-500\" />;\n      default:\n        return <Info className=\"h-4 w-4 text-blue-500\" />;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'critical':\n        return 'border-red-500 bg-red-50 dark:bg-red-950';\n      case 'high':\n        return 'border-orange-500 bg-orange-50 dark:bg-orange-950';\n      case 'medium':\n        return 'border-blue-500 bg-blue-50 dark:bg-blue-950';\n      case 'low':\n        return 'border-gray-500 bg-gray-50 dark:bg-gray-950';\n      default:\n        return 'border-blue-500 bg-blue-50 dark:bg-blue-950';\n    }\n  };\n\n  const getNotificationTypeIcon = (type: string) => {\n    switch (type) {\n      case 'success':\n      case 'achievement':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'warning':\n      case 'low_performance':\n      case 'missed_deadline':\n        return <AlertCircle className=\"h-4 w-4 text-orange-500\" />;\n      case 'urgent':\n      case 'help_request':\n        return <AlertTriangle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return <Info className=\"h-4 w-4 text-blue-500\" />;\n    }\n  };\n\n  const getAlertTypeLabel = (alertType: string) => {\n    switch (alertType) {\n      case 'low_performance':\n        return 'Low Performance';\n      case 'inactivity':\n        return 'Inactivity Alert';\n      case 'missed_deadline':\n        return 'Missed Deadline';\n      case 'help_request':\n        return 'Help Request';\n      case 'achievement':\n        return 'Achievement';\n      case 'streak_break':\n        return 'Streak Break';\n      default:\n        return alertType?.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase()) || 'Notification';\n    }\n  };\n\n  const handleMarkAsRead = (notificationId: string) => {\n    markAsReadMutation.mutate(notificationId);\n  };\n\n  const handleMarkAllAsRead = () => {\n    markAllAsReadMutation.mutate();\n  };\n\n  const renderNotification = (notification: any, isLive: boolean = false) => {\n    const isRead = isLive ? false : notification.isRead;\n    \n    return (\n      <Card \n        key={notification.id} \n        className={cn(\n          \"mb-3 border-l-4 transition-all duration-200\",\n          isRead ? \"opacity-70\" : \"shadow-sm\",\n          getPriorityColor(notification.priority || 'medium')\n        )}\n        data-testid={`notification-${notification.id}`}\n      >\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-start space-x-3 flex-1\">\n              <div className=\"flex-shrink-0 mt-1\">\n                {isLive ? \n                  getNotificationTypeIcon(notification.type) : \n                  getPriorityIcon(notification.priority || 'medium')\n                }\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center justify-between mb-1\">\n                  <h4 className=\"text-sm font-medium text-foreground truncate\">\n                    {notification.title || getAlertTypeLabel(notification.alertType)}\n                  </h4>\n                  <div className=\"flex items-center space-x-2 ml-2\">\n                    {!isRead && (\n                      <div className=\"w-2 h-2 bg-primary rounded-full\" />\n                    )}\n                    <span className=\"text-xs text-muted-foreground flex-shrink-0\">\n                      {format(new Date(notification.createdAt), 'MMM d, h:mm a')}\n                    </span>\n                  </div>\n                </div>\n                <p className=\"text-sm text-muted-foreground line-clamp-2 mb-2\">\n                  {notification.message || notification.body}\n                </p>\n                {notification.alertType && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {getAlertTypeLabel(notification.alertType)}\n                  </Badge>\n                )}\n              </div>\n            </div>\n            {!isRead && !isLive && (\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => handleMarkAsRead(notification.id)}\n                className=\"ml-2 p-1 h-auto\"\n                data-testid={`mark-read-${notification.id}`}\n              >\n                <Check className=\"h-3 w-3\" />\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      <Popover open={isOpen} onOpenChange={setIsOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"relative h-9 w-9 p-0\"\n            data-testid=\"notification-trigger\"\n          >\n            <Bell className=\"h-4 w-4\" />\n            {totalUnreadCount > 0 && (\n              <Badge \n                variant={hasUrgentNotifications ? \"destructive\" : \"default\"}\n                className=\"absolute -top-1 -right-1 h-5 w-5 p-0 text-xs flex items-center justify-center min-w-[20px]\"\n                data-testid=\"notification-count-badge\"\n              >\n                {totalUnreadCount > 99 ? '99+' : totalUnreadCount}\n              </Badge>\n            )}\n            {/* Connection status indicator */}\n            <div \n              className={cn(\n                \"absolute top-0 left-0 w-2 h-2 rounded-full\",\n                isConnected ? \"bg-green-500\" : \"bg-gray-400\"\n              )}\n              title={isConnected ? \"Connected\" : \"Disconnected\"}\n            />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent \n          className=\"w-96 p-0\" \n          align=\"end\"\n          data-testid=\"notification-popover\"\n        >\n          <div className=\"border-b p-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"font-semibold text-base\" data-testid=\"notification-title\">\n                Notifications\n                {user.role && (\n                  <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                    {user.role.charAt(0).toUpperCase() + user.role.slice(1)}\n                  </Badge>\n                )}\n              </h3>\n              <div className=\"flex items-center space-x-2\">\n                <div className={cn(\n                  \"flex items-center space-x-1 text-xs\",\n                  isConnected ? \"text-green-600\" : \"text-gray-500\"\n                )}>\n                  <div className={cn(\n                    \"w-2 h-2 rounded-full\",\n                    isConnected ? \"bg-green-500\" : \"bg-gray-400\"\n                  )} />\n                  <span>{isConnected ? \"Live\" : \"Offline\"}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'live' | 'all')}>\n            <div className=\"border-b\">\n              <TabsList className=\"grid w-full grid-cols-2 h-9\">\n                <TabsTrigger value=\"live\" className=\"text-xs\" data-testid=\"tab-live\">\n                  Live ({liveUnreadCount || 0})\n                </TabsTrigger>\n                <TabsTrigger value=\"all\" className=\"text-xs\" data-testid=\"tab-all\">\n                  All ({unreadNotifications.length || 0})\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            <TabsContent value=\"live\" className=\"mt-0\">\n              <div className=\"max-h-96\">\n                <ScrollArea className=\"h-full\">\n                  <div className=\"p-4\">\n                    {liveNotifications.length === 0 ? (\n                      <div className=\"text-center py-8 text-muted-foreground\">\n                        <Bell className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                        <p className=\"text-sm\">No live notifications</p>\n                        <p className=\"text-xs opacity-75\">You're all caught up!</p>\n                      </div>\n                    ) : (\n                      <div>\n                        {liveNotifications.map((notification) => \n                          renderNotification(notification, true)\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </ScrollArea>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"all\" className=\"mt-0\">\n              <div className=\"max-h-96\">\n                <ScrollArea className=\"h-full\">\n                  <div className=\"p-4\">\n                    {isLoading ? (\n                      <div className=\"space-y-3\">\n                        {[1, 2, 3].map((i) => (\n                          <div key={i} className=\"h-16 bg-muted animate-pulse rounded\" />\n                        ))}\n                      </div>\n                    ) : allNotifications.length === 0 ? (\n                      <div className=\"text-center py-8 text-muted-foreground\">\n                        <User className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                        <p className=\"text-sm\">No notifications yet</p>\n                        <p className=\"text-xs opacity-75\">Check back later for updates</p>\n                      </div>\n                    ) : (\n                      <div>\n                        {allNotifications.map((notification) => \n                          renderNotification(notification, false)\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </ScrollArea>\n              </div>\n\n              {/* Mark all as read button for all notifications tab */}\n              {allNotifications.some(n => !n.isRead) && (\n                <div className=\"border-t p-3\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={handleMarkAllAsRead}\n                    disabled={markAllAsReadMutation.isPending}\n                    className=\"w-full\"\n                    data-testid=\"mark-all-read\"\n                  >\n                    {markAllAsReadMutation.isPending ? \"Marking...\" : \"Mark all as read\"}\n                  </Button>\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}","size_bytes":14124}},"version":1}